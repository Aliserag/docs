"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4527],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>c});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),u=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},m=function(t){var e=u(t.components);return n.createElement(s.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},g=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),p=u(a),g=r,c=p["".concat(s,".").concat(g)]||p[g]||d[g]||l;return a?n.createElement(c,o(o({ref:e},m),{},{components:a})):n.createElement(c,o({ref:e},m))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=g;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[p]="string"==typeof t?t:r,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},72589:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const l={title:"Emulator",sidebar_title:"Emulator",description:"How to start a new instance of emulator"},o=void 0,i={unversionedId:"Tooling/flow-js-testing/emulator",id:"Tooling/flow-js-testing/emulator",title:"Emulator",description:"How to start a new instance of emulator",source:"@site/docs/Tooling/flow-js-testing/emulator.md",sourceDirName:"Tooling/flow-js-testing",slug:"/Tooling/flow-js-testing/emulator",permalink:"/docs/Tooling/flow-js-testing/emulator",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1683062072,formattedLastUpdatedAt:"May 2, 2023",frontMatter:{title:"Emulator",sidebar_title:"Emulator",description:"How to start a new instance of emulator"},sidebar:"tutorialSidebar",previous:{title:"Contracts Management",permalink:"/docs/Tooling/flow-js-testing/contracts"},next:{title:"basic",permalink:"/docs/Tooling/flow-js-testing/examples/basic"}},s={},u=[{value:"<code>emulator.start(options)</code>",id:"emulatorstartoptions",level:2},{value:"Arguments",id:"arguments",level:4},{value:"EmulatorOptions",id:"emulatoroptions",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:4},{value:"<code>emulator.stop()</code>",id:"emulatorstop",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"<code>emulator.setLogging(newState)</code>",id:"emulatorsetloggingnewstate",level:2},{value:"Arguments",id:"arguments-2",level:4},{value:"Usage",id:"usage-2",level:4}],m={toc:u},p="wrapper";function d(t){let{components:e,...a}=t;return(0,r.kt)(p,(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Flow Javascript Testing Framework exposes ",(0,r.kt)("inlineCode",{parentName:"p"},"emulator")," singleton allowing you to run and stop emulator instance\nprogrammatically. There are two methods available on it."),(0,r.kt)("h2",{id:"emulatorstartoptions"},(0,r.kt)("inlineCode",{parentName:"h2"},"emulator.start(options)")),(0,r.kt)("p",null,"Starts emulator on random available port, unless overriden in options. Returns Promise."),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/Tooling/flow-js-testing/emulator#emulatoroptions"},"EmulatorOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an object containing options for starting the emulator")))),(0,r.kt)("h4",{id:"emulatoroptions"},"EmulatorOptions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"logging")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"whether log messages from emulator shall be added to the output (default: false)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"flags")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},'custom command-line flags to supply to the emulator (default: "")')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"adminPort")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"override the port which the emulator will run the admin server on (default: auto)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"restPort")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"override the port which the emulator will run the REST server on (default: auto)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpcPort")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"override the port which the emulator will run the GRPC server on (default: auto)")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/Tooling/flow-js-testing/emulator#Promise"},"Promise")),(0,r.kt)("td",{parentName:"tr",align:null},"Promise, which resolves to true if emulator started successfully")))),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {emulator, init} from "@onflow/flow-js-testing"\n\ndescribe("test setup", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "../cadence")\n\n    await init(basePath)\n\n    // Start emulator instance on auto-selected available ports\n    await emulator.start()\n  })\n})\n')),(0,r.kt)("h2",{id:"emulatorstop"},(0,r.kt)("inlineCode",{parentName:"h2"},"emulator.stop()")),(0,r.kt)("p",null,"Stops emulator instance. Returns Promise."),(0,r.kt)("h4",{id:"arguments-1"},"Arguments"),(0,r.kt)("p",null,"This method does not expect any arguments."),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {emulator, init} from "@onflow/flow-js-testing"\n\ndescribe("test setup", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "../cadence")\n\n    await init(basePath)\n    await emulator.start()\n  })\n\n  // Stop emulator, so it could be restarted\n  afterEach(async () => {\n    await emulator.stop()\n  })\n})\n')),(0,r.kt)("h2",{id:"emulatorsetloggingnewstate"},(0,r.kt)("inlineCode",{parentName:"h2"},"emulator.setLogging(newState)")),(0,r.kt)("p",null,"Set logging flag on emulator, allowing to temporally enable/disable logging."),(0,r.kt)("h4",{id:"arguments-2"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newState")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable/disable logging")))),(0,r.kt)("h4",{id:"usage-2"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {emulator, init} from "@onflow/flow-js-testing"\n\ndescribe("test setup", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "../cadence")\n\n    await init(basePath)\n    await emulator.start()\n  })\n\n  // Stop emulator, so it could be restarted\n  afterEach(async () => {\n    await emulator.stop()\n  })\n\n  test("basic test", async () => {\n    // Turn on logging from begining\n    emulator.setLogging(true)\n    // some asserts and interactions\n\n    // Turn off logging for later calls\n    emulator.setLogging(false)\n    // more asserts and interactions here\n  })\n})\n')))}d.isMDXComponent=!0}}]);