"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),y=r,f=u["".concat(c,".").concat(y)]||u[y]||d[y]||o;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=y;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},18208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"Type Annotations"},i=void 0,l={unversionedId:"cadence/language/type-annotations",id:"cadence/language/type-annotations",title:"Type Annotations",description:"When declaring a constant or variable,",source:"@site/docs/cadence/language/type-annotations.md",sourceDirName:"cadence/language",slug:"/cadence/language/type-annotations",permalink:"/cadence/language/type-annotations",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618386,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{title:"Type Annotations"},sidebar:"tutorialSidebar",previous:{title:"Transactions",permalink:"/cadence/language/transactions"},next:{title:"Type Hierarchy",permalink:"/cadence/language/type-hierarchy"}},c={},p=[],s={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When declaring a constant or variable,\nan optional ",(0,r.kt)("em",{parentName:"p"},"type annotation")," can be provided,\nto make it explicit what type the declaration has."),(0,r.kt)("p",null,"If no type annotation is provided, the type of the declaration is\n",(0,r.kt)("a",{parentName:"p",href:"type-inference"},"inferred from the initial value"),"."),(0,r.kt)("p",null,"For function parameters a type annotation must be provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a variable named `boolVarWithAnnotation`, which has an explicit type annotation.\n//\n// `Bool` is the type of booleans.\n//\nvar boolVarWithAnnotation: Bool = false\n\n// Declare a constant named `integerWithoutAnnotation`, which has no type annotation\n// and for which the type is inferred to be `Int`, the type of arbitrary-precision integers.\n//\n// This is based on the initial value which is an integer literal.\n// Integer literals are always inferred to be of type `Int`.\n//\nlet integerWithoutAnnotation = 1\n\n// Declare a constant named `smallIntegerWithAnnotation`, which has an explicit type annotation.\n// Because of the explicit type annotation, the type is not inferred.\n// This declaration is valid because the integer literal `1` fits into the range of the type `Int8`,\n// the type of 8-bit signed integers.\n//\nlet smallIntegerWithAnnotation: Int8 = 1\n")),(0,r.kt)("p",null,"If a type annotation is provided, the initial value must be of this type.\nAll new values assigned to variables must match its type.\nThis type safety is explained in more detail in a ",(0,r.kt)("a",{parentName:"p",href:"type-safety"},"separate section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Invalid: declare a variable with an explicit type `Bool`,\n// but the initial value has type `Int`.\n//\nlet booleanConstant: Bool = 1\n\n// Declare a variable that has the inferred type `Bool`.\n//\nvar booleanVariable = false\n\n// Invalid: assign a value with type `Int` to a variable which has the inferred type `Bool`.\n//\nbooleanVariable = 1\n")))}d.isMDXComponent=!0}}]);