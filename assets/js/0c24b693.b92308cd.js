"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7648],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=u(n),d=o,f=h["".concat(s,".").concat(d)]||h[d]||p[d]||r;return n?a.createElement(f,i(i({ref:t},l),{},{components:n})):a.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[h]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},61802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const r={title:"Accounts"},i=void 0,c={unversionedId:"cadence/language/accounts",id:"cadence/language/accounts",title:"Accounts",description:"Every account can be accessed through two types, PublicAccount and AuthAccount.",source:"@site/docs/cadence/language/accounts.mdx",sourceDirName:"cadence/language",slug:"/cadence/language/accounts",permalink:"/docs/cadence/language/accounts",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682709940,formattedLastUpdatedAt:"Apr 28, 2023",frontMatter:{title:"Accounts"},sidebar:"tutorialSidebar",previous:{title:"Access control",permalink:"/docs/cadence/language/access-control"},next:{title:"Attachments",permalink:"/docs/cadence/language/attachments"}},s={},u=[{value:"<code>PublicAccount</code>",id:"publicaccount",level:2},{value:"<code>AuthAccount</code>",id:"authaccount",level:2},{value:"Account Creation",id:"account-creation",level:2},{value:"Account Keys",id:"account-keys",level:2},{value:"Account Key API",id:"account-key-api",level:3},{value:"Add Account Keys",id:"add-account-keys",level:4},{value:"Get Account Keys",id:"get-account-keys",level:4},{value:"Revoke Account Keys",id:"revoke-account-keys",level:4},{value:"Account Inbox",id:"account-inbox",level:2},{value:"Publishing a Capability",id:"publishing-a-capability",level:3},{value:"Claiming a Capability",id:"claiming-a-capability",level:3},{value:"Unpublishing a Capability",id:"unpublishing-a-capability",level:3},{value:"Account Storage",id:"account-storage",level:2},{value:"Paths",id:"paths",level:3},{value:"Path Functions",id:"path-functions",level:4},{value:"Account Storage API",id:"account-storage-api",level:3},{value:"Storage Iteration",id:"storage-iteration",level:2},{value:"Storage limit",id:"storage-limit",level:2}],l=(h="Callout",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var h;const p={toc:u},d="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Every account can be accessed through two types, ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccount")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),"."),(0,o.kt)("h2",{id:"publicaccount"},(0,o.kt)("inlineCode",{parentName:"h2"},"PublicAccount")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Public Account")," objects have the type ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccount"),",\nwhich represents the publicly available portion of an account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub struct PublicAccount {\n\n    /// The address of the account.\n    pub let address: Address\n\n    /// The FLOW balance of the default vault of this account.\n    pub let balance: UFix64\n\n    /// The FLOW balance of the default vault of this account that is available to be moved.\n    pub let availableBalance: UFix64\n\n    /// The current amount of storage used by the account in bytes.\n    pub let storageUsed: UInt64\n\n    /// The storage capacity of the account in bytes.\n    pub let storageCapacity: UInt64\n\n    /// The contracts deployed to the account.\n    pub let contracts: PublicAccount.Contracts\n\n    /// The keys assigned to the account.\n    pub let keys: PublicAccount.Keys\n\n    /// All public paths of this account.\n    pub let publicPaths: [PublicPath]\n\n    /// Returns the capability at the given public path.\n    pub fun getCapability<T: &Any>(_ path: PublicPath): Capability<T>\n\n    /// Returns the target path of the capability at the given public or private path,\n    /// or nil if there exists no capability at the given path.\n    pub fun getLinkTarget(_ path: CapabilityPath): Path?\n\n    /// Iterate over all the public paths of an account.\n    /// passing each path and type in turn to the provided callback function.\n    ///\n    /// The callback function takes two arguments:\n    ///   1. The path of the stored object\n    ///   2. The runtime type of that object\n    ///\n    /// Iteration is stopped early if the callback function returns `false`.\n    ///\n    /// The order of iteration, as well as the behavior of adding or removing objects from storage during iteration,\n    /// is undefined.\n    pub fun forEachPublic(_ function: ((PublicPath, Type): Bool))\n\n    pub struct Contracts {\n\n        /// The names of all contracts deployed in the account.\n        pub let names: [String]\n\n        /// Returns the deployed contract for the contract/contract interface with the given name in the account, if any.\n        ///\n        /// Returns nil if no contract/contract interface with the given name exists in the account.\n        pub fun get(name: String): DeployedContract?\n\n        /// Returns a reference of the given type to the contract with the given name in the account, if any.\n        ///\n        /// Returns nil if no contract with the given name exists in the account,\n        /// or if the contract does not conform to the given type.\n        pub fun borrow<T: &Any>(name: String): T?\n    }\n\n    pub struct Keys {\n\n        /// Returns the key at the given index, if it exists, or nil otherwise.\n        ///\n        /// Revoked keys are always returned, but they have `isRevoked` field set to true.\n        pub fun get(keyIndex: Int): AccountKey?\n\n        /// Iterate over all unrevoked keys in this account,\n        /// passing each key in turn to the provided function.\n        ///\n        /// Iteration is stopped early if the function returns `false`.\n        /// The order of iteration is undefined.\n        pub fun forEach(_ function: ((AccountKey): Bool))\n\n        /// The total number of unrevoked keys in this account.\n        pub let count: UInt64\n    }\n}\n")),(0,o.kt)("p",null,"  Any code can get the ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccount")," for an account address\nusing the built-in ",(0,o.kt)("inlineCode",{parentName:"p"},"getAccount")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun getAccount(_ address: Address): PublicAccount\n")),(0,o.kt)("h2",{id:"authaccount"},(0,o.kt)("inlineCode",{parentName:"h2"},"AuthAccount")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Authorized Account")," object have the type ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),",\nwhich represents the authorized portion of an account."),(0,o.kt)("p",null,"Access to an ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," means having full access to its ",(0,o.kt)("a",{parentName:"p",href:"#account-storage"},"storage"),",\npublic keys, and code."),(0,o.kt)("p",null,"Only ",(0,o.kt)("a",{parentName:"p",href:"transactions"},"signed transactions")," can get the ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," for an account.\nFor each signer of the transaction that signs as an authorizer, the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," object is passed\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"prepare")," phase of the transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub struct AuthAccount {\n\n    /// The address of the account.\n    pub let address: Address\n\n    /// The FLOW balance of the default vault of this account.\n    pub let balance: UFix64\n\n    /// The FLOW balance of the default vault of this account that is available to be moved.\n    pub let availableBalance: UFix64\n\n    /// The current amount of storage used by the account in bytes.\n    pub let storageUsed: UInt64\n\n    /// The storage capacity of the account in bytes.\n    pub let storageCapacity: UInt64\n\n    /// The contracts deployed to the account.\n    pub let contracts: AuthAccount.Contracts\n\n    /// The keys assigned to the account.\n    pub let keys: AuthAccount.Keys\n\n    /// The inbox allows bootstrapping (sending and receiving) capabilities.\n    pub let inbox: AuthAccount.Inbox\n\n    /// All public paths of this account.\n    pub let publicPaths: [PublicPath]\n\n    /// All private paths of this account.\n    pub let privatePaths: [PrivatePath]\n\n    /// All storage paths of this account.\n    pub let storagePaths: [StoragePath]\n\n    /// **DEPRECATED**: Use `keys.add` instead.\n    ///\n    /// Adds a public key to the account.\n    ///\n    /// The public key must be encoded together with their signature algorithm, hashing algorithm and weight.\n    pub fun addPublicKey(_ publicKey: [UInt8])\n\n    /// **DEPRECATED**: Use `keys.revoke` instead.\n    ///\n    /// Revokes the key at the given index.\n    pub fun removePublicKey(_ index: Int)\n\n    /// Saves the given object into the account's storage at the given path.\n    ///\n    /// Resources are moved into storage, and structures are copied.\n    ///\n    /// If there is already an object stored under the given path, the program aborts.\n    ///\n    /// The path must be a storage path, i.e., only the domain `storage` is allowed.\n    pub fun save<T: Storable>(_ value: T, to: StoragePath)\n\n    /// Reads the type of an object from the account's storage which is stored under the given path,\n    /// or nil if no object is stored under the given path.\n    ///\n    /// If there is an object stored, the type of the object is returned without modifying the stored object.\n    ///\n    /// The path must be a storage path, i.e., only the domain `storage` is allowed.\n    pub fun type(at: StoragePath): Type?\n\n    /// Loads an object from the account's storage which is stored under the given path,\n    /// or nil if no object is stored under the given path.\n    ///\n    /// If there is an object stored,\n    /// the stored resource or structure is moved out of storage and returned as an optional.\n    ///\n    /// When the function returns, the storage no longer contains an object under the given path.\n    ///\n    /// The given type must be a supertype of the type of the loaded object.\n    /// If it is not, the function panics.\n    ///\n    /// The given type must not necessarily be exactly the same as the type of the loaded object.\n    ///\n    /// The path must be a storage path, i.e., only the domain `storage` is allowed.\n    pub fun load<T: Storable>(from: StoragePath): T?\n\n    /// Returns a copy of a structure stored in account storage under the given path,\n    /// without removing it from storage,\n    /// or nil if no object is stored under the given path.\n    ///\n    /// If there is a structure stored, it is copied.\n    /// The structure stays stored in storage after the function returns.\n    ///\n    /// The given type must be a supertype of the type of the copied structure.\n    /// If it is not, the function panics.\n    ///\n    /// The given type must not necessarily be exactly the same as the type of the copied structure.\n    ///\n    /// The path must be a storage path, i.e., only the domain `storage` is allowed.\n    pub fun copy<T: AnyStruct>(from: StoragePath): T?\n\n    /// Returns a reference to an object in storage without removing it from storage.\n    ///\n    /// If no object is stored under the given path, the function returns nil.\n    /// If there is an object stored, a reference is returned as an optional,\n    /// provided it can be borrowed using the given type.\n    /// If the stored object cannot be borrowed using the given type, the function panics.\n    ///\n    /// The given type must not necessarily be exactly the same as the type of the borrowed object.\n    ///\n    /// The path must be a storage path, i.e., only the domain `storage` is allowed\n    pub fun borrow<T: &Any>(from: StoragePath): T?\n\n    /// Creates a capability at the given public or private path,\n    /// which targets the given public, private, or storage path.\n    ///\n    /// The target path leads to the object that will provide the functionality defined by this capability.\n    ///\n    /// The given type defines how the capability can be borrowed, i.e., how the stored value can be accessed.\n    ///\n    /// Returns nil if a link for the given capability path already exists, or the newly created capability if not.\n    ///\n    /// It is not necessary for the target path to lead to a valid object; the target path could be empty,\n    /// or could lead to an object which does not provide the necessary type interface:\n    /// The link function does **not** check if the target path is valid/exists at the time the capability is created\n    /// and does **not** check if the target value conforms to the given type.\n    ///\n    /// The link is latent.\n    ///\n    /// The target value might be stored after the link is created,\n    /// and the target value might be moved out after the link has been created.\n    pub fun link<T: &Any>(_ newCapabilityPath: CapabilityPath, target: Path): Capability<T>?\n\n    /// Creates a capability at the given public or private path which targets this account.\n    ///\n    /// Returns nil if a link for the given capability path already exists, or the newly created capability if not.\n    pub fun linkAccount(_ newCapabilityPath: PrivatePath): Capability<&AuthAccount>?\n\n    /// Returns the capability at the given private or public path.\n    pub fun getCapability<T: &Any>(_ path: CapabilityPath): Capability<T>\n\n    /// Returns the target path of the capability at the given public or private path,\n    /// or nil if there exists no capability at the given path.\n    pub fun getLinkTarget(_ path: CapabilityPath): Path?\n\n    /// Removes the capability at the given public or private path.\n    pub fun unlink(_ path: CapabilityPath)\n\n    /// Iterate over all the public paths of an account.\n    /// passing each path and type in turn to the provided callback function.\n    ///\n    /// The callback function takes two arguments:\n    ///   1. The path of the stored object\n    ///   2. The runtime type of that object\n    ///\n    /// Iteration is stopped early if the callback function returns `false`.\n    ///\n    /// The order of iteration, as well as the behavior of adding or removing objects from storage during iteration,\n    /// is undefined.\n    pub fun forEachPublic(_ function: ((PublicPath, Type): Bool))\n\n    /// Iterate over all the private paths of an account.\n    /// passing each path and type in turn to the provided callback function.\n    ///\n    /// The callback function takes two arguments:\n    ///   1. The path of the stored object\n    ///   2. The runtime type of that object\n    ///\n    /// Iteration is stopped early if the callback function returns `false`.\n    ///\n    /// The order of iteration, as well as the behavior of adding or removing objects from storage during iteration,\n    /// is undefined.\n    pub fun forEachPrivate(_ function: ((PrivatePath, Type): Bool))\n\n    /// Iterate over all the stored paths of an account.\n    /// passing each path and type in turn to the provided callback function.\n    ///\n    /// The callback function takes two arguments:\n    ///   1. The path of the stored object\n    ///   2. The runtime type of that object\n    ///\n    /// Iteration is stopped early if the callback function returns `false`.\n    ///\n    /// The order of iteration, as well as the behavior of adding or removing objects from storage during iteration,\n    /// is undefined.\n    pub fun forEachStored(_ function: ((StoragePath, Type): Bool))\n\n    pub struct Contracts {\n\n        /// The names of all contracts deployed in the account.\n        pub let names: [String]\n\n        /// Adds the given contract to the account.\n        ///\n        /// The `code` parameter is the UTF-8 encoded representation of the source code.\n        /// The code must contain exactly one contract or contract interface,\n        /// which must have the same name as the `name` parameter.\n        ///\n        /// All additional arguments that are given are passed further to the initializer\n        /// of the contract that is being deployed.\n        ///\n        /// The function fails if a contract/contract interface with the given name already exists in the account,\n        /// if the given code does not declare exactly one contract or contract interface,\n        /// or if the given name does not match the name of the contract/contract interface declaration in the code.\n        ///\n        /// Returns the deployed contract.\n        pub fun add(\n            name: String,\n            code: [UInt8]\n        ): DeployedContract\n\n        /// **Experimental**\n        ///\n        /// Updates the code for the contract/contract interface in the account.\n        ///\n        /// The `code` parameter is the UTF-8 encoded representation of the source code.\n        /// The code must contain exactly one contract or contract interface,\n        /// which must have the same name as the `name` parameter.\n        ///\n        /// Does **not** run the initializer of the contract/contract interface again.\n        /// The contract instance in the world state stays as is.\n        ///\n        /// Fails if no contract/contract interface with the given name exists in the account,\n        /// if the given code does not declare exactly one contract or contract interface,\n        /// or if the given name does not match the name of the contract/contract interface declaration in the code.\n        ///\n        /// Returns the deployed contract for the updated contract.\n        pub fun update__experimental(name: String, code: [UInt8]): DeployedContract\n\n        /// Returns the deployed contract for the contract/contract interface with the given name in the account, if any.\n        ///\n        /// Returns nil if no contract/contract interface with the given name exists in the account.\n        pub fun get(name: String): DeployedContract?\n\n        /// Removes the contract/contract interface from the account which has the given name, if any.\n        ///\n        /// Returns the removed deployed contract, if any.\n        ///\n        /// Returns nil if no contract/contract interface with the given name exists in the account.\n        pub fun remove(name: String): DeployedContract?\n\n        /// Returns a reference of the given type to the contract with the given name in the account, if any.\n        ///\n        /// Returns nil if no contract with the given name exists in the account,\n        /// or if the contract does not conform to the given type.\n        pub fun borrow<T: &Any>(name: String): T?\n    }\n\n    pub struct Keys {\n\n        /// Adds a new key with the given hashing algorithm and a weight.\n        ///\n        /// Returns the added key.\n        pub fun add(\n            publicKey: PublicKey,\n            hashAlgorithm: HashAlgorithm,\n            weight: UFix64\n        ): AccountKey\n\n        /// Returns the key at the given index, if it exists, or nil otherwise.\n        ///\n        /// Revoked keys are always returned, but they have `isRevoked` field set to true.\n        pub fun get(keyIndex: Int): AccountKey?\n\n        /// Marks the key at the given index revoked, but does not delete it.\n        ///\n        /// Returns the revoked key if it exists, or nil otherwise.\n        pub fun revoke(keyIndex: Int): AccountKey?\n\n        /// Iterate over all unrevoked keys in this account,\n        /// passing each key in turn to the provided function.\n        ///\n        /// Iteration is stopped early if the function returns `false`.\n        /// The order of iteration is undefined.\n        pub fun forEach(_ function: ((AccountKey): Bool))\n\n        /// The total number of unrevoked keys in this account.\n        pub let count: UInt64\n    }\n\n    pub struct Inbox {\n\n        /// Publishes a new Capability under the given name,\n        /// to be claimed by the specified recipient.\n        pub fun publish(_ value: Capability, name: String, recipient: Address)\n\n        /// Unpublishes a Capability previously published by this account.\n        ///\n        /// Returns `nil` if no Capability is published under the given name.\n        ///\n        /// Errors if the Capability under that name does not match the provided type.\n        pub fun unpublish<T: &Any>(_ name: String): Capability<T>?\n\n        /// Claims a Capability previously published by the specified provider.\n        ///\n        /// Returns `nil` if no Capability is published under the given name,\n        /// or if this account is not its intended recipient.\n        ///\n        /// Errors if the Capability under that name does not match the provided type.\n        pub fun claim<T: &Any>(_ name: String, provider: Address): Capability<T>?\n    }\n}\n")),(0,o.kt)("p",null,"A script can get the ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," for an account address using the built-in ",(0,o.kt)("inlineCode",{parentName:"p"},"getAuthAccount")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun getAuthAccount(_ address: Address): AuthAccount\n")),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," object can perform all operations associated with authorized accounts,\nand as such this function is only available in scripts,\nwhich discard their changes upon completion.\nAttempting to use this function outside of a script will cause a type error."),(0,o.kt)("h2",{id:"account-creation"},"Account Creation"),(0,o.kt)("p",null,"Accounts can be created by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," constructor\nand passing the account that should pay for the account creation for the ",(0,o.kt)("inlineCode",{parentName:"p"},"payer")," parameter."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"payer")," must have enough funds to be able to create an account.\nIf the account does not have the required funds, the program aborts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction() {\n    prepare(signer: AuthAccount) {\n        let account = AuthAccount(payer: signer)\n    }\n}\n")),(0,o.kt)("h2",{id:"account-keys"},"Account Keys"),(0,o.kt)("p",null,"An account (both ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccount")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),") has keys associated with it.\nAn account key has the following structure."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"struct AccountKey {\n    let keyIndex: Int\n    let publicKey: PublicKey\n    let hashAlgorithm: HashAlgorithm\n    let weight: UFix64\n    let isRevoked: Bool\n}\n")),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"crypto#publickey"},(0,o.kt)("inlineCode",{parentName:"a"},"PublicKey")," section")," for more details on the creation and validity of public keys."),(0,o.kt)("h3",{id:"account-key-api"},"Account Key API"),(0,o.kt)("p",null,"Account key API provides a set of functions to manage account keys."),(0,o.kt)("h4",{id:"add-account-keys"},"Add Account Keys"),(0,o.kt)("p",null,"To authorize access to the account, keys can be added using the ",(0,o.kt)("inlineCode",{parentName:"p"},"add()")," function.\nKeys can only be added to an ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),"."),(0,o.kt)("p",null,"For example, to create an account and have the signer of the transaction pay for the account\ncreation, and authorize one key to access the account:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction(publicKey: [UInt8]) {\n    prepare(signer: AuthAccount) {\n        let key = PublicKey(\n            publicKey: publicKey,\n            signatureAlgorithm: SignatureAlgorithm.ECDSA_P256\n        )\n\n        let account = AuthAccount(payer: signer)\n\n        account.keys.add(\n            publicKey: key,\n            hashAlgorithm: HashAlgorithm.SHA3_256,\n            weight: 10.0\n        )\n    }\n}\n")),(0,o.kt)("p",null,"To add a public key to an existing account, which signed the transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction(publicKey: [UInt8]) {\n    prepare(signer: AuthAccount) {\n        let key = PublicKey(\n            publicKey: publicKey,\n            signatureAlgorithm: SignatureAlgorithm.ECDSA_P256\n        )\n\n        signer.keys.add(\n            publicKey: key,\n            hashAlgorithm: HashAlgorithm.SHA3_256,\n            weight: 10.0\n        )\n    }\n}\n")),(0,o.kt)(l,{type:"info",mdxType:"Callout"},"\u26a0\ufe0f  Note: Keys can also be added using the `addPublicKey` function. However, this method is currently deprecated and is available only for the backward compatibility. The `addPublicKey` method accepts the public key encoded together with their signature algorithm, hashing algorithm and weight.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction(key: [UInt8]) {\n    prepare(signer: AuthAccount) {\n        let account = AuthAccount(payer: signer)\n        account.addPublicKey(key)\n    }\n}\n"))),(0,o.kt)("h4",{id:"get-account-keys"},"Get Account Keys"),(0,o.kt)("p",null,"Keys that are added to an account can be retrieved using ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," function, using the index of the key.\nRevoked keys are always returned, but they have ",(0,o.kt)("inlineCode",{parentName:"p"},"isRevoked")," field set to true.\nReturns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil")," if there is no key available at the given index.\nKeys can be retrieved from both ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccout")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction() {\n    prepare(signer: AuthAccount) {\n        // Get a key from an auth account.\n        let keyA = signer.keys.get(keyIndex: 2)\n\n        // Get a key from the public aacount.\n        let publicAccount = getAccount(0x42)\n        let keyB = publicAccount.keys.get(keyIndex: 2)\n    }\n}\n")),(0,o.kt)("h4",{id:"revoke-account-keys"},"Revoke Account Keys"),(0,o.kt)("p",null,"Keys that have been added to an account can be revoked using ",(0,o.kt)("inlineCode",{parentName:"p"},"revoke()")," function.\nRevoke function only marks the key at the given index as revoked, but never deletes it.\nKeys can only be revoked from an ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction() {\n    prepare(signer: AuthAccount) {\n        // Get a key from an auth account.\n        let keyA = signer.keys.revoke(keyIndex: 2)\n    }\n}\n")),(0,o.kt)(l,{type:"info",mdxType:"Callout"},"\u26a0\ufe0f  Note: Keys can also be removed using the `removePublicKey` function. However, this method is deprecated and is available only for the backward compatibility."),(0,o.kt)("h2",{id:"account-inbox"},"Account Inbox"),(0,o.kt)("p",null,"Accounts also possess an ",(0,o.kt)("inlineCode",{parentName:"p"},"Inbox")," that can be used to make ",(0,o.kt)("a",{parentName:"p",href:"capability-based-access-control"},"Capabilities")," available to specific accounts.\nThe functions in this ",(0,o.kt)("inlineCode",{parentName:"p"},"Inbox"),' provide a convenient means to "bootstrap" Capabilities,\nsetting up an initial connection between two accounts that will later allow them to transfer data or permissions through a Capability.'),(0,o.kt)("h3",{id:"publishing-a-capability"},"Publishing a Capability"),(0,o.kt)("p",null,"An account (the provider) that would like to provide a Capability to another account (the recipient) can do so using the ",(0,o.kt)("inlineCode",{parentName:"p"},"publish")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun publish(_ value: Capability, name: String, recipient: Address)\n")),(0,o.kt)("p",null,"This publishes the specified Capability using the provided string as an identifier, to be later claimed by the recipient.\nNote, however, that until the recipient does claim this Capability, it is stored on the provider's account,\nand contributes towards their Account Storage total."),(0,o.kt)("p",null,"Calling this function emits an event, ",(0,o.kt)("inlineCode",{parentName:"p"},"InboxValuePublished"),",\nthat includes the address of both the provider and the recipient, as well as the name and the type of the published Capability.\nRefer to the ",(0,o.kt)("a",{parentName:"p",href:"core-events#inbox-value-published"},(0,o.kt)("inlineCode",{parentName:"a"},"Core Events")," section")," for more details on this event."),(0,o.kt)("h3",{id:"claiming-a-capability"},"Claiming a Capability"),(0,o.kt)("p",null,"The intended recipient of a Capability can claim that Capability from the provider using the ",(0,o.kt)("inlineCode",{parentName:"p"},"claim")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun claim<T: &Any>(_ name: String, provider: Address): Capability<T>?\n")),(0,o.kt)("p",null,"This looks up the specified name in the provider's inbox, returning it to the recipient if it is present,\nconforms to the provided type argument, and is intended for the calling recipient.\nIf the provider has no Capability stored under the provided name,\nor if the calling recipient is not the intended recipient of the Capability, the function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nIf the borrow type of the Capability is not a subtype of the provided type argument, the function will error at runtime."),(0,o.kt)("p",null,"Upon successful completion of the ",(0,o.kt)("inlineCode",{parentName:"p"},"claim")," function, the claimed Capability is removed from the provider's inbox.\nNote that this means a given Capability can only be claimed once."),(0,o.kt)("p",null,"Calling this function emits an event, ",(0,o.kt)("inlineCode",{parentName:"p"},"InboxValueClaimed"),",\nthat includes the address of both the provider and the recipient, as well as the name of the claimed Capability.\nRefer to the ",(0,o.kt)("a",{parentName:"p",href:"core-events#inbox-value-claimed"},(0,o.kt)("inlineCode",{parentName:"a"},"Core Events")," section")," for more details on this event."),(0,o.kt)("h3",{id:"unpublishing-a-capability"},"Unpublishing a Capability"),(0,o.kt)("p",null,"If the provider of a Capability no longer wishes for it to be published for some reason (e.g. they no longer wish to pay for its storage costs),\nthey can unpublish it using the ",(0,o.kt)("inlineCode",{parentName:"p"},"unpublish")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun unpublish<T: &Any>(_ name: String): Capability<T>?\n")),(0,o.kt)("p",null,"This looks up the specified name in the provider's inbox, returning it to the provider if it is present and conforms to the provided type argument.\nIf the provider has no Capability stored under the provided name, the function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nIf the borrow type of the Capability is not a subtype of the provided type argument, the function will error at runtime."),(0,o.kt)("p",null,"Upon successful completion of the ",(0,o.kt)("inlineCode",{parentName:"p"},"unpublish")," function, the unpublished Capability is removed from the provider's inbox."),(0,o.kt)("p",null,"Calling this function emits an event, ",(0,o.kt)("inlineCode",{parentName:"p"},"InboxValueUnpublished"),",\nthat includes the address of the provider, and the name of the claimed Capability.\nRefer to the ",(0,o.kt)("a",{parentName:"p",href:"core-events#inbox-value-unpublished"},(0,o.kt)("inlineCode",{parentName:"a"},"Core Events")," section")," for more details on this event."),(0,o.kt)("h2",{id:"account-storage"},"Account Storage"),(0,o.kt)("p",null,"All accounts have storage.\nBoth resources and structures can be stored in account storage."),(0,o.kt)("h3",{id:"paths"},"Paths"),(0,o.kt)("p",null,"Objects are stored under paths.\nPaths consist of a domain and an identifier."),(0,o.kt)("p",null,"Paths start with the character ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),", followed by the domain, the path separator ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),",\nand finally the identifier.\nFor example, the path ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/test")," has the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," and the identifier ",(0,o.kt)("inlineCode",{parentName:"p"},"test"),"."),(0,o.kt)("p",null,"There are only three valid domains: ",(0,o.kt)("inlineCode",{parentName:"p"},"storage"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"private"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"public"),"."),(0,o.kt)("p",null,"Objects in storage are always stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," domain."),(0,o.kt)("p",null,"Paths in the storage domain have type ",(0,o.kt)("inlineCode",{parentName:"p"},"StoragePath"),",\nin the private domain ",(0,o.kt)("inlineCode",{parentName:"p"},"PrivatePath"),",\nand in the public domain ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicPath"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PrivatePath")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicPath")," are subtypes of ",(0,o.kt)("inlineCode",{parentName:"p"},"CapabilityPath"),"."),(0,o.kt)("p",null,"Both ",(0,o.kt)("inlineCode",{parentName:"p"},"StoragePath")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"CapabilityPath")," are subtypes of ",(0,o.kt)("inlineCode",{parentName:"p"},"Path"),"."),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",{colspan:"3"},"Path")),(0,o.kt)("tr",null,(0,o.kt)("td",{colspan:"2"},"CapabilityPath"),(0,o.kt)("td",{colspan:"2",rowspan:"2"},"StoragePath")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"PrivatePath"),(0,o.kt)("td",null,"PublicPath"))),(0,o.kt)("h4",{id:"path-functions"},"Path Functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toString(): String\n")),(0,o.kt)("p",null,"Returns the string representation of the path."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'let storagePath = /storage/path\n\nstoragePath.toString()  // is "/storage/path"\n')),(0,o.kt)("p",null,"There are also utilities to produce paths from strings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun PublicPath(identifier: string): PublicPath?\nfun PrivatePath(identifier: string): PrivatePath?\nfun StoragePath(identifier: string): StoragePath?\n")),(0,o.kt)("p",null,"Each of these functions take an identifier and produce a path of the appropriate domain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'let pathID = "foo"\nlet path = PublicPath(identifier: pathID) // is /public/foo\n')),(0,o.kt)("h3",{id:"account-storage-api"},"Account Storage API"),(0,o.kt)("p",null,"Account storage is accessed through the following functions of ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),".\nThis means that any code that has access to the authorized account has access\nto all its stored objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun save<T>(_ value: T, to: StoragePath)\n")),(0,o.kt)("p",null,"Saves an object to account storage.\nResources are moved into storage, and structures are copied."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"T")," is the type parameter for the object type.\nIt can be inferred from the argument's type."),(0,o.kt)("p",null,"If there is already an object stored under the given path, the program aborts."),(0,o.kt)("p",null,"The path must be a storage path, i.e., only the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," is allowed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun type(at: StoragePath): Type?\n")),(0,o.kt)("p",null,"Reads the type of an object from the account's storage which is stored under the given path, or nil if no object is stored under the given path."),(0,o.kt)("p",null,"If there is an object stored, the type of the object is returned without modifying the stored object."),(0,o.kt)("p",null,"The path must be a storage path, i.e., only the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," is allowed"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun load<T>(from: StoragePath): T?\n")),(0,o.kt)("p",null,"Loads an object from account storage.\nIf no object is stored under the given path, the function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nIf there is an object stored, the stored resource or structure is moved\nout of storage and returned as an optional.\nWhen the function returns, the storage no longer contains an object\nunder the given path."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"T")," is the type parameter for the object type.\nA type argument for the parameter must be provided explicitly."),(0,o.kt)("p",null,"The type ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," must be a supertype of the type of the loaded object.\nIf it is not, execution will abort with an error.\nThe given type does not necessarily need to be exactly the same as the type of the loaded object."),(0,o.kt)("p",null,"The path must be a storage path, i.e., only the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," is allowed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun copy<T: AnyStruct>(from: StoragePath): T?\n")),(0,o.kt)("p",null,"Returns a copy of a structure stored in account storage, without removing it from storage."),(0,o.kt)("p",null,"If no structure is stored under the given path, the function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nIf there is a structure stored, it is copied.\nThe structure stays stored in storage after the function returns."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"T")," is the type parameter for the structure type.\nA type argument for the parameter must be provided explicitly."),(0,o.kt)("p",null,"The type ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," must be a supertype of the type of the copied structure.\nIf it is not, execution will abort with an error.\nThe given type does not necessarily need to be exactly the same as\nthe type of the copied structure."),(0,o.kt)("p",null,"The path must be a storage path, i.e., only the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," is allowed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a resource named `Counter`.\n//\nresource Counter {\n    pub var count: Int\n\n    pub init(count: Int) {\n        self.count = count\n    }\n}\n\n// In this example an authorized account is available through the constant `authAccount`.\n\n// Create a new instance of the resource type `Counter`\n// and save it in the storage of the account.\n//\n// The path `/storage/counter` is used to refer to the stored value.\n// Its identifier `counter` was chosen freely and could be something else.\n//\nauthAccount.save(<-create Counter(count: 42), to: /storage/counter)\n\n// Run-time error: Storage already contains an object under path `/storage/counter`\n//\nauthAccount.save(<-create Counter(count: 123), to: /storage/counter)\n\n// Load the `Counter` resource from storage path `/storage/counter`.\n//\n// The new constant `counter` has the type `Counter?`, i.e., it is an optional,\n// and its value is the counter resource, that was saved at the beginning\n// of the example.\n//\nlet counter <- authAccount.load<@Counter>(from: /storage/counter)\n\n// The storage is now empty, there is no longer an object stored\n// under the path `/storage/counter`.\n\n// Load the `Counter` resource again from storage path `/storage/counter`.\n//\n// The new constant `counter2` has the type `Counter?` and is `nil`,\n// as nothing is stored under the path `/storage/counter` anymore,\n// because the previous load moved the counter out of storage.\n//\nlet counter2 <- authAccount.load<@Counter>(from: /storage/counter)\n\n// Create another new instance of the resource type `Counter`\n// and save it in the storage of the account.\n//\n// The path `/storage/otherCounter` is used to refer to the stored value.\n//\nauthAccount.save(<-create Counter(count: 123), to: /storage/otherCounter)\n\n// Load the `Vault` resource from storage path `/storage/otherCounter`.\n//\n// The new constant `vault` has the type `Vault?` and its value is `nil`,\n// as there is a resource with type `Counter` stored under the path,\n// which is not a subtype of the requested type `Vault`.\n//\nlet vault <- authAccount.load<@Vault>(from: /storage/otherCounter)\n\n// The storage still stores a `Counter` resource under the path `/storage/otherCounter`.\n\n// Save the string "Hello, World" in storage\n// under the path `/storage/helloWorldMessage`.\n\nauthAccount.save("Hello, world!", to: /storage/helloWorldMessage)\n\n// Copy the stored message from storage.\n//\n// After the copy, the storage still stores the string under the path.\n// Unlike `load`, `copy` does not remove the object from storage.\n//\nlet message = authAccount.copy<String>(from: /storage/helloWorldMessage)\n\n// Create a new instance of the resource type `Vault`\n// and save it in the storage of the account.\n//\nauthAccount.save(<-createEmptyVault(), to: /storage/vault)\n\n// Invalid: Cannot copy a resource, as this would allow arbitrary duplication.\n//\nlet vault <- authAccount.copy<@Vault>(from: /storage/vault)\n')),(0,o.kt)("p",null,"As it is convenient to work with objects in storage\nwithout having to move them out of storage,\nas it is necessary for resources,\nit is also possible to create references to objects in storage:\nThis is possible using the ",(0,o.kt)("inlineCode",{parentName:"p"},"borrow")," function of an ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun borrow<T: &Any>(from: StoragePath): T?\n")),(0,o.kt)("p",null,"Returns a reference to an object in storage without removing it from storage.\nIf no object is stored under the given path, the function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nIf there is an object stored, a reference is returned as an optional."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"T")," is the type parameter for the object type.\nA type argument for the parameter must be provided explicitly.\nThe type argument must be a reference to any type (",(0,o.kt)("inlineCode",{parentName:"p"},"&Any"),"; ",(0,o.kt)("inlineCode",{parentName:"p"},"Any")," is the supertype of all types).\nIt must be possible to create the given reference type ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," for the stored /  borrowed object.\nIf it is not, execution will abort with an error.\nThe given type does not necessarily need to be exactly the same as the type of the borrowed object."),(0,o.kt)("p",null,"The path must be a storage path, i.e., only the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," is allowed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a resource interface named `HasCount`, that has a field `count`\n//\nresource interface HasCount {\n    count: Int\n}\n\n// Declare a resource named `Counter` that conforms to `HasCount`\n//\nresource Counter: HasCount {\n    pub var count: Int\n\n    pub init(count: Int) {\n        self.count = count\n    }\n}\n\n// In this example an authorized account is available through the constant `authAccount`.\n\n// Create a new instance of the resource type `Counter`\n// and save it in the storage of the account.\n//\n// The path `/storage/counter` is used to refer to the stored value.\n// Its identifier `counter` was chosen freely and could be something else.\n//\nauthAccount.save(<-create Counter(count: 42), to: /storage/counter)\n\n// Create a reference to the object stored under path `/storage/counter`,\n// typed as `&Counter`.\n//\n// `counterRef` has type `&Counter?` and is a valid reference, i.e. non-`nil`,\n// because the borrow succeeded:\n//\n// There is an object stored under path `/storage/counter`\n// and it has type `Counter`, so it can be borrowed as `&Counter`\n//\nlet counterRef = authAccount.borrow<&Counter>(from: /storage/counter)\n\ncounterRef?.count // is `42`\n\n// Create a reference to the object stored under path `/storage/counter`,\n// typed as `&{HasCount}`.\n//\n// `hasCountRef` is non-`nil`, as there is an object stored under path `/storage/counter`,\n// and the stored value of type `Counter` conforms to the requested type `{HasCount}`:\n// the type `Counter` implements the restricted type's restriction `HasCount`\n\nlet hasCountRef = authAccount.borrow<&{HasCount}>(from: /storage/counter)\n\n// Create a reference to the object stored under path `/storage/counter`,\n// typed as `&{SomethingElse}`.\n//\n// `otherRef` is `nil`, as there is an object stored under path `/storage/counter`,\n// but the stored value of type `Counter` does not conform to the requested type `{Other}`:\n// the type `Counter` does not implement the restricted type's restriction `Other`\n\nlet otherRef = authAccount.borrow<&{Other}>(from: /storage/counter)\n\n// Create a reference to the object stored under path `/storage/nonExistent`,\n// typed as `&{HasCount}`.\n//\n// `nonExistentRef` is `nil`, as there is nothing stored under path `/storage/nonExistent`\n//\nlet nonExistentRef = authAccount.borrow<&{HasCount}>(from: /storage/nonExistent)\n")),(0,o.kt)("h2",{id:"storage-iteration"},"Storage Iteration"),(0,o.kt)("p",null,"It is possible to iterate over an account's storage using the following iteration functions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"fun forEachPublic(_ function: ((PublicPath, Type): Bool))\nfun forEachPrivate(_ function: ((PrivatePath, Type): Bool))\nfun forEachStored(_ function: ((StoragePath, Type): Bool))\n")),(0,o.kt)("p",null,"Each of these iterates over every element in the specified domain (public, private, and storage),\napplying the function argument to each.\nThe first argument of the function is the path of the element, and the second is its runtime type.\nIn the case of the ",(0,o.kt)("inlineCode",{parentName:"p"},"private")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," path iteration functions,\nthis is the runtime type of the capability linked at that path.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"Bool")," return value determines whether iteration continues;\n",(0,o.kt)("inlineCode",{parentName:"p"},"true")," will proceed to the next stored element,\nwhile ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," will terminate iteration.\nThe specific order in which the objects are iterated over is undefined,\nas is the behavior when a path is added or removed from storage."),(0,o.kt)(l,{type:"warning",mdxType:"Callout"},"The order of iteration is undefined. Do not rely on any particular behaviour.",(0,o.kt)("p",null,"Saving to or removing from storage during iteration can cause the order in which values are stored to change arbitrarily."),(0,o.kt)("p",null,"Continuing to iterate after such an operation will cause Cadence to panic and abort execution.\nIn order to avoid such errors, we recommend not modifying storage during iteration.\nIf you do, return ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," from the iteration callback to cause iteration to end after the mutation like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'account.save(1, to: /storage/foo1)\naccount.save(2, to: /storage/foo2)\naccount.save(3, to: /storage/foo3)\naccount.save("qux", to: /storage/foo4)\n\naccount.forEachStored(fun (path: StoragePath, type: Type): Bool {\n    if type == Type<String>() {\n        account.save("bar", to: /storage/foo5)\n        // returning false here ends iteration after storage is modified, preventing a panic\n        return false\n    }\n    return true\n})\n'))),(0,o.kt)(l,{type:"info",mdxType:"Callout"},"The iteration will skip any broken elements in the storage. An element could be broken due to invalid types associated with the stored value. e.g: A value belongs to type `T` of a contract with syntax/semantic errors."),(0,o.kt)("h2",{id:"storage-limit"},"Storage limit"),(0,o.kt)("p",null,"An account's storage is limited by its storage capacity."),(0,o.kt)("p",null,"An account's storage used is the sum of the size of all the data that is stored in an account (in MB).\nAn account's storage capacity is a value that is calculated from the amount of FLOW\nthat is stored in the account's main FLOW token vault."),(0,o.kt)("p",null,"At the end of every transaction, the storage used is compared to the storage capacity.\nFor all accounts involved in the transaction, if the account's storage used is greater than its storage capacity, the transaction will fail."),(0,o.kt)("p",null,"An account's storage used and storage capacity can be checked using the ",(0,o.kt)("inlineCode",{parentName:"p"},"storageUsed")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"storageCapacity")," fields.\nThe fields represent current values of storage which means this would be true:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"let storageUsedBefore = authAccount.storageUsed\nauthAccount.save(<-create Counter(count: 123), to: /storage/counter)\nlet storageUsedAfter = authAccount.storageUsed\n\nlet storageUsedChanged = storageUsedBefore != storageUsedAfter // is true\n")))}f.isMDXComponent=!0}}]);