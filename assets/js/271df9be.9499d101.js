"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4222],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>g});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),d=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=d(t.components);return n.createElement(s.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),m=d(a),c=r,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||l;return a?n.createElement(g,i(i({ref:e},p),{},{components:a})):n.createElement(g,i({ref:e},p))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[m]="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},30972:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={},i="JS Testing API Reference",o={unversionedId:"tools/flow-js-testing/api",id:"tools/flow-js-testing/api",title:"JS Testing API Reference",description:"\u26a0\ufe0f Required: Your project must follow the required structure and it must be initialized to use the following functions.",source:"@site/docs/tools/flow-js-testing/api.md",sourceDirName:"tools/flow-js-testing",slug:"/tools/flow-js-testing/api",permalink:"/tools/flow-js-testing/api",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618171,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Account Management",permalink:"/tools/flow-js-testing/accounts"},next:{title:"Contracts Management",permalink:"/tools/flow-js-testing/contracts"}},s={},d=[{value:"Accounts",id:"accounts",level:2},{value:"<code>getAccountAddress</code>",id:"getaccountaddress",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:4},{value:"<code>createAccount({name, keys})</code>",id:"createaccountname-keys",level:3},{value:"Options",id:"options",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Contracts",id:"contracts",level:2},{value:"<code>deployContractByName(props)</code>",id:"deploycontractbynameprops",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Usage",id:"usage-1",level:4},{value:"<code>deployContract(props)</code>",id:"deploycontractprops",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Usage",id:"usage-2",level:4},{value:"<code>getContractAddress(name)</code>",id:"getcontractaddressname",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Usage",id:"usage-3",level:4},{value:"Cryptography",id:"cryptography",level:2},{value:"<code>pubFlowKey(keyObject)</code>",id:"pubflowkeykeyobject",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Usage",id:"usage-4",level:4},{value:"<code>signUserMessage(msgHex, signer, domainTag)</code>",id:"signusermessagemsghex-signer-domaintag",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Usage",id:"usage-5",level:4},{value:"<code>verifyUserSigntatures(msgHex, signatures, domainTag)</code>",id:"verifyusersigntaturesmsghex-signatures-domaintag",level:2},{value:"Arguments",id:"arguments-5",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Usage",id:"usage-6",level:4},{value:"Emulator",id:"emulator",level:2},{value:"<code>emulator.start(options)</code>",id:"emulatorstartoptions",level:3},{value:"Arguments",id:"arguments-6",level:4},{value:"EmulatorOptions",id:"emulatoroptions",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Usage",id:"usage-7",level:4},{value:"<code>emulator.stop()</code>",id:"emulatorstop",level:3},{value:"Arguments",id:"arguments-7",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Usage",id:"usage-8",level:4},{value:"<code>emulator.setLogging(newState)</code>",id:"emulatorsetloggingnewstate",level:3},{value:"Arguments",id:"arguments-8",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Usage",id:"usage-9",level:4},{value:"FLOW Management",id:"flow-management",level:2},{value:"<code>getFlowBalance(address)</code>",id:"getflowbalanceaddress",level:3},{value:"Arguments",id:"arguments-9",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Usage",id:"usage-10",level:4},{value:"<code>mintFlow(recipient, amount)</code>",id:"mintflowrecipient-amount",level:3},{value:"Arguments",id:"arguments-10",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Usage",id:"usage-11",level:4},{value:"Init",id:"init",level:2},{value:"init( basePath, options)",id:"init-basepath-options",level:3},{value:"Arguments",id:"arguments-11",level:4},{value:"Options",id:"options-1",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Usage",id:"usage-12",level:4},{value:"Environment",id:"environment",level:2},{value:"<code>getBlockOffset()</code>",id:"getblockoffset",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Usage",id:"usage-13",level:4},{value:"<code>setBlockOffset(offset)</code>",id:"setblockoffsetoffset",level:3},{value:"Arguments",id:"arguments-12",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Usage",id:"usage-14",level:4},{value:"<code>getTimestampOffset()</code>",id:"gettimestampoffset",level:3},{value:"Returns",id:"returns-16",level:4},{value:"Usage",id:"usage-15",level:4},{value:"<code>setTimestampOffset(offset)</code>",id:"settimestampoffsetoffset",level:3},{value:"Arguments",id:"arguments-13",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Usage",id:"usage-16",level:4},{value:"Jest Helpers",id:"jest-helpers",level:2},{value:"<code>shallPass(ix)</code>",id:"shallpassix",level:3},{value:"Arguments",id:"arguments-14",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Usage",id:"usage-17",level:4},{value:"shallRevert(ix, message)",id:"shallrevertix-message",level:3},{value:"Arguments",id:"arguments-15",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Usage",id:"usage-18",level:4},{value:"shallResolve(ix)",id:"shallresolveix",level:3},{value:"Arguments",id:"arguments-16",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Usage",id:"usage-19",level:4},{value:"Scripts",id:"scripts",level:2},{value:"<code>executeScript(props)</code>",id:"executescriptprops",level:3},{value:"Arguments",id:"arguments-17",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Usage",id:"usage-20",level:4},{value:"<code>executeScript(name: string, args: [any])</code>",id:"executescriptname-string-args-any",level:3},{value:"Arguments",id:"arguments-18",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Usage",id:"usage-21",level:4},{value:"Transactions",id:"transactions",level:2},{value:"<code>sendTransaction(props)</code>",id:"sendtransactionprops",level:3},{value:"Arguments",id:"arguments-19",level:4},{value:"Usage",id:"usage-22",level:4},{value:"<code>sendTransaction(name, signers, args)</code>",id:"sendtransactionname-signers-args",level:3},{value:"Usage",id:"usage-23",level:4},{value:"Templates",id:"templates",level:2},{value:"<code>getTemplate(file, addressMap, byAddress)</code>",id:"gettemplatefile-addressmap-byaddress",level:3},{value:"Returns",id:"returns-23",level:4},{value:"Usage",id:"usage-24",level:4},{value:"<code>getContractCode(name, addressMap)</code>",id:"getcontractcodename-addressmap",level:3},{value:"Arguments",id:"arguments-20",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Usage",id:"usage-25",level:4},{value:"<code>getTransactionCode(name, addressMap)</code>",id:"gettransactioncodename-addressmap",level:3},{value:"Arguments",id:"arguments-21",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Usage",id:"usage-26",level:4},{value:"<code>getScriptCode(name, addressMap)</code>",id:"getscriptcodename-addressmap",level:3},{value:"Arguments",id:"arguments-22",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Usage",id:"usage-27",level:4},{value:"Types",id:"types",level:2},{value:"<code>AddressMap</code>",id:"addressmap",level:3},{value:"Example",id:"example",level:4},{value:"<code>Interaction</code>",id:"interaction",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>CadenceTransformer</code>",id:"cadencetransformer",level:3},{value:"Example",id:"example-2",level:4},{value:"KeyObject",id:"keyobject",level:3},{value:"PublicKey",id:"publickey",level:3},{value:"SignatureObject",id:"signatureobject",level:3},{value:"SignerInfoObject",id:"signerinfoobject",level:3},{value:"HashAlgorithm",id:"hashalgorithm",level:3},{value:"SignatureAlgorithm",id:"signaturealgorithm",level:3},{value:"Utilities",id:"utilities",level:2},{value:"<code>isAddress(address)</code>",id:"isaddressaddress",level:3},{value:"Arguments",id:"arguments-23",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Usage",id:"usage-28",level:4}],p={toc:d},m="wrapper";function u(t){let{components:e,...a}=t;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"js-testing-api-reference"},"JS Testing API Reference"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Required:")," Your project must follow the ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/structure"},"required structure")," and it must be ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/api#init"},"initialized")," to use the following functions.")),(0,r.kt)("h2",{id:"accounts"},"Accounts"),(0,r.kt)("h3",{id:"getaccountaddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"getAccountAddress")),(0,r.kt)("p",null,"Resolves name alias to a Flow address (",(0,r.kt)("inlineCode",{parentName:"p"},"0x")," prefixed) under the following conditions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If an account with a specific name has not been previously accessed, the framework will create a new one and then store it under the provided alias."),(0,r.kt)("li",{parentName:"ul"},"Next time when you call this method, it will grab exactly the same account. This allows you to create several accounts up-front and then use them throughout your code, without worrying that accounts match or trying to store and manage specific addresses.")),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alias")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The alias to reference or create.")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x")," prefixed address of aliased account")))),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {getAccountAddress} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const Alice = await getAccountAddress("Alice")\n  console.log({Alice})\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"createaccountname-keys"},(0,r.kt)("inlineCode",{parentName:"h3"},"createAccount({name, keys})")),(0,r.kt)("p",null,"In some cases, you may wish to manually create an account with a particular set of private keys"),(0,r.kt)("h4",{id:"options"},"Options"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Pass in the following as a single object with the following keys.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"human-readable name to be associated with created account (will be used for address lookup within ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#getaccountaddress"},"getAccountAddress"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keys")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#keyobject"},"KeyObject")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#publickey"},"PublicKey"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"An array of ",(0,r.kt)("a",{parentName:"td",href:"#./api.md#keyobject"},"KeyObjects")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#publickey"},"PublicKeys")," to be added to the account upon creation (defaults to the ",(0,r.kt)("a",{parentName:"td",href:"./accounts#universal-private-key"},"universal private key"),")")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udce3 if ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field not provided, the account address will not be cached and you will be unable to look it up using ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/api#getaccountaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"getAccountAddress")),".")),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x")," prefixed address of created account")))),(0,r.kt)("h2",{id:"contracts"},"Contracts"),(0,r.kt)("h3",{id:"deploycontractbynameprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"deployContractByName(props)")),(0,r.kt)("p",null,"Deploys contract code located inside a Cadence file. Returns the transaction result."),(0,r.kt)("h4",{id:"arguments-1"},"Arguments"),(0,r.kt)("p",null,"Props object accepts the following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"name of the file in ",(0,r.kt)("inlineCode",{parentName:"td"},"contracts")," folder (with ",(0,r.kt)("inlineCode",{parentName:"td"},".cdc")," extension) and name of the contract (please note those should be the same)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"to")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"(optional) account address, where contract will be deployed. If this is not specified, framework will create new account with randomized alias.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#addressmap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"(optional) object to use for address mapping of existing deployed contracts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"[Any]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"(optional) arguments, which will be passed to contract initializer. (optional) if template does not expect any arguments.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"update")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"(optional) whether to update deployed contract. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transformers")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#cadencetransformer"},"CadenceTransformer"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"(optional) an array of operators to modify the code, before submitting it to network")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#responseobject"},"ResponseObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the deploying transaction.")))),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path";\nimport { init, emulator, deployContractByName } from "@onflow/flow-js-testing";\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence");\n\n  await init(basePath);\n  await emulator.start();\n\n  // We will deploy our contract to the address that corresponds to "Alice" alias\n  const to = await getAccountAddress("Alice");\n\n  // We assume there is a file on "../cadence/contracts/Wallet.cdc" path\n  const name = "Wallet";\n\n  // Arguments will be processed and type matched in the same order as they are specified\n  // inside of a contract template\n  const args = [1337, "Hello", { name: "Alice" }];\n\n  const [deploymentResult, err] = await deployContractByName({ to, name });\n  console.log({ deploymentResult }, { err });\n  }\n\n  await emulator.stop();\n};\n\nmain();\n')),(0,r.kt)("p",null,"In a bit more rare case you would want to deploy contract code not from existing template file, but rather\nfrom string representation of it. ",(0,r.kt)("inlineCode",{parentName:"p"},"deployContract")," method will help you achieve this."),(0,r.kt)("h3",{id:"deploycontractprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"deployContract(props)")),(0,r.kt)("p",null,"Deploys contract code specified as string. Returns the transaction result."),(0,r.kt)("h4",{id:"arguments-2"},"Arguments"),(0,r.kt)("p",null,"Props object accepts the following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"contractCode")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string representation of contract")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"name of the contract to be deployed. Should be the same as the name of the contract provided in ",(0,r.kt)("inlineCode",{parentName:"td"},"contractCode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"to")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"account address, where contract will be deployed. If this is not specified, framework will create new account with randomized alias.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#addressmap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"object to use for import resolver. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"[Any]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"arguments, which will be passed to contract initializer. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"update")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"whether to update deployed contract. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transformers")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#cadencetransformer"},"CadenceTransformer"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of operators to modify the code, before submitting it to network")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#responseobject"},"ResponseObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the deploying transaction.")))),(0,r.kt)("h4",{id:"usage-2"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  getAccountAddress,\n  deployContract,\n  executeScript,\n} from "@onflow/flow-js-testing"\n;(async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  // We can specify, which account will hold the contract\n  const to = await getAccountAddress("Alice")\n\n  const name = "Wallet"\n  const code = `\n        pub contract Wallet{\n            pub let balance: UInt\n            init(balance: UInt){\n              self.balance = balance\n            }\n        }\n    `\n  const args = [1337]\n\n  await deployContract({to, name, code, args})\n\n  const [balance, err] = await executeScript({\n    code: `\n      import Wallet from 0x01\n      pub fun main(): UInt{\n        return Wallet.balance\n      }\n    `,\n  })\n  console.log({balance}, {err})\n\n  await emulator.stop()\n})()\n')),(0,r.kt)("p",null,"While framework have automatic import resolver for Contracts you might want to know where it's currently deployed.\nWe provide a method ",(0,r.kt)("inlineCode",{parentName:"p"},"getContractAddress")," for this."),(0,r.kt)("h3",{id:"getcontractaddressname"},(0,r.kt)("inlineCode",{parentName:"h3"},"getContractAddress(name)")),(0,r.kt)("p",null,"Returns address of the account where the contract is currently deployed."),(0,r.kt)("h4",{id:"arguments-3"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"name of the contract")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x")," prefixed address")))),(0,r.kt)("h4",{id:"usage-3"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, deployContractByName, getContractAddress} from "../src"\n;(async () => {\n  const basePath = path.resolve(__dirname, "./cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  // if we omit "to" it will be deployed to Service Account\n  // but let\'s pretend we don\'t know where it will be deployed :)\n  await deployContractByName({name: "Hello"})\n\n  const contractAddress = await getContractAddress("Hello")\n  console.log({contractAddress})\n\n  await emulator.stop()\n})()\n')),(0,r.kt)("p",null,"\ud83d\udce3 Framework does not support contracts with identical names deployed to different accounts. While you can deploy contract\nto a new address, the internal system, which tracks where contracts are deployed, will only store last address."),(0,r.kt)("h2",{id:"cryptography"},"Cryptography"),(0,r.kt)("h3",{id:"pubflowkeykeyobject"},(0,r.kt)("inlineCode",{parentName:"h3"},"pubFlowKey(keyObject)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"pubFlowKey")," method exported by Flow JS Testing Library will generate an RLP-encoded public key given a private key, hashing algorithm, signing algorithm, and key weight."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keyObject")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#keyobject"},"KeyObject")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an object containing a private key & the key's hashing/signing information")))),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"keyObject")," is not provided, Flow JS Testing will default to the ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/accounts#universal-private-key"},"universal private key"),"."),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Buffer"),(0,r.kt)("td",{parentName:"tr",align:null},"RLP-encoded public key")))),(0,r.kt)("h4",{id:"usage-4"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {pubFlowKey}\n\nconst key = {\n  privateKey: "a1b2c3" // private key as hex string\n  hashAlgorithm: HashAlgorithm.SHA3_256\n  signatureAlgorithm: SignatureAlgorithm.ECDSA_P256\n  weight: 1000\n}\n\nconst pubKey = await pubFlowKey(key) // public key generated from keyObject provided\nconst genericPubKey = await pubFlowKey() // public key generated from universal private key/service key\n')),(0,r.kt)("h3",{id:"signusermessagemsghex-signer-domaintag"},(0,r.kt)("inlineCode",{parentName:"h3"},"signUserMessage(msgHex, signer, domainTag)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"signUserMessage")," method will produce a user signature of some arbitrary data using a particular signer."),(0,r.kt)("h4",{id:"arguments-4"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"msgHex")),(0,r.kt)("td",{parentName:"tr",align:null},"string or Buffer"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"a hex-encoded string or Buffer which will be used to generate the signature")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signerinfoobject"},"SignerInfo")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signerinfoobject"},"SignerInfo")," object representing user to generate this signature for (default: ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/accounts#universal-private-key"},"universal private key"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"domainTag")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Domain separation tag provided as a utf-8 encoded string (default: no domain separation tag). See more about ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/cadence/language/crypto/#hashing-with-a-domain-tag"},"domain tags here"),".")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signatureobject"},"SignatureObject")),(0,r.kt)("td",{parentName:"tr",align:null},"An object representing the signature for the message & account/keyId which signed for this message")))),(0,r.kt)("h4",{id:"usage-5"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {signUserMessage, getAccountAddress} from "@onflow/flow-js-testing"\n\nconst Alice = await getAccountAddress("Alice")\nconst msgHex = "a1b2c3"\n\nconst signature = await generateUserSignature(msgHex, Alice)\n')),(0,r.kt)("h2",{id:"verifyusersigntaturesmsghex-signatures-domaintag"},(0,r.kt)("inlineCode",{parentName:"h2"},"verifyUserSigntatures(msgHex, signatures, domainTag)")),(0,r.kt)("p",null,"Used to verify signatures generated by ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/api#signusermessagemessage-signer"},(0,r.kt)("inlineCode",{parentName:"a"},"signUserMessage")),". This function takes an array of signatures and verifies that the total key weight sums to >= 1000 and that these signatures are valid."),(0,r.kt)("h4",{id:"arguments-5"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"msgHex")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"the message which the provided signatures correspond to provided as a hex-encoded string or Buffer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signatures")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signatureobject"},"SignatureObject"),"]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An array of ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signatureobject"},"SignatureObjects")," which will be verified against this message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"domainTag")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Domain separation tag provided as a utf-8 encoded string (default: no domain separation tag). See more about ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/cadence/language/crypto/#hashing-with-a-domain-tag"},"domain tags here"),".")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,"This method returns an object with the following keys:\n| Type | Description |\n| ---- | ----------- |\n| boolean | Returns true if signatures are valid and total weight >= 1000 |"),(0,r.kt)("h4",{id:"usage-6"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {\n  signUserMessage,\n  verifyUserSignatures,\n  getAccountAddress,\n} from "@onflow/flow-js-testing"\n\nconst Alice = await getAccountAddress("Alice")\nconst msgHex = "a1b2c3"\n\nconst signature = await generateUserSignature(msgHex, Alice)\n\nconsole.log(await verifyUserSignatures(msgHex, Alice)) // true\n\nconst Bob = await getAccountAddress("Bob")\nconsole.log(await verifyUserSignatures(msgHex, Bob)) // false\n')),(0,r.kt)("h2",{id:"emulator"},"Emulator"),(0,r.kt)("p",null,"Flow Javascript Testing Framework exposes ",(0,r.kt)("inlineCode",{parentName:"p"},"emulator")," singleton allowing you to run and stop emulator instance\nprogrammatically. There are two methods available on it."),(0,r.kt)("h3",{id:"emulatorstartoptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"emulator.start(options)")),(0,r.kt)("p",null,"Starts emulator on a specified port. Returns Promise."),(0,r.kt)("h4",{id:"arguments-6"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},"EmulatorOptions"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an object containing options for starting the emulator")))),(0,r.kt)("h4",{id:"emulatoroptions"},"EmulatorOptions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"logging")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"whether log messages from emulator shall be added to the output (default: false)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"flags")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"custom command-line flags to supply to the emulator (default: no flags)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"adminPort")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"override the port which the emulator will run the admin server on (default: auto)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"restPort")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"override the port which the emulator will run the REST server on (default: auto)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpcPort")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"override the port which the emulator will run the GRPC server on (default: auto)")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#Promise"},"Promise")),(0,r.kt)("td",{parentName:"tr",align:null},"Promise, which resolves to true if emulator started successfully")))),(0,r.kt)("h4",{id:"usage-7"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {emulator, init} from "../src"\n;(async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n\n  // Start emulator instance on port 8080\n  await emulator.start()\n  console.log("emulator is working")\n\n  // Stop running emulator\n  await emulator.stop()\n  console.log("emulator has been stopped")\n})()\n')),(0,r.kt)("h3",{id:"emulatorstop"},(0,r.kt)("inlineCode",{parentName:"h3"},"emulator.stop()")),(0,r.kt)("p",null,"Stops emulator instance. Returns Promise."),(0,r.kt)("h4",{id:"arguments-7"},"Arguments"),(0,r.kt)("p",null,"This method does not expect any arguments."),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#Promise"},"Promise")),(0,r.kt)("td",{parentName:"tr",align:null},"Promise, which resolves to true if emulator stopped without issues")))),(0,r.kt)("h4",{id:"usage-8"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {emulator, init} from "@onflow/flow-js-testing"\n\ndescribe("test setup", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "../cadence")\n\n    await init(basePath)\n    await emulator.start()\n  })\n\n  // Stop emulator, so it could be restarted\n  afterEach(async () => {\n    await emulator.stop()\n  })\n})\n')),(0,r.kt)("h3",{id:"emulatorsetloggingnewstate"},(0,r.kt)("inlineCode",{parentName:"h3"},"emulator.setLogging(newState)")),(0,r.kt)("p",null,"Set logging flag on emulator, allowing to temporally enable/disable logging."),(0,r.kt)("h4",{id:"arguments-8"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newState")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable/disable logging")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,"Method does not return anything."),(0,r.kt)("h4",{id:"usage-9"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {emulator, init} from "@onflow/flow-js-testing"\n\ndescribe("test setup", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "../cadence")\n\n    await init(basePath)\n    await emulator.start()\n  })\n\n  // Stop emulator, so it could be restarted\n  afterEach(async () => {\n    await emulator.stop()\n  })\n\n  test("basic test", async () => {\n    // Turn on logging from begining\n    emulator.setLogging(true)\n    // some asserts and interactions\n\n    // Turn off logging for later calls\n    emulator.setLogging(false)\n    // more asserts and interactions here\n  })\n})\n')),(0,r.kt)("h2",{id:"flow-management"},"FLOW Management"),(0,r.kt)("p",null,"Some actions on the network will require account to have certain amount of FLOW token - transaction and storage fees,\naccount creation, etc."),(0,r.kt)("p",null,"Framework provides a method to query balance with ",(0,r.kt)("inlineCode",{parentName:"p"},"getFlowBalance")," and mint new tokens via ",(0,r.kt)("inlineCode",{parentName:"p"},"mintFlow"),". You can find\ninformation how to use them below."),(0,r.kt)("h3",{id:"getflowbalanceaddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"getFlowBalance(address)")),(0,r.kt)("p",null,"Fetch current FlowToken balance of account specified by address"),(0,r.kt)("h4",{id:"arguments-9"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"address of the account to check")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64 amount of FLOW tokens stored in account storage represented as string")))),(0,r.kt)("h4",{id:"usage-10"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {\n  init,\n  emulator,\n  getAccountAddress,\n  getFlowBalance,\n} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  const Alice = await getAccountAddress("Alice")\n\n  const [result, error] = await getFlowBalance(Alice)\n  console.log({result}, {error})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"mintflowrecipient-amount"},(0,r.kt)("inlineCode",{parentName:"h3"},"mintFlow(recipient, amount)")),(0,r.kt)("p",null,"Sends transaction to mint specified amount of FLOW token and send it to recipient."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Required:")," Framework shall be initialized with ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," method for this method to work.")),(0,r.kt)("h4",{id:"arguments-10"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"recipient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"address of the account to check")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64 amount of FLOW tokens to mint and send to recipient")))),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#responseobject"},"ResponseObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Transaction result")))),(0,r.kt)("h4",{id:"usage-11"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  getAccountAddress,\n  getFlowBalance,\n  mintFlow,\n} from "../src"\n;(async () => {\n  const basePath = path.resolve(__dirname, "./cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  // Get address for account with alias "Alice"\n  const Alice = await getAccountAddress("Alice")\n\n  // Get initial balance\n  const [initialBalance] = await getFlowBalance(Alice)\n  console.log(initialBalance)\n\n  // Add 1.0 FLOW tokens to Alice account\n  await mintFlow(Alice, "1.0")\n\n  // Check updated balance\n  const updatedBalance = await getFlowBalance(Alice)\n  console.log({updatedBalance})\n\n  await emulator.stop()\n})()\n')),(0,r.kt)("h2",{id:"init"},"Init"),(0,r.kt)("p",null,"For Framework to operate properly you need to initialize it first.\nYou can do it with provided ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," method."),(0,r.kt)("h3",{id:"init-basepath-options"},"init( basePath, options)"),(0,r.kt)("p",null,"Initializes framework variables."),(0,r.kt)("h4",{id:"arguments-11"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bastPath")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"path to the folder holding all Cadence template files")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"options object to use during initialization")))),(0,r.kt)("h4",{id:"options-1"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pkey")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"private key for service account")))),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#Promise"},"Promise")),(0,r.kt)("td",{parentName:"tr",align:null},"Promise, which resolves to true if framework was initialized properly")))),(0,r.kt)("h4",{id:"usage-12"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init} from "@onflow/flow-js-testing"\n\ndescribe("test setup", () => {\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "../cadence")\n    await init(basePath)\n\n    // alternatively you can pass specific port\n    // await init(basePath, {port: 8085})\n  })\n})\n')),(0,r.kt)("h2",{id:"environment"},"Environment"),(0,r.kt)("h3",{id:"getblockoffset"},(0,r.kt)("inlineCode",{parentName:"h3"},"getBlockOffset()")),(0,r.kt)("p",null,"Returns current block offset - amount of blocks added on top of real current block height."),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"number representing amount of blocks added on top of real current block (encoded as string)")))),(0,r.kt)("h4",{id:"usage-13"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, getBlockOffset} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  init(basePath)\n  await emulator.start()\n\n  const [blockOffset, err] = await getBlockOffset()\n  console.log({blockOffset}, {err})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"setblockoffsetoffset"},(0,r.kt)("inlineCode",{parentName:"h3"},"setBlockOffset(offset)")),(0,r.kt)("p",null,"Returns current block offset - amount of blocks added on top of real current block height."),(0,r.kt)("h4",{id:"arguments-12"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description")))),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"number representing amount of blocks added on top of real current block height")))),(0,r.kt)("h4",{id:"usage-14"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  executeScript,\n  getBlockOffset,\n  setBlockOffset,\n  sendTransaction,\n} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  init(basePath)\n  await emulator.start()\n\n  // Offset current block height by 42\n  await setBlockOffset(42)\n\n  const [blockOffset, err] = await getBlockOffset()\n  console.log({blockOffset}, {err})\n\n  // "getCurrentBlock().height" in your Cadence code will be replaced by Manager to a mocked value\n  const code = `\n    pub fun main(): UInt64 {\n      return getCurrentBlock().height\n    }\n  `\n\n  const [result, error] = await executeScript({code})\n  console.log({result}, {error})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"gettimestampoffset"},(0,r.kt)("inlineCode",{parentName:"h3"},"getTimestampOffset()")),(0,r.kt)("p",null,"Returns current timestamp offset - amount of seconds added on top of real current timestamp."),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"number representing amount of seconds added on top of real current timestamp")))),(0,r.kt)("h4",{id:"usage-15"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, getTimestampOffset} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  init(basePath)\n  await emulator.start()\n\n  const [timestampOffset, err] = await getTimestampOffset()\n  console.log({timestampOffset}, {err})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"settimestampoffsetoffset"},(0,r.kt)("inlineCode",{parentName:"h3"},"setTimestampOffset(offset)")),(0,r.kt)("p",null,"Returns current timestamp offset - amount of seconds added on top of real current timestamp."),(0,r.kt)("h4",{id:"arguments-13"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description")))),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"number representing amount of seconds added on top of real current timestamp")))),(0,r.kt)("h4",{id:"usage-16"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  executeScript,\n  getTimestampOffset,\n  setTimestampOffset,\n  sendTransaction,\n} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  init(basePath)\n  await emulator.start()\n\n  // Offset current timestamp by 10s\n  await setTimestampOffset(10)\n\n  const [timestampOffset, err] = await getTimestampOffset()\n  console.log({timestampOffset}, {err})\n\n  // "getCurrentBlock().timestamp" in your Cadence code will be replaced by Manager to a mocked value\n  const code = `\n    pub fun main(): UInt64 {\n      return getCurrentBlock().timestamp\n    }\n  `\n\n  const [result, error] = await executeScript({code})\n  console.log({result}, {error})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h2",{id:"jest-helpers"},"Jest Helpers"),(0,r.kt)("p",null,"In order to simplify the process even further we've created several Jest-based methods, which will help you to catch\nthrown errors and ensure your code works as intended."),(0,r.kt)("h3",{id:"shallpassix"},(0,r.kt)("inlineCode",{parentName:"h3"},"shallPass(ix)")),(0,r.kt)("p",null,"Ensure transaction does not throw and sealed."),(0,r.kt)("h4",{id:"arguments-14"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ix")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#interaction"},"Interaction")),(0,r.kt)("td",{parentName:"tr",align:null},"interaction, either in form of a Promise or function")))),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#responseobject"},"ResponseObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Transaction result")))),(0,r.kt)("h4",{id:"usage-17"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  shallPass,\n  sendTransaction,\n  getAccountAddress,\n} from "js-testing-framework"\n\n// We need to set timeout for a higher number, cause some interactions might need more time\njest.setTimeout(10000)\n\ndescribe("interactions - sendTransaction", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "./cadence")\n    await init(basePath)\n    return emulator.start()\n  })\n\n  // Stop emulator, so it could be restarted\n  afterEach(async () => {\n    return emulator.stop()\n  })\n\n  test("basic transaction", async () => {\n    const code = `\n      transaction(message: String){\n        prepare(singer: AuthAccount){\n          log(message)\n        }\n      }\n    `\n    const Alice = await getAccountAddress("Alice")\n    const signers = [Alice]\n    const args = ["Hello, Cadence"]\n\n    const [txResult, error] = await shallPass(\n      sendTransaction({\n        code,\n        signers,\n        args,\n      })\n    )\n\n    // Transaction result will hold status, events and error message\n    console.log({txResult}, {error})\n  })\n})\n')),(0,r.kt)("h3",{id:"shallrevertix-message"},"shallRevert(ix, message)"),(0,r.kt)("p",null,"Ensure interaction throws an error. Can test for specific error messages or catch any error message if ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," is not provided.\nReturns Promise, which contains result, when resolved."),(0,r.kt)("h4",{id:"arguments-15"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ix")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#interaction"},"Interaction")),(0,r.kt)("td",{parentName:"tr",align:null},"transaction, either in form of a Promise or function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")," ",(0,r.kt)("strong",{parentName:"td"},"(optional)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"RegExp")),(0,r.kt)("td",{parentName:"tr",align:null},"expected error message provided as either a string equality or regular expression to match, matches any error by default")))),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#responseobject"},"ResponseObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Transaction result")))),(0,r.kt)("h4",{id:"usage-18"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  shallPass,\n  sendTransaction,\n  getAccountAddress,\n} from "js-testing-framework"\n\n// We need to set timeout for a higher number, cause some interactions might need more time\njest.setTimeout(10000)\n\ndescribe("interactions - sendTransaction", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "./cadence")\n    await init(basePath)\n    return emulator.start()\n  })\n\n  // Stop emulator, so it could be restarted\n  afterEach(async () => {\n    return emulator.stop()\n  })\n\n  test("basic transaction", async () => {\n    const code = `\n      transaction(message: String){\n        prepare(singer: AuthAccount){\n          panic("You shall not pass!")\n        }\n      }\n    `\n    const Alice = await getAccountAddress("Alice")\n    const signers = [Alice]\n    const args = ["Hello, Cadence"]\n\n    // Catch any cadence error\n    let [txResult, error] = await shallRevert(\n      sendTransaction({\n        code,\n        signers,\n        args,\n      })\n    )\n\n    // Catch only specific panic message\n    let [txResult, error] = await shallRevert(\n      sendTransaction({\n        code,\n        signers,\n        args,\n      }),\n      "You shall not pass!"\n    )\n\n    // Transaction result will hold status, events and error message\n    console.log({txResult}, {error})\n  })\n})\n')),(0,r.kt)("h3",{id:"shallresolveix"},"shallResolve(ix)"),(0,r.kt)("p",null,"Ensure interaction resolves without throwing errors."),(0,r.kt)("h4",{id:"arguments-16"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ix")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#interaction"},"Interaction")),(0,r.kt)("td",{parentName:"tr",align:null},"interaction, either in form of a Promise or function")))),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#InteractionResult"},"InteractionResult")),(0,r.kt)("td",{parentName:"tr",align:null},"Interaction result")))),(0,r.kt)("h4",{id:"usage-19"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, shallPass, executeScript} from "js-testing-framework"\n\n// We need to set timeout for a higher number, cause some interactions might need more time\njest.setTimeout(10000)\n\ndescribe("interactions - sendTransaction", () => {\n  // Instantiate emulator and path to Cadence files\n  beforeEach(async () => {\n    const basePath = path.resolve(__dirname, "./cadence")\n    await init(basePath)\n    return emulator.start()\n  })\n\n  // Stop emulator, so it could be restarted\n  afterEach(async () => {\n    return emulator.stop()\n  })\n\n  test("basic script", async () => {\n    const code = `\n      pub fun main():Int{\n        return 42\n      }\n    `\n\n    const [result, error] = await shallResolve(\n      executeScript({\n        code,\n      })\n    )\n\n    expect(result).toBe(42)\n    expect(error).toBe(null)\n  })\n})\n')),(0,r.kt)("h2",{id:"scripts"},"Scripts"),(0,r.kt)("p",null,"It is often the case that you need to query current state of the network. For example, to check balance of the\naccount, read public value of the contract or ensure that user has specific resource in their storage."),(0,r.kt)("p",null,"We abstract this interaction into single method called ",(0,r.kt)("inlineCode",{parentName:"p"},"executeScript"),". Method have 2 different signatures."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Required:")," Your project must follow the ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/structure"},"required structure")," it must be ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/init"},"initialized")," to use the following functions.")),(0,r.kt)("h3",{id:"executescriptprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"executeScript(props)")),(0,r.kt)("p",null,"Provides explicit control over how you pass values."),(0,r.kt)("h4",{id:"arguments-17"},"Arguments"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"props")," object accepts following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"string representation of Cadence script")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"name of the file in ",(0,r.kt)("inlineCode",{parentName:"td"},"scripts")," folder to use (sans ",(0,r.kt)("inlineCode",{parentName:"td"},".cdc")," extension)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"[any]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of arguments to pass to script. Optional if script does not expect any arguments.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transformers")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#cadencetransformer"},"CadenceTransformer"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of operators to modify the code, before submitting it to network")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Required:")," Either ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field shall be specified. Method will throw an error if both of them are empty.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field provided, framework will source code from file and override value passed via ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," field.")),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#responseobject"},"ResponseObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Script result")))),(0,r.kt)("h4",{id:"usage-20"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, executeScript} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  // Init framework\n  init(basePath)\n  // Start emulator\n  await emulator.start()\n\n  // Define code and arguments we want to pass\n  const code = `\n    pub fun main(message: String): Int{\n      log(message)\n\n      return 42\n    }\n  `\n  const args = ["Hello, from Cadence"]\n\n  const [result, error, logs] = await executeScript({code, args})\n  console.log({result}, {error}, {logs})\n\n  // Stop emulator instance\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"executescriptname-string-args-any"},(0,r.kt)("inlineCode",{parentName:"h3"},"executeScript(name: string, args: [any])")),(0,r.kt)("p",null,"This signature provides simplified way of executing a script, since most of the time you will utilize existing\nCadence files."),(0,r.kt)("h4",{id:"arguments-18"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"name of the file in ",(0,r.kt)("inlineCode",{parentName:"td"},"scripts")," folder to use (sans ",(0,r.kt)("inlineCode",{parentName:"td"},".cdc")," extension)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"[any]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of arguments to pass to script. Optional if scripts don't expect any arguments. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"[]"))))),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#responseobject"},"ResponseObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Script result")))),(0,r.kt)("h4",{id:"usage-21"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, executeScript} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  // Init framework\n  init(basePath)\n  // Start emulator\n  await emulator.start()\n\n  // Define arguments we want to pass\n  const args = ["Hello, from Cadence"]\n\n  // We assume there is a file `scripts/log-message.cdc` under base path\n  const [result, error, logs] = await executeScript("log-message", args)\n  console.log({result}, {error}, {logs})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h2",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"Another common case is interactions that mutate network state - sending tokens from one account to another, minting new NFT, etc. Framework provides ",(0,r.kt)("inlineCode",{parentName:"p"},"sendTransaction")," method to achieve this. This method have 2 different signatures."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Required:")," Your project must follow the ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/structure"},"required structure")," it must be ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/init"},"initialized")," to use the following functions.")),(0,r.kt)("h3",{id:"sendtransactionprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"sendTransaction(props)")),(0,r.kt)("p",null,"Send transaction to network.\nProvides explicit control over how you pass values."),(0,r.kt)("h4",{id:"arguments-19"},"Arguments"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"props")," object accepts following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"string representation of Cadence transaction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"name of the file in ",(0,r.kt)("inlineCode",{parentName:"td"},"transaction")," folder to use (sans ",(0,r.kt)("inlineCode",{parentName:"td"},".cdc")," extension)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"[any]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of arguments to pass to transaction. Optional if transaction does not expect any arguments.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signers")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signerinfoobject"},"SignerInfo"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signerinfoobject"},"SignerInfo")," objects representing transaction autorizers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#addressmap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"name/address map to use as lookup table for addresses in import statements")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transformers")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"./#cadencetransformer"},"CadenceTransformer"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of operators to modify the code, before submitting it to network")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Required:")," Either ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field shall be specified. Method will throw an error if both of them are empty.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field provided, framework will source code from file and override value passed via ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," field.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udce3 if ",(0,r.kt)("inlineCode",{parentName:"p"},"signers")," field not provided, service account will be used to authorize the transaction.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udce3 Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"addressMap")," only in cases, when you would want to override deployed contract. Otherwide\nimports can be resolved automatically without explicitly passing them via ",(0,r.kt)("inlineCode",{parentName:"p"},"addressMap")," field")),(0,r.kt)("h4",{id:"usage-22"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  sendTransaction,\n  getAccountAddress,\n} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  // Init framework\n  await init(basePath)\n  // Start emulator\n  await emulator.start()\n\n  // Define code and arguments we want to pass\n  const code = `\n    transaction(message: String){\n      prepare(signer: AuthAccount){\n        log(message)\n      }\n    }\n  `\n  const args = ["Hello, from Cadence"]\n  const Alice = await getAccountAddress("Alice")\n  const signers = [Alice]\n\n  const [result, error, logs] = await sendTransaction({code, args, signers})\n  console.log({result}, {error}, {logs})\n\n  // Stop emulator instance\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"sendtransactionname-signers-args"},(0,r.kt)("inlineCode",{parentName:"h3"},"sendTransaction(name, signers, args)")),(0,r.kt)("p",null,"This signature provides simplified way to send a transaction, since most of the time you will utilize existing\nCadence files."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"name of the file in ",(0,r.kt)("inlineCode",{parentName:"td"},"transaction")," folder to use (sans ",(0,r.kt)("inlineCode",{parentName:"td"},".cdc")," extension)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"[any]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of arguments to pass to transaction. Optional if transaction does not expect any arguments.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signers")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signerinfoobject"},"SignerInfoObject"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")," or array of ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signerinfoobject"},"SignerInfoObject")," representing transaction autorizers")))),(0,r.kt)("h4",{id:"usage-23"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {\n  init,\n  emulator,\n  sendTransaction,\n  shallPass,\n} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  // Init framework\n  await init(basePath)\n  // Start emulator\n  await emulator.start()\n\n  // Define arguments we want to pass\n  const args = ["Hello, Cadence"]\n\n  const [result, error, logs] = await shallPass(\n    sendTransaction("log-message", [], args)\n  )\n  console.log({result}, {error}, {logs})\n\n  // Stop the emulator instance\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h2",{id:"templates"},"Templates"),(0,r.kt)("p",null,"The philosophy behind Flow JS Testing Framework is to be a set of helper methods. They can be used in\nopinionated way, envisioned by Flow Team. Or they can work as building blocks, allowing developers to build their own\ntesting solution as they see fit."),(0,r.kt)("p",null,"Following methods used inside other framework methods, but we feel encouraged to list them here as well."),(0,r.kt)("h3",{id:"gettemplatefile-addressmap-byaddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"getTemplate(file, addressMap, byAddress)")),(0,r.kt)("p",null,"Returns Cadence template as string with addresses replaced using addressMap"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"relative (to the place from where the script was called) or absolute path to the file containing the code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#addressmap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"object to use for address mapping of existing deployed contracts. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"byAddress")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"whether addressMap is ",(0,r.kt)("inlineCode",{parentName:"td"},"{name:address}")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"{address:address}")," type. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"false"))))),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"content of a specified file")))),(0,r.kt)("h4",{id:"usage-24"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, getTemplate} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n  await init(basePath)\n\n  const template = await getTemplate("../cadence/scripts/get-name.cdc")\n  console.log({template})\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"getcontractcodename-addressmap"},(0,r.kt)("inlineCode",{parentName:"h3"},"getContractCode(name, addressMap)")),(0,r.kt)("p",null,"Returns Cadence template from file with ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"_basepath_/contracts")," folder"),(0,r.kt)("h4",{id:"arguments-20"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"name of the contract template")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#addressmap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"object to use for address mapping of existing deployed contracts")))),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code for specified contract")))),(0,r.kt)("h4",{id:"usage-25"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, getContractCode} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  // Let\'s assume we need to import MessageContract\n  await deployContractByName({name: "MessageContract"})\n  const [MessageContract] = await getContractAddress("MessageContract")\n  const addressMap = {MessageContract}\n\n  const contractTemplate = await getContractCode("HelloWorld", {\n    MessageContract,\n  })\n  console.log({contractTemplate})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"gettransactioncodename-addressmap"},(0,r.kt)("inlineCode",{parentName:"h3"},"getTransactionCode(name, addressMap)")),(0,r.kt)("p",null,"Returns Cadence template from file with ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"_basepath_/transactions")," folder"),(0,r.kt)("h4",{id:"arguments-21"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"name of the transaction template")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#addressmap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"object to use for address mapping of existing deployed contracts")))),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code for specified transaction")))),(0,r.kt)("h4",{id:"usage-26"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, getTransactionCode} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  // Let\'s assume we need to import MessageContract\n  await deployContractByName({name: "MessageContract"})\n  const [MessageContract] = await getContractAddress("MessageContract")\n  const addressMap = {MessageContract}\n\n  const txTemplate = await getTransactionCode({\n    name: "set-message",\n    addressMap,\n  })\n  console.log({txTemplate})\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h3",{id:"getscriptcodename-addressmap"},(0,r.kt)("inlineCode",{parentName:"h3"},"getScriptCode(name, addressMap)")),(0,r.kt)("p",null,"Returns Cadence template from file with ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"_basepath_/scripts")," folder"),(0,r.kt)("h4",{id:"arguments-22"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"name of the script template")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#addressmap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"object to use for address mapping of existing deployed contracts")))),(0,r.kt)("h4",{id:"returns-26"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code for specified script")))),(0,r.kt)("h4",{id:"usage-27"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path"\nimport {init, emulator, getScriptCode} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  // Let\'s assume we need to import MessageContract\n  await deployContractByName({name: "MessageContract"})\n  const [MessageContract] = await getContractAddress("MessageContract")\n  const addressMap = {MessageContract}\n\n  const scriptTemplate = await getScriptCode({\n    name: "get-message",\n    addressMap,\n  })\n\n  console.log({scriptTemplate})\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("h3",{id:"addressmap"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddressMap")),(0,r.kt)("p",null,"Object to use for address mapping of existing deployed contracts. Key shall be ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," and value shall be ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const addressMap = {\n  Messanger: "0x01cf0e2f2f715450",\n  Logger: "0x179b6b1cb6755e31",\n}\n')),(0,r.kt)("h3",{id:"interaction"},(0,r.kt)("inlineCode",{parentName:"h3"},"Interaction")),(0,r.kt)("p",null,"Interaction is a Promise or function returning a promise."),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const ix = async () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(1337)\n    })\n  }, 500)\n}\n")),(0,r.kt)("h3",{id:"cadencetransformer"},(0,r.kt)("inlineCode",{parentName:"h3"},"CadenceTransformer")),(0,r.kt)("p",null,"Function, which will get valid Cadence code, modify it and return valid Cadence code"),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("p",null,"This transformer will look for occupancies of specific import statement and replace it with proper address, where it's deployed on Emulator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const replaceAddress = async code => {\n  const modified = code.replace(\n    /import\\s+FungibleToken\\s+from\\s+0xFUNGIBLETOKEN/,\n    "import FungibleToken from 0xee82856bf20e2aa6"\n  )\n\n  return modified\n}\n')),(0,r.kt)("h3",{id:"keyobject"},"KeyObject"),(0,r.kt)("p",null,"Key objects are used to specify signer keys when ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/accounts"},"creating accounts"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Value Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hashAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#hashalgorithm"},"HashAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"Hashing algorithm to use for generating signatures to be signed by this key (default: ",(0,r.kt)("inlineCode",{parentName:"td"},"HashAlgorithm.SHA3_256"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"privateKey")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Private key to use to generate the signature")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signatureAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signaturealgorithm"},"SignatureAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"Signing algorithm used to sign transactions with this key (default: ",(0,r.kt)("inlineCode",{parentName:"td"},"SignatureAlgorithm.ECDSA_P256"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"weight")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Weight of the key - see ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/concepts/accounts-and-keys/#keys"},"Flow Core Concepts")," for more information")))),(0,r.kt)("h3",{id:"publickey"},"PublicKey"),(0,r.kt)("p",null,"Public keys are stored as ",(0,r.kt)("inlineCode",{parentName:"p"},"Buffer")," objects which have been RLP encoded according to the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/concepts/accounts-and-keys/"},"Flow spec"),"."),(0,r.kt)("p",null,"In order to generate this object using the Flow JS Testing library, use the ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/api#pubflowkeykeyobject"},(0,r.kt)("inlineCode",{parentName:"a"},"pubFlowKey")," method")," exported by the library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {pubFlowKey} from "@onflow/flow-js-testing"\n\nconst pubKey = await pubFlowKey({\n  privateKey: ...,\n  hashAlgorithm: ...,\n  signatureAlgorithm: ...,\n  weight: ...\n})\n')),(0,r.kt)("h3",{id:"signatureobject"},"SignatureObject"),(0,r.kt)("p",null,"Signature objects are used to represent a signature for a particular message as well as the account and keyId which signed for this message."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addr")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"the address of the account which this signature has been generated for")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keyId")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")," or ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signerinfoobject"},"SignerInfo")," object representing user to generate this signature for")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signature")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"a hexidecimal-encoded string representation of the generated signature")))),(0,r.kt)("h3",{id:"signerinfoobject"},"SignerInfoObject"),(0,r.kt)("p",null,"Signer Info objects are used to specify information about which signer and which key from this signer shall be used to ",(0,r.kt)("a",{parentName:"p",href:"/tools/flow-js-testing/send-transactions"},"sign a transaction"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Value Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addr")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the signer's account")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hashAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#hashalgorithm"},"HashAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"Hashing algorithm to use for generating the signature (default: ",(0,r.kt)("inlineCode",{parentName:"td"},"HashAlgorithm.SHA3_256"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keyId")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"The index of the desired key to use from the signer's account (default: ",(0,r.kt)("inlineCode",{parentName:"td"},"0"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"privateKey")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Private key to use to generate the signature (default: service account private key - this is the default PK for all accounts generated by Flow JS Testing Library, see: ",(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/accounts"},"accounts"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signatureAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/tools/flow-js-testing/api#signaturealgorithm"},"SignatureAlgorithm")),(0,r.kt)("td",{parentName:"tr",align:null},"Signing algorithm used to generate the signature (default: ",(0,r.kt)("inlineCode",{parentName:"td"},"SignatureAlgorithm.ECDSA_P256"),")")))),(0,r.kt)("h3",{id:"hashalgorithm"},"HashAlgorithm"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHA2_256"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHA3_256"),(0,r.kt)("td",{parentName:"tr",align:null},"3")))),(0,r.kt)("p",null,"Hash algorithms may be provided as either an enum (accessible via the ",(0,r.kt)("inlineCode",{parentName:"p"},"HashAlgorithm")," object exported by Flow JS Testing, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"HashAlgorithm.SHA3_256"),") or as a string representation of their enum identifier (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},'"SHA3_256"'),")"),(0,r.kt)("h3",{id:"signaturealgorithm"},"SignatureAlgorithm"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ECDSA_P256"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ECDSA_secp256k1"),(0,r.kt)("td",{parentName:"tr",align:null},"3")))),(0,r.kt)("p",null,"Signing algorithms may be provided as either an enum (accessible via the ",(0,r.kt)("inlineCode",{parentName:"p"},"SignatureAlgorithm")," object exported by Flow JS Testing, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"SignatureAlgorithm.ECDSA_P256"),") or as a string representation of their enum identifier (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},'"ECDSA_P256"'),")"),(0,r.kt)("h2",{id:"utilities"},"Utilities"),(0,r.kt)("h3",{id:"isaddressaddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"isAddress(address)")),(0,r.kt)("p",null,"Returns true if the given string is a validly formatted account ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#address"},"address"),' (both "0x" prefixed and non-prefixed are valid)'),(0,r.kt)("h4",{id:"arguments-23"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string to test against the regex")))),(0,r.kt)("h4",{id:"returns-27"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if given string is a validly formatted account ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"address"),".")))),(0,r.kt)("h4",{id:"usage-28"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {isAddress} from "@onflow/flow-js-testing"\n\nconst badAddr = "0xqrtyff"\nconsole.log(isAddress(badAddr)) // false\n\nconst goodAddrWithPrefix = "0xf8d6e0586b0a20c1"\nconsole.log(isAddress(goodAddrWithPrefix)) // true\n\nconst goodAddrSansPrefix = "f8d6e0586b0a20c1"\nconsole.log(isAddress(goodAddrSansPrefix)) // true\n')))}u.isMDXComponent=!0}}]);