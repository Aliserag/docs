"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5531],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,g=m["".concat(p,".").concat(c)]||m[c]||s[c]||l;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const l={},i="Plugin System",o={unversionedId:"tools/flow-cadut/plugins",id:"tools/flow-cadut/plugins",title:"Plugin System",description:"In order to provide better support and allow seamless integration to other libraries (i.e. FIND) we've added Plugin System.",source:"@site/docs/tools/flow-cadut/plugins.md",sourceDirName:"tools/flow-cadut",slug:"/tools/flow-cadut/plugins",permalink:"/tools/flow-cadut/plugins",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618386,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flow Cadut Generator API Reference",permalink:"/tools/flow-cadut/generator"},next:{title:"Flow CLI Documentation",permalink:"/tools/flow-cli/"}},p={},u=[{value:"Argument Resolver",id:"argument-resolver",level:2},{value:"resolver(type, value)",id:"resolvertype-value",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:3}],d={toc:u},m="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"plugin-system"},"Plugin System"),(0,a.kt)("p",null,"In order to provide better support and allow seamless integration to other libraries (i.e. FIND) we've added ",(0,a.kt)("inlineCode",{parentName:"p"},"Plugin System"),"."),(0,a.kt)("p",null,"There are two official ",(0,a.kt)("inlineCode",{parentName:"p"},"@onflow/flow-cadut")," plugins currently: ",(0,a.kt)("inlineCode",{parentName:"p"},"@onflow/flow-cadut-plugin-find")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"@onflow/flow-cadut-plugin-flowns")),(0,a.kt)("p",null,"Currently, supported plugin types are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arguments"))),(0,a.kt)("h1",{id:"development"},"Development"),(0,a.kt)("p",null,"You can create your own plugins - in most simple case it's an object with ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"resolver")," function, which\ntransforms input and returns value in a specific format."),(0,a.kt)("p",null,"Below you can find specifications for different plugin types."),(0,a.kt)("h2",{id:"argument-resolver"},"Argument Resolver"),(0,a.kt)("p",null,"Argument Resolve plugin is an object with tree fields:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"Unique id prefixed with ",(0,a.kt)("inlineCode",{parentName:"td"},"cadut-"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"type")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},'Plugin type. Should be equal to "argument"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"resolver")),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"Function handling argument's transformation")))),(0,a.kt)("p",null,"\ud83d\udce3 ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," field should take value from ",(0,a.kt)("inlineCode",{parentName:"p"},"PLUGIN_TYPES")," enum for compatibility\u2019s sake"),(0,a.kt)("h4",{id:"resolvertype-value"},"resolver(type, value)"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"type")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"String representation of Cadence type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"value")),(0,a.kt)("td",{parentName:"tr",align:null},"any"),(0,a.kt)("td",{parentName:"tr",align:null},"Corresponding value")))),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"resolver")," shall return an object with two fields:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"type")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"String representation of Cadence type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"value")),(0,a.kt)("td",{parentName:"tr",align:null},"any"),(0,a.kt)("td",{parentName:"tr",align:null},"Corresponding transformed value")))),(0,a.kt)("p",null,"\ud83d\udce3 ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," ",(0,a.kt)("em",{parentName:"p"},"could")," be changed during transformation\n\ud83d\udce3 ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," should remain unchanged if plugin can't transform the value (for exampl if it doesn't match specific\nvalidation criteria)"),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { PLUGIN_TYPES } from "@onflow/flow-cadut";\n\nconst ArgumentLoggerPlugin = {\n  id: "cadut-argument-logger",\n  type: PLUGIN_TYPES.ARGUMENT,\n  resolver: (type, value) => {\n    // this plugin will output file type and it\'s value, then return them unchanged\n    log(`${type} - ${JSON.stringify(value)}`);\n    return { type, value };\n  },\n};\n')))}s.isMDXComponent=!0}}]);