"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2025],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={title:"FLOW Token Management",sidebar_title:"FLOW Token",description:"How to mint FLOW Token"},l=void 0,i={unversionedId:"tools/flow-js-testing/flow-token",id:"tools/flow-js-testing/flow-token",title:"FLOW Token Management",description:"How to mint FLOW Token",source:"@site/docs/tools/flow-js-testing/flow-token.md",sourceDirName:"tools/flow-js-testing",slug:"/tools/flow-js-testing/flow-token",permalink:"/tools/flow-js-testing/flow-token",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618171,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{title:"FLOW Token Management",sidebar_title:"FLOW Token",description:"How to mint FLOW Token"},sidebar:"tutorialSidebar",previous:{title:"Execute Scripts",permalink:"/tools/flow-js-testing/execute-scripts"},next:{title:"Bootstrap Framework",permalink:"/tools/flow-js-testing/generator"}},s={},c=[{value:"<code>getFlowBalance(address)</code>",id:"getflowbalanceaddress",level:2},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:4},{value:"<code>mintFlow(recipient, amount)</code>",id:"mintflowrecipient-amount",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"Usage",id:"usage-1",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Some actions on the network will require an account to have a certain amount of FLOW (tokens) - transaction and storage fees, account creation, etc.\nFramework provides a method to query FLOW balances with ",(0,r.kt)("inlineCode",{parentName:"p"},"getFlowBalance")," and mint new tokens via ",(0,r.kt)("inlineCode",{parentName:"p"},"mintFlow"),"."),(0,r.kt)("h2",{id:"getflowbalanceaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"getFlowBalance(address)")),(0,r.kt)("p",null,"Returns current FLOW token balance of the specified account."),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"address of the account to check")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64 amount of FLOW tokens stored in account storage")))),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {\n  init,\n  emulator,\n  getAccountAddress,\n  getFlowBalance,\n} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  const Alice = await getAccountAddress("Alice")\n\n  const [result, error] = await getFlowBalance(Alice)\n  console.log(result, error)\n\n  await emulator.stop()\n}\n\nmain()\n')),(0,r.kt)("h2",{id:"mintflowrecipient-amount"},(0,r.kt)("inlineCode",{parentName:"h2"},"mintFlow(recipient, amount)")),(0,r.kt)("p",null,"Sends transaction to mint the specified amount of FLOW and send it to recipient."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Required:")," Framework shall be initialized with ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," method for this method to work.")),(0,r.kt)("h4",{id:"arguments-1"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"recipient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/reference/api/#address"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"address of the account to check")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64 amount of FLOW tokens to mint and send to recipient")))),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {init, emulator, mintFlow} from "@onflow/flow-js-testing"\n\nconst main = async () => {\n  const basePath = path.resolve(__dirname, "../cadence")\n\n  await init(basePath)\n  await emulator.start()\n\n  const Alice = await getAccountAddress("Alice")\n  const amount = "42.0"\n  const [mintResult, error] = await mintFlow(Alice)\n  console.log(mintResult, error)\n\n  await emulator.stop()\n}\n\nmain()\n')))}u.isMDXComponent=!0}}]);