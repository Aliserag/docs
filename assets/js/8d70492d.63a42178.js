"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5015],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),k=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=k(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=k(n),m=r,u=c["".concat(d,".").concat(m)]||c[m]||s[m]||l;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var k=2;k<l;k++)o[k]=n[k];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},24:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>k});var a=n(87462),r=(n(67294),n(3905));const l={title:"Flow Token Contract",sidebar_title:"Flow Token"},o=void 0,i={unversionedId:"cadence/core-contracts/flow-token",id:"cadence/core-contracts/flow-token",title:"Flow Token Contract",description:"The FlowToken contract defines the FLOW network token.",source:"@site/docs/cadence/core-contracts/flow-token.mdx",sourceDirName:"cadence/core-contracts",slug:"/cadence/core-contracts/flow-token",permalink:"/docs/cadence/core-contracts/flow-token",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1683063625,formattedLastUpdatedAt:"May 2, 2023",frontMatter:{title:"Flow Token Contract",sidebar_title:"Flow Token"},sidebar:"tutorialSidebar",previous:{title:"Flow Fees Contract",permalink:"/docs/cadence/core-contracts/flow-fees"},next:{title:"Fungible Token Contract",permalink:"/docs/cadence/core-contracts/fungible-token"}},d={},k=[{value:"Flow Token Contract",id:"flow-token-contract",level:3},{value:"Tokens Initialized",id:"tokens-initialized",level:3},{value:"Tokens Withdrawn",id:"tokens-withdrawn",level:3},{value:"Tokens Deposited",id:"tokens-deposited",level:3},{value:"Tokens Minted",id:"tokens-minted",level:3},{value:"Tokens Burned",id:"tokens-burned",level:3},{value:"Minter Created",id:"minter-created",level:3},{value:"Burner Created",id:"burner-created",level:3},{value:"Staking Events",id:"staking-events",level:3}],p={toc:k},c="wrapper";function s(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowToken")," contract defines the FLOW network token."),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/flow-core-contracts/blob/master/contracts/FlowToken.cdc"},"FlowToken.cdc")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Network"),(0,r.kt)("th",{parentName:"tr",align:null},"Contract Address"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Emulator/Canary"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x0ae53cb6e3f42a79"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x7e60df042a9c0868"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sandboxnet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x0661ab7d6696a460"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x1654653399040a61"))))),(0,r.kt)("h1",{id:"transactions"},"Transactions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ID"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Source"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"FT.01"))),(0,r.kt)("td",{parentName:"tr",align:null},"Transfer FLOW"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/onflow/flow-core-contracts/blob/master/transactions/flowToken/transfer_tokens.cdc"},"flowToken/transfer_tokens.cdc"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"FT.02"))),(0,r.kt)("td",{parentName:"tr",align:null},"Get an account's balance"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/onflow/flow-core-contracts/blob/master/transactions/flowToken/scripts/get_balance.cdc"},"flowToken/scripts/get_balance.cdc"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"FT.03"))),(0,r.kt)("td",{parentName:"tr",align:null},"Get total supply"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/onflow/flow-core-contracts/blob/master/transactions/flowToken/scripts/get_supply.cdc"},"flowToken/scripts/get_supply.cdc"))))),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("p",null,"Flow relies on a set of core contracts that define key portions of the Flow protocol. Those contracts are core contracts\nand are made to emit the events documented below. You can read about the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/core-contracts"},"core contracts here"),"\nand view their source code and event definitions."),(0,r.kt)("p",null,"Events emitted from core contracts follow a standard format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A.{contract address}.{contract name}.{event name}\n")),(0,r.kt)("p",null,"The components of the format are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contract address")," - the address of the account the contract has been deployed to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contract name")," - the name of the contract in the source code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event name")," - the name of the event as declared in the source code")),(0,r.kt)("h3",{id:"flow-token-contract"},"Flow Token Contract"),(0,r.kt)("p",null,"Description of events emitted from the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/core-contracts/flow-token/"},"FLOW Token contract"),".\nThe contract defines the fungible FLOW token. Please note that events for the fungible token contracts are the same\nif deployed to a different account but the ",(0,r.kt)("inlineCode",{parentName:"p"},"contract address")," is\nchanged to the address of the account the contract has been deployed to."),(0,r.kt)("h3",{id:"tokens-initialized"},"Tokens Initialized"),(0,r.kt)("p",null,"Event that is emitted when the contract gets created."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event name: ",(0,r.kt)("inlineCode",{parentName:"li"},"TokensInitialized")),(0,r.kt)("li",{parentName:"ul"},"Mainnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.1654653399040a61.FlowToken.TokensInitialized")),(0,r.kt)("li",{parentName:"ul"},"Testnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.7e60df042a9c0868.FlowToken.TokensInitialized"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensInitialized(initialSupply: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialSupply"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The initial supply of the tokens")))),(0,r.kt)("h3",{id:"tokens-withdrawn"},"Tokens Withdrawn"),(0,r.kt)("p",null,"Event that is emitted when tokens get withdrawn from a Vault."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event name: ",(0,r.kt)("inlineCode",{parentName:"li"},"TokensWithdrawn")),(0,r.kt)("li",{parentName:"ul"},"Mainnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.1654653399040a61.FlowToken.TokensWithdrawn")),(0,r.kt)("li",{parentName:"ul"},"Testnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.7e60df042a9c0868.FlowToken.TokensWithdrawn"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensWithdrawn(amount: UFix64, from: Address?)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens withdrawn")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"from"),(0,r.kt)("td",{parentName:"tr",align:null},"Address?"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional address of the account that owns the vault where tokens were withdrawn from. ",(0,r.kt)("inlineCode",{parentName:"td"},"nil")," if the vault is not in an account's storage")))),(0,r.kt)("h3",{id:"tokens-deposited"},"Tokens Deposited"),(0,r.kt)("p",null,"Event that is emitted when tokens get deposited to a Vault."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event name: ",(0,r.kt)("inlineCode",{parentName:"li"},"TokensDeposited")),(0,r.kt)("li",{parentName:"ul"},"Mainnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.1654653399040a61.FlowToken.TokensDeposited")),(0,r.kt)("li",{parentName:"ul"},"Testnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.7e60df042a9c0868.FlowToken.TokensDeposited"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensDeposited(amount: UFix64, to: Address?)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens withdrawn")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"to"),(0,r.kt)("td",{parentName:"tr",align:null},"Address?"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional address of the account that owns the vault where tokens were deposited to. ",(0,r.kt)("inlineCode",{parentName:"td"},"nil")," if the vault is not in an account's storage")))),(0,r.kt)("h3",{id:"tokens-minted"},"Tokens Minted"),(0,r.kt)("p",null,"Event that is emitted when new tokens gets minted."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event name: ",(0,r.kt)("inlineCode",{parentName:"li"},"TokensMinted")),(0,r.kt)("li",{parentName:"ul"},"Mainnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.1654653399040a61.FlowToken.TokensMinted")),(0,r.kt)("li",{parentName:"ul"},"Testnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.7e60df042a9c0868.FlowToken.TokensMinted"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensMinted(amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens to mint")))),(0,r.kt)("h3",{id:"tokens-burned"},"Tokens Burned"),(0,r.kt)("p",null,"Event that is emitted when tokens get destroyed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event name: ",(0,r.kt)("inlineCode",{parentName:"li"},"TokensBurned")),(0,r.kt)("li",{parentName:"ul"},"Mainnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.1654653399040a61.FlowToken.TokensBurned")),(0,r.kt)("li",{parentName:"ul"},"Testnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.7e60df042a9c0868.FlowToken.TokensBurned"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensBurned(amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens to burn")))),(0,r.kt)("h3",{id:"minter-created"},"Minter Created"),(0,r.kt)("p",null,"Event that is emitted when a new minter resource gets created."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event name: ",(0,r.kt)("inlineCode",{parentName:"li"},"MinterCreated")),(0,r.kt)("li",{parentName:"ul"},"Mainnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.1654653399040a61.FlowToken.MinterCreated")),(0,r.kt)("li",{parentName:"ul"},"Testnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.7e60df042a9c0868.FlowToken.MinterCreated"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event MinterCreated(allowedAmount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowedAmount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens that the minter is allowed to mint")))),(0,r.kt)("h3",{id:"burner-created"},"Burner Created"),(0,r.kt)("p",null,"Event that is emitted when a new burner Resource gets created."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event name: ",(0,r.kt)("inlineCode",{parentName:"li"},"BurnerCreated")),(0,r.kt)("li",{parentName:"ul"},"Mainnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.1654653399040a61.FlowToken.BurnerCreated")),(0,r.kt)("li",{parentName:"ul"},"Testnet event: ",(0,r.kt)("inlineCode",{parentName:"li"},"A.7e60df042a9c0868.FlowToken.BurnerCreated"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event BurnerCreated()\n")),(0,r.kt)("h3",{id:"staking-events"},"Staking Events"),(0,r.kt)("p",null,"To learn more about staking events, read ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/staking/events/"},"https://docs.onflow.org/staking/events/")))}s.isMDXComponent=!0}}]);