"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4510],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=a.createContext({}),s=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},u=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},d="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,c=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),d=s(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||r;return n?a.createElement(m,l(l({ref:e},u),{},{components:n})):a.createElement(m,l({ref:e},u))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,l=new Array(r);l[0]=h;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[d]="string"==typeof t?t:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},67475:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={archived:!1,draft:!1,title:"2. Hello World",description:"A smart contract tutorial for Cadence.",date:new Date("2022-05-10T00:00:00.000Z"),meta:{keywords:["tutorial","Flow","Cadence","Hello World"]},tags:["reference","cadence","tutorial"],socialImageTitle:"Hello World",socialImageDescription:"Hello world smart contract image."},l=void 0,i={unversionedId:"cadence/tutorial/02-hello-world",id:"cadence/tutorial/02-hello-world",title:"2. Hello World",description:"A smart contract tutorial for Cadence.",source:"@site/docs/cadence/tutorial/02-hello-world.mdx",sourceDirName:"cadence/tutorial",slug:"/cadence/tutorial/02-hello-world",permalink:"/cadence/tutorial/02-hello-world",draft:!1,tags:[{label:"reference",permalink:"/tags/reference"},{label:"cadence",permalink:"/tags/cadence"},{label:"tutorial",permalink:"/tags/tutorial"}],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618171,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{archived:!1,draft:!1,title:"2. Hello World",description:"A smart contract tutorial for Cadence.",date:"2022-05-10T00:00:00.000Z",meta:{keywords:["tutorial","Flow","Cadence","Hello World"]},tags:["reference","cadence","tutorial"],socialImageTitle:"Hello World",socialImageDescription:"Hello world smart contract image."},sidebar:"tutorialSidebar",previous:{title:"1. First Steps",permalink:"/cadence/tutorial/01-first-steps"},next:{title:"3. Resource Contract Tutorial",permalink:"/cadence/tutorial/03-resources"}},c={},s=[{value:"What is a smart contract?",id:"what-is-a-smart-contract",level:2},{value:"Follow Along!",id:"follow-along",level:2},{value:"How to Use Playground",id:"how-to-use-playground",level:2},{value:"Implementing Hello World",id:"implementing-hello-world",level:2},{value:"Accounts and Transactions",id:"accounts-and-transactions",level:3},{value:"What is an Account?",id:"what-is-an-account",level:4},{value:"Deploying Code",id:"deploying-code",level:3},{value:"Creating a Transaction",id:"creating-a-transaction",level:3},{value:"Reviewing HelloWorld",id:"reviewing-helloworld",level:2}],u=(d="Callout",function(t){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)});var d;const p={toc:s},h="wrapper";function m(t){let{components:e,...r}=t;return(0,o.kt)(h,(0,a.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this tutorial, we'll write and deploy our first smart contract!"),(0,o.kt)(u,{type:"success",mdxType:"Callout"},"Open the starter code for this tutorial in the Flow Playground: ",(0,o.kt)("br",null),(0,o.kt)("a",{href:"https://play.onflow.org/af7aba31-dee9-4477-9e1d-7b46e958468e",target:"_blank"},"https://play.onflow.org/af7aba31-dee9-4477-9e1d-7b46e958468e"),(0,o.kt)("br",null),"The tutorial will ask you to take various actions to interact with this code."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},"Instructions that require you to take action are always included in a callout box like this one. These highlighted actions are all that you need to do to get your code running, but reading the rest is necessary to understand the language's design."),(0,o.kt)("h2",{id:"what-is-a-smart-contract"},"What is a smart contract?"),(0,o.kt)("p",null,"In regular terms, a contract is an agreement between two parties for some exchange of information or assets.\nNormally, the terms of a contract are supervised and enforced by a trusted third party, such as a bank or a lawyer."),(0,o.kt)("p",null,"A smart contract is a computer program stored in a decentralized network like a blockchain\nthat verifies and executes the performance of a contract (like a lawyer does)\nwithout the need for any trusted third party anywhere in the process, because the code itself is trusted."),(0,o.kt)("p",null,"Programs that run on blockchains are commonly referred to as smart contracts\nbecause they mediate important functionality (such as currency) without having to rely on a central authority (like a bank)."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://developers.flow.com/cadence"},"Cadence is the resource-oriented programming language"),"\nfor developing smart contracts on the Flow Blockchain."),(0,o.kt)("p",null,"This tutorial will walk you through an example of a smart contract that implements basic Cadence features,\nincluding accounts, transactions, and signers."),(0,o.kt)("p",null,'Our "Hello World" smart contract will:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create and initialize a smart contract with a single field of type ",(0,o.kt)("inlineCode",{parentName:"li"},"String")),(0,o.kt)("li",{parentName:"ol"},'Initialize the field with the phrase "Hello, World!"'),(0,o.kt)("li",{parentName:"ol"},"Create a function in the contract that returns our greeting")),(0,o.kt)("p",null,"We will deploy this contract in an account, then use a transaction to interact with the contract,\nand finally discuss the role of signers in the transaction."),(0,o.kt)("h2",{id:"follow-along"},"Follow Along!"),(0,o.kt)("p",null,"Before we get started if you'd prefer to learn from a video, feel free to join Kim\nas she walks you through the basics of accounts, smart contracts, Cadence, transactions & more!"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/pRz7EzrWchs",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,o.kt)("h2",{id:"how-to-use-playground"},"How to Use Playground"),(0,o.kt)("p",null,"For this tutorial, you'll be using the ",(0,o.kt)("a",{parentName:"p",href:"https://play.onflow.org/local-project"},"Flow Playground"),",\nan interactive web interface that lets you write and run smart contracts in a test environment.\nIt also allows you to save and share your work with others so that you can test smart contracts collaboratively."),(0,o.kt)("p",null,"When you work with accounts in the Flow Playground, you start with five default accounts that you can change and reconfigure.\nEach account in your environment has a unique address, and you can select an account in the left toolbar,\nwhich will open up the contract that is saved for that account."),(0,o.kt)("p",null,"For this tutorial, you'll be working with only the first account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")),(0,o.kt)("h2",{id:"implementing-hello-world"},"Implementing Hello World"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"You will start by writing a smart contract that contains a public function that returns ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hello World!"'),"."),(0,o.kt)("p",null,"Like most other blockchains, the programming model in Flow is centered around accounts and transactions.\nAll state that persists permanently is stored in ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts"},"accounts"),"\nand all accounts have the same core functionality. (users, smart contracts, data storage)"),(0,o.kt)("p",null,"The interfaces to this state (the ways to interact with it, otherwise known as methods or functions) are also stored in accounts.\nAll code execution takes place within ",(0,o.kt)("a",{parentName:"p",href:"../language/transactions"},"transactions"),",\nwhich are blocks of code that are authorized and submitted by external users\nto interact with the persistent state, which includes directly modifying account storage."),(0,o.kt)("p",null,"A smart contract is a collection of code (its functions) and data (its state) that lives in the contract area of an account in Flow.\nEach account can have zero or more contracts and/or contract interfaces.\nA contract can be freely added, removed, or updated (with some restrictions) by the owner of the account.\nNow let's look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract that you'll be working through in this tutorial."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"If you haven't already, you'll need to follow this link to open a playground session with the Hello World contracts, transactions, and scripts pre-loaded:"),(0,o.kt)("a",{href:"https://play.onflow.org/dbc06b40-d0b1-42da-9e0d-686bc9972e65",target:"_blank"},"https://play.onflow.org/dbc06b40-d0b1-42da-9e0d-686bc9972e65")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://storage.googleapis.com/flow-resources/documentation-assets/cadence-tuts/playground-accounts.png",alt:"Accounts in sidebar"})),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the Account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," tab with the file called\n",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.cdc"),". ",(0,o.kt)("br",null),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.cdc")," should contain this code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=HelloWorld.cdc"},'// HelloWorld.cdc\n//\npub contract HelloWorld {\n\n    // Declare a public field of type String.\n    //\n    // All fields must be initialized in the init() function.\n    pub let greeting: String\n\n    // The init() function is required if the contract contains any fields.\n    init() {\n        self.greeting = "Hello, World!"\n    }\n\n    // Public function that returns our friendly greeting!\n    pub fun hello(): String {\n        return self.greeting\n    }\n}\n')),(0,o.kt)("p",null,"The line ",(0,o.kt)("inlineCode",{parentName:"p"},"pub contract HelloWorld ")," declares a contract that is accessible in all scopes (public).\nIt's followed by ",(0,o.kt)("inlineCode",{parentName:"p"},"pub let greeting: String")," which declares a state constant (",(0,o.kt)("inlineCode",{parentName:"p"},"let"),") of type ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," that is accessible in all scopes(",(0,o.kt)("inlineCode",{parentName:"p"},"pub"),")."),(0,o.kt)("p",null,"You would have used ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," to declare a variable, which that the value can be changed later on instead of remaining constant like with ",(0,o.kt)("inlineCode",{parentName:"p"},"let"),"."),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"access(all)")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"pub")," keyword interchangeably.\nThey are both examples of an access control specification that means an interface can be accessed in all scopes, but not written to in all scopes.\nFor more information about the different levels of access control permitted in Cadence, refer to the ",(0,o.kt)("a",{parentName:"p",href:"../language/access-control"},"Access Control section of the language reference"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"init()")," section is called the initializer. It is a special function that only runs when the contract is first created.\nObjects similar to contracts, such as other ",(0,o.kt)("a",{parentName:"p",href:"../language/composite-types"},"composite types like structs or resources"),",\nrequire that the ",(0,o.kt)("inlineCode",{parentName:"p"},"init()")," function initialize any fields that are declared in a composite type.\nIn the above example, the initializer sets the ",(0,o.kt)("inlineCode",{parentName:"p"},"greeting")," field to ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hello, World!"')," when the contract is initialized."),(0,o.kt)("p",null,"The last part of our ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract is a public function called ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()"),".\nThis declaration returns a value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"String"),".\nAnyone who imports this contract in their transaction or script can read the public fields,\nuse the public types, and call the public contract functions; i.e. the ones that have ",(0,o.kt)("inlineCode",{parentName:"p"},"pub")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"access(all)")," specified."),(0,o.kt)("p",null,"Soon you'll deploy this contract to your account and run a transaction that calls its function, but first, let's look at what accounts and transactions are."),(0,o.kt)("h3",{id:"accounts-and-transactions"},"Accounts and Transactions"),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"what-is-an-account"},"What is an Account?"),(0,o.kt)("p",null,"Each user has an account controlled by one or more private keys with configurable weight.\nThis means that support for accounts/wallets with ",(0,o.kt)("a",{parentName:"p",href:"https://www.coindesk.com/what-is-a-multisignature-crypto-wallet"},"multiple controllers"),"\nis built into the protocol by default."),(0,o.kt)("p",null,"An account is divided into two main areas:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The first area is the ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts"},"contract area"),".\nThis is the area that stores smart contracts containing type definitions, fields, and functions that relate to common functionality.\nThere is no limit to the number of smart contracts an account can store.\nThis area cannot be directly accessed in a transaction unless the transaction is just returning (reading) a copy of the code deployed to an account.\nThe owner of an account can directly add, remove, or update/overwrite contracts that are stored in it.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The second area is the account storage.\nThis area is where an account stores the objects that they own.\nThis also stores code that declares the capabilities for controlling how these stored objects can be accessed.\nWe'll cover account storage in more detail in a later tutorial."))),(0,o.kt)("p",null,"In this tutorial, we use the account with the address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," to store our ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract.\nOutside the Playground context, account addresses on Flow are completely unique."),(0,o.kt)("h3",{id:"deploying-code"},"Deploying Code"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Now that you know what an account is in a Cadence context, you can deploy the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract to your account."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Make sure that the account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," tab is selected and that the\n",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.cdc")," file is in the editor. ",(0,o.kt)("br",null),"\nClick the deploy button to deploy the contents of the editor to account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01"),".")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Deploy Contract",src:n(43705).Z,width:"1911",height:"915"})),(0,o.kt)("p",null,"You should see a log in the output area indicating that the deployment succeeded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Deployed Contract To: 0x01\n")),(0,o.kt)("p",null,"You'll also see the name of the contract show up in the selected account tab underneath the number for the account.\nThis indicates that the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract has been deployed to the account.\nYou can always look at this tab to verify which contracts are in which accounts.\nIn the Flow Playground environment there can only be one contract for each account."),(0,o.kt)("h3",{id:"creating-a-transaction"},"Creating a Transaction"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"../language/transactions"},"Transaction")," in Flow is defined as an arbitrary-sized block of Cadence code that is authorized by one or more accounts.\nWhen an account authorizes a transaction, the code in that transaction has access to the authorizers' private storage.\nAn account authorizes a transaction by performing a cryptographic signature on the transaction with the account's private key,\nwhich should only be accessible to the account owner. Therefore, authorizers are also known as signers.\nIn addition to being able to access the authorizer's private assets,\ntransactions can also read and call functions in public contracts, and access public domains in other users' accounts.\nFor this tutorial, we use a transaction to call our ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," function."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the transaction named ",(0,o.kt)("inlineCode",{parentName:"p"},"Simple Transaction")," ",(0,o.kt)("br",null),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"Simple Transaction")," should contain this code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=SayHello.cdc"},"import HelloWorld from 0x01\n\ntransaction {\n\n  prepare(acct: AuthAccount) {}\n\n  execute {\n    log(HelloWorld.hello())\n  }\n}\n\n")),(0,o.kt)("p",null,"This transaction first imports our ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," smart contract from the account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01"),".\nIf you haven't deployed the smart contract from the account, the transaction won't have access to it and the import will fail.\nThis imports the entire contract code from ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld"),", including type definitions and public functions,\nso that the transaction can use them to interact with the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract in account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01"),"."),(0,o.kt)("p",null,"To import a smart contract from any other account, type this line at the top of your transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"// Replace {ContractName} with the name of the contract you want to import\n// and {Address} with the account you want to import it from\nimport {ContractName} from {Address}\n")),(0,o.kt)("p",null,"Transactions are divided into two main phases, ",(0,o.kt)("inlineCode",{parentName:"p"},"prepare")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"execute"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"prepare")," phase is required but we don't use it in this tutorial.\nWe'll cover this phase in a later tutorial."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"execute")," phase is the main body of a transaction.\nIt can call functions on external contracts and objects and perform operations on data that was initialized in the transaction.\nIn this example, the ",(0,o.kt)("inlineCode",{parentName:"li"},"execute")," phase calls ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloWorld.hello()")," which calls the ",(0,o.kt)("inlineCode",{parentName:"li"},"hello()")," function in the ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloWorld")," contract and logs the result(",(0,o.kt)("inlineCode",{parentName:"li"},"log(HelloWorld.hello())"),") to the console.")),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"In the box at the top right of the editor, select Account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," as the transaction signer. ",(0,o.kt)("br",null),"\nClick the ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," button to submit the transaction")),(0,o.kt)("p",null,"You should see something like this in the transaction results at the bottom of the screen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Simple Transaction "Hello, World!"\n')),(0,o.kt)("p",null,"Congratulations, you just executed your first Cadence transaction with the account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," as the signer."),(0,o.kt)("p",null,"In this tutorial, you'll get the same result if you use different signers for the transaction\nbut later tutorials will use more complex examples that have different results depending on the signer."),(0,o.kt)("h2",{id:"reviewing-helloworld"},"Reviewing HelloWorld"),(0,o.kt)("p",null,"This tutorial covered an introduction to Cadence, including terms like accounts, transactions, and signers.\nWe implemented a smart contract that is accessible in all scopes.\nThe smart contract had a ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," field initialized with the value ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello, World!")," and a function to return (read) this value.\nNext, we deployed this contract in an account and implemented a transaction to call the function in the smart contract and log the result to the console.\nFinally, we used the account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," as the signer for this transaction."),(0,o.kt)("p",null,"Now that you have completed the tutorial, you have the basic knowledge to write a simple Cadence program that can:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Deploy a basic smart contract in an account"),(0,o.kt)("li",{parentName:"ul"},"Interact with the smart contract using a transaction"),(0,o.kt)("li",{parentName:"ul"},"Sign the transaction with one or multiple signers")),(0,o.kt)("p",null,"Feel free to modify the smart contract to implement different functions,\nexperiment with the available ",(0,o.kt)("a",{parentName:"p",href:"../language/values-and-types"},"Cadence types"),",\nand write new transactions that execute multiple functions from your ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," smart contract."))}m.isMDXComponent=!0},43705:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/deploybox-02487803c6e94dfacc1a7be6732231de.png"}}]);