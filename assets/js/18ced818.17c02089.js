"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5223],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),i=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=i(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=i(t),p=r,h=d["".concat(c,".").concat(p)]||d[p]||u[p]||o;return t?a.createElement(h,l(l({ref:n},m),{},{components:t})):a.createElement(h,l({ref:n},m))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=t[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},22558:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=t(87462),r=(t(67294),t(3905));const o={title:"Syntax"},l=void 0,s={unversionedId:"cadence/language/syntax",id:"cadence/language/syntax",title:"Syntax",description:"Comments",source:"@site/docs/cadence/language/syntax.md",sourceDirName:"cadence/language",slug:"/cadence/language/syntax",permalink:"/docs/cadence/language/syntax",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1683063625,formattedLastUpdatedAt:"May 2, 2023",frontMatter:{title:"Syntax"},sidebar:"tutorialSidebar",previous:{title:"Scope",permalink:"/docs/cadence/language/scope"},next:{title:"Transactions",permalink:"/docs/cadence/language/transactions"}},c={},i=[{value:"Comments",id:"comments",level:2},{value:"Documentation Comments",id:"documentation-comments",level:3},{value:"Names",id:"names",level:2},{value:"Conventions",id:"conventions",level:3},{value:"Semicolons",id:"semicolons",level:2}],m={toc:i},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("p",null,"Comments can be used to document code.\nA comment is text that is not executed."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Single-line comments")," start with two slashes (",(0,r.kt)("inlineCode",{parentName:"p"},"//"),").\nThese comments can go on a line by themselves or they can go directly after a line of code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// This is a comment on a single line.\n// Another comment line that is not executed.\n\nlet x = 1  // Here is another comment after a line of code.\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Multi-line comments")," start with a slash and an asterisk (",(0,r.kt)("inlineCode",{parentName:"p"},"/*"),")\nand end with an asterisk and a slash (",(0,r.kt)("inlineCode",{parentName:"p"},"*/"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"/* This is a comment which\nspans multiple lines. */\n")),(0,r.kt)("p",null,"Comments may be nested."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"/* /* this */ is a valid comment */\n")),(0,r.kt)("p",null,"Multi-line comments are balanced."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"/* this is a // comment up to here */ this is not part of the comment */\n")),(0,r.kt)("h3",{id:"documentation-comments"},"Documentation Comments"),(0,r.kt)("p",null,'Documentation comments (also known as "doc-strings" or "doc-comment") are a special set of comments that can be\nprocessed by tools, for example to generate human-readable documentation, or provide documentation in an IDE.'),(0,r.kt)("p",null,"Doc-comments either start with three slashes (",(0,r.kt)("inlineCode",{parentName:"p"},"///"),") on each line,\nor are surrounded by ",(0,r.kt)("inlineCode",{parentName:"p"},"/**")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"**/"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"/// This is a documentation comment for `x`.\n/// It spans multiple lines.\n\nlet x = 1\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"/** \n  This is a documentation comment\n  which also spans multiple lines.\n**/\n")),(0,r.kt)("h2",{id:"names"},"Names"),(0,r.kt)("p",null,"Names may start with any upper or lowercase letter (A-Z, a-z)\nor an underscore (",(0,r.kt)("inlineCode",{parentName:"p"},"_"),").\nThis may be followed by zero or more upper and lower case letters,\nunderscores, and numbers (0-9).\nNames may not begin with a number."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Valid: title-case\n//\nPersonID\n\n// Valid: with underscore\n//\ntoken_name\n\n// Valid: leading underscore and characters\n//\n_balance\n\n// Valid: leading underscore and numbers\n_8264\n\n// Valid: characters and number\n//\naccount2\n\n// Invalid: leading number\n//\n1something\n\n// Invalid: invalid character #\n_#1\n\n// Invalid: various invalid characters\n//\n!@#$%^&*\n")),(0,r.kt)("h3",{id:"conventions"},"Conventions"),(0,r.kt)("p",null,"By convention, variables, constants, and functions have lowercase names;\nand types have title-case names."),(0,r.kt)("h2",{id:"semicolons"},"Semicolons"),(0,r.kt)("p",null,"Semicolons (;) are used as separators between declarations and statements.\nA semicolon can be placed after any declaration and statement,\nbut can be omitted between declarations and if only one statement appears on the line."),(0,r.kt)("p",null,"Semicolons must be used to separate multiple statements if they appear on the same line."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant, without a semicolon.\n//\nlet a = 1\n\n// Declare a variable, with a semicolon.\n//\nvar b = 2;\n\n// Declare a constant and a variable on a single line, separated by semicolons.\n//\nlet d = 1; var e = 2\n")))}u.isMDXComponent=!0}}]);