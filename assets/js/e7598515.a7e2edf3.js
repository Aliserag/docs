"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[581],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=o,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||i;return t?a.createElement(m,r(r({ref:n},p),{},{components:t})):a.createElement(m,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},82356:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(87462),o=(t(67294),t(3905));const i={title:"How to Configure FCL"},r=void 0,l={unversionedId:"Tooling/fcl-js/configure-fcl",id:"Tooling/fcl-js/configure-fcl",title:"How to Configure FCL",description:"Configuration",source:"@site/docs/Tooling/fcl-js/configure-fcl.mdx",sourceDirName:"Tooling/fcl-js",slug:"/Tooling/fcl-js/configure-fcl",permalink:"/docs/Tooling/fcl-js/configure-fcl",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1683063625,formattedLastUpdatedAt:"May 2, 2023",frontMatter:{title:"How to Configure FCL"},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/docs/Tooling/fcl-js/authentication"},next:{title:"Wallet Discovery",permalink:"/docs/Tooling/fcl-js/discovery"}},c={},s=[{value:"Configuration",id:"configuration",level:2},{value:"Setting Configuration Values",id:"setting-configuration-values",level:2},{value:"Getting Configuration Values",id:"getting-configuration-values",level:2},{value:"Common Configuration Keys",id:"common-configuration-keys",level:2},{value:"Address replacement in scripts and transactions",id:"address-replacement-in-scripts-and-transactions",level:2},{value:"Example",id:"example",level:2}],p={toc:s},u="wrapper";function f(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"FCL has a mechanism that lets you configure various aspects of FCL.\nThe main idea here (from an FCL perspective) should be that when you move from one instance of the Flow Blockchain to another (Local Emulator to Testnet to Mainnet) the only thing you should need to change (once again from an FCL perspective) is your configuration."),(0,o.kt)("h2",{id:"setting-configuration-values"},"Setting Configuration Values"),(0,o.kt)("p",null,"Values only need to be set once. We recomend doing this once and as early in the life cycle as possible.\nTo set a configuation value, the ",(0,o.kt)("inlineCode",{parentName:"p"},"put")," method on the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," instance needs to be called, the ",(0,o.kt)("inlineCode",{parentName:"p"},"put")," method returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," instance so they can be chained."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nfcl.config()         // returns the config instance\n  .put("foo", "bar") // configures "foo" to be "bar"\n  .put("baz", "buz") // configures "baz" to be "buz"\n')),(0,o.kt)("h2",{id:"getting-configuration-values"},"Getting Configuration Values"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," instance has an asynchronous ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method. You can also pass it a fallback value incase the configuration state does not include what you are wanting."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nfcl.config()\n  .put("foo", "bar")\n  .put("woot", 5)\n  .put("rawr", 7)\n\nconst FALLBACK = 1\n\nasync function addStuff () {\n  var woot = await fcl.config().get("woot", FALLBACK) // will be 5 -- set in the config before\n  var rawr = await fcl.config().get("rawr", FALLBACK) // will be 7 -- set in the config before\n  var hmmm = await fcl.config().get("hmmm", FALLBACK) // will be 1 -- uses fallback because this isnt in the config\n\n  return woot + rawr + hmmm\n}\n\naddStuff().then(d => console.log(d)) // 13 (5 + 7 + 1)\n')),(0,o.kt)("h2",{id:"common-configuration-keys"},"Common Configuration Keys"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"accessNode.api")," -- Api URL for the Flow Blockchain Access Node you want to be communicating with."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"app.detail.title")," - ",(0,o.kt)("strong",{parentName:"li"},"(INTRODUCED ",(0,o.kt)("inlineCode",{parentName:"strong"},"@onflow/fcl@0.0.68"),")")," Your applications title, can be requested by wallets and other services."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"app.detail.icon")," - ",(0,o.kt)("strong",{parentName:"li"},"(INTRODUCED ",(0,o.kt)("inlineCode",{parentName:"strong"},"@onflow/fcl@0.0.68"),")")," Url for your applications icon, can be requested by wallets and other services."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"challenge.handshake")," -- ",(0,o.kt)("strong",{parentName:"li"},"(DEPRECATED ",(0,o.kt)("inlineCode",{parentName:"strong"},"@onflow/fcl@0.0.68"),")")," Points FCL at the Wallet or Wallet Discovery mechanism."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"discovery.wallet")," -- ",(0,o.kt)("strong",{parentName:"li"},"(INTRODUCED ",(0,o.kt)("inlineCode",{parentName:"strong"},"@onflow/fcl@0.0.68"),")")," Points FCL at the Wallet or Wallet Discovery mechanism."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"discovery.wallet.method")," -- Describes which service strategy a wallet should use: ",(0,o.kt)("inlineCode",{parentName:"li"},"IFRAME/RPC"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"POP/RPC"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"TAB/RPC"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"HTTP/POST"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"EXT/RPC")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"env")," -- ",(0,o.kt)("strong",{parentName:"li"},"(DEPRECATED ",(0,o.kt)("inlineCode",{parentName:"strong"},"@onflow/fcl@1.0.0"),")")," Used in conjunction with stored interactions. Possible values: ",(0,o.kt)("inlineCode",{parentName:"li"},"local"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"canarynet"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"testnet"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"mainnet")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fcl.limit")," -- Specifies fallback compute limit if not provided in transaction.  Provided as integer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flow.network")," (recommended) -- ",(0,o.kt)("strong",{parentName:"li"},"(INTRODUCED ",(0,o.kt)("inlineCode",{parentName:"strong"},"@onflow/fcl@1.0.0"),")")," Used in conjunction with stored interactions and provides FCLCryptoContract address for ",(0,o.kt)("inlineCode",{parentName:"li"},"testnet")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"mainnet"),". Possible values: ",(0,o.kt)("inlineCode",{parentName:"li"},"local"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"canarynet"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"testnet"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"mainnet"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"service.OpenID.scopes")," - ",(0,o.kt)("strong",{parentName:"li"},"(INTRODUCED ",(0,o.kt)("inlineCode",{parentName:"strong"},"@onflow/fcl@0.0.68"),")")," Open ID Connect claims for Wallets and OpenID services.")),(0,o.kt)("h2",{id:"address-replacement-in-scripts-and-transactions"},"Address replacement in scripts and transactions"),(0,o.kt)("p",null,"Configuration keys that start with ",(0,o.kt)("inlineCode",{parentName:"p"},"0x")," will be replaced in FCL scripts and transactions, this allows you to write your script or transaction Cadence code once and not have to change it when you point your application at a difference instance of the Flow Blockchain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nfcl.config()\n  .put("0xFungibleToken", "0xf233dcee88fe0abe")\n\nasync function myScript () {\n  return fcl.send([\n    fcl.script`\n      import FungibleToken from 0xFungibleToken // will be replaced with 0xf233dcee88fe0abe because of the configuration\n\n      pub fun main() { /* Rest of the script goes here */ }\n    `\n  ]).then(fcl.decode)\n}\n\nasync function myTransaction () {\n  return fcl.send([\n    fcl.transaction`\n      import FungibleToken from 0xFungibleToken // will be replaced with 0xf233dcee88fe0abe because of the configuration\n\n      transaction { /* Rest of the transaction goes here */ }\n    `\n  ]).then(fcl.decode)\n}\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nfcl.config()\n  .put("flow.network", "testnet")\n  .put("accessNode.api", "https://rest-testnet.onflow.org")\n  .put("discovery.wallet", "http://localhost:3000/fcl/authn")\n  .put("app.detail.title", "Test Harness")\n  .put("app.detail.icon", "https://i.imgur.com/r23Zhvu.png")\n  .put("service.OpenID.scopes", "email email_verified name zoneinfo")\n  .put("0xFlowToken", "0x7e60df042a9c0868")\n')))}f.isMDXComponent=!0}}]);