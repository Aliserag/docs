"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5576],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),l=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(a),h=i,f=p["".concat(o,".").concat(h)]||p[h]||d[h]||r;return a?n.createElement(f,s(s({ref:t},u),{},{components:a})):n.createElement(f,s({ref:t},u))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=h;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[p]="string"==typeof e?e:i,s[1]=c;for(var l=2;l<r;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},62962:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var n=a(87462),i=(a(67294),a(3905));const r={title:"Security Best Practices"},s=void 0,c={unversionedId:"cadence/security-best-practices",id:"cadence/security-best-practices",title:"Security Best Practices",description:"This is an opinionated list of best practices Cadence developers should follow to write more secure Cadence code.",source:"@site/docs/cadence/security-best-practices.mdx",sourceDirName:"cadence",slug:"/cadence/security-best-practices",permalink:"/docs/cadence/security-best-practices",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682709940,formattedLastUpdatedAt:"Apr 28, 2023",frontMatter:{title:"Security Best Practices"},sidebar:"tutorialSidebar",previous:{title:"Release Process",permalink:"/docs/cadence/releasing"},next:{title:"Guide for Solidity developers",permalink:"/docs/cadence/solidity-to-cadence"}},o={},l=[{value:"References",id:"references",level:2},{value:"Account Storage",id:"account-storage",level:2},{value:"Auth Accounts",id:"auth-accounts",level:2},{value:"Capabilities",id:"capabilities",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Types",id:"types",level:2},{value:"Access Control",id:"access-control",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is an opinionated list of best practices Cadence developers should follow to write more secure Cadence code."),(0,i.kt)("p",null,"Some practices listed below might overlap with advice in the ",(0,i.kt)("a",{parentName:"p",href:"design-patterns"},"Cadence Anti-Patterns")," section, which is a recommended read as well."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"language/references"},"References")," are ephemeral values and cannot be stored. If persistence is required, store a capability and borrow it when needed."),(0,i.kt)("p",null,"Authorized references (references with the ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," keyword) allow downcasting, e.g. a restricted type to its unrestricted type and should only be used in some specific cases."),(0,i.kt)("p",null,"When exposing functionality, provide the least access necessary. Do not use authorized references, as they can be downcasted, potentially allowing a user to gain access to supposedly restricted functionality. For example, the fungible token standard provides an interface to get the balance of a vault, without exposing the withdrawal functionality."),(0,i.kt)("p",null,"Be aware that the subtype or unrestricted type could expose functionality that was not intended to be exposed. Do not use authorized references when exposing functionality. For example, the fungible token standard provides an interface to get the balance of a vault, without exposing the withdrawal functionality."),(0,i.kt)("h2",{id:"account-storage"},"Account Storage"),(0,i.kt)("p",null,"Don't trust a users\u2019 ",(0,i.kt)("a",{parentName:"p",href:"language/accounts#account-storage"},"account storage"),". Users have full control over their data and may reorganize it as they see fit. Users may store values in any path, so paths may store values of \u201cunexpected\u201d types. These values may be instances of types in contracts that the user deployed."),(0,i.kt)("p",null,"Always ",(0,i.kt)("a",{parentName:"p",href:"language/capability-based-access-control"},"borrow")," with the specific type that is expected. Or, check if the value is an instance of the expected type."),(0,i.kt)("h2",{id:"auth-accounts"},"Auth Accounts"),(0,i.kt)("p",null,"Access to an ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthAccount")," gives full access to the account's storage, keys, and contracts. Therefore, ",(0,i.kt)("a",{parentName:"p",href:"anti-patterns#avoid-using-authaccount-as-a-function-parameter"},"avoid using AuthAccount")," as a function parameter unless absolutely necessary."),(0,i.kt)("p",null,"It is preferable to use capabilities over direct ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthAccount")," storage when exposing account data. Using capabilities allows the revocation of access by unlinking and limits the access to a single value with a certain set of functionality \u2013 access to an ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthAccount")," gives full access to the whole storage, as well as key and contract management."),(0,i.kt)("h2",{id:"capabilities"},"Capabilities"),(0,i.kt)("p",null,"Don\u2019t store anything under the ",(0,i.kt)("a",{parentName:"p",href:"language/capability-based-access-control"},"public capability storage")," unless strictly required. Anyone can access your public capability using ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthAccount.getCapability"),". If something needs to be stored under ",(0,i.kt)("inlineCode",{parentName:"p"},"/public/"),", make sure only read functionality is provided by restricting its type using either a resource interface or struct interface."),(0,i.kt)("p",null,"When linking a capability, the link might already be present. In that case, Cadence will not panic with a runtime error but the link function will return ",(0,i.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,i.kt)("p",null,"It is a good practice to check if the link already exists with ",(0,i.kt)("inlineCode",{parentName:"p"},"getLinkTarget")," before creating it. This function will return ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," if the link does not exist."),(0,i.kt)("p",null,"If it is necessary to handle the case where borrowing a capability might fail, the ",(0,i.kt)("inlineCode",{parentName:"p"},"account.check")," function can be used to verify that the target exists and has a valid type."),(0,i.kt)("p",null,"Ensure capabilities cannot be accessed by unauthorized parties. For example, capabilities should not be accessible through a public field, including public dictionaries or arrays. Exposing a capability in such a way allows anyone to borrow it and perform all actions that the capability allows."),(0,i.kt)("h2",{id:"transactions"},"Transactions"),(0,i.kt)("p",null,"Audits of Cadence code should also include ",(0,i.kt)("a",{parentName:"p",href:"language/transactions"},"transactions"),", as they may contain arbitrary code, just, like in contracts. In addition, they are given full access to the accounts of the transaction\u2019s signers, i.e. the transaction is allowed to manipulate the signers\u2019 account storage, contracts, and keys."),(0,i.kt)("p",null,"Signing a transaction gives access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthAccount"),", i.e. full access to the account\u2019s storage, keys, and contracts."),(0,i.kt)("p",null,"Do not blindly sign a transaction. The transaction could for example change deployed contracts by upgrading them with malicious statements, revoking or adding keys, transferring resources from storage, etc."),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"language/restricted-types"},"restricted types and interfaces"),". Always use the most specific type possible, following the principle of least privilege. Types should always be as restrictive as possible, especially for resource types."),(0,i.kt)("p",null,"If given a less-specific type, cast to the more specific type that is expected. For example, when implementing the fungible token standard, a user may deposit any fungible token, so the implementation should cast to the expected concrete fungible token type."),(0,i.kt)("h2",{id:"access-control"},"Access Control"),(0,i.kt)("p",null,"Declaring a field as ",(0,i.kt)("a",{parentName:"p",href:"language/access-control"},(0,i.kt)("inlineCode",{parentName:"a"},"pub/access(all)"))," only protects from replacing the field\u2019s value, but the value itself can still be mutated if it is mutable. Remember that containers, like dictionaries, and arrays, are mutable."),(0,i.kt)("p",null,"Prefer non-public access to a mutable state. That state may also be nested. For example, a child may still be mutated even if its parent exposes it through a field with non-settable access."),(0,i.kt)("p",null,"Do not use the ",(0,i.kt)("inlineCode",{parentName:"p"},"pub/access(all)")," modifier on fields and functions unless necessary. Prefer ",(0,i.kt)("inlineCode",{parentName:"p"},"priv/access(self)"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"access(contract)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"access(account)")," when other types in the contract or account need to have access."))}d.isMDXComponent=!0}}]);