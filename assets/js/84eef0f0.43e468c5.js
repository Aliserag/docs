"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3956],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>y});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,y=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(y,l(l({ref:n},s),{},{components:t})):a.createElement(y,l({ref:n},s))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[u]="string"==typeof e?e:r,l[1]=p;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},43475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={title:"Type Safety"},l=void 0,p={unversionedId:"cadence/language/type-safety",id:"cadence/language/type-safety",title:"Type Safety",description:"The Cadence programming language is a type-safe language.",source:"@site/docs/cadence/language/type-safety.md",sourceDirName:"cadence/language",slug:"/cadence/language/type-safety",permalink:"/cadence/language/type-safety",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618007,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{title:"Type Safety"},sidebar:"tutorialSidebar",previous:{title:"Type Inference",permalink:"/cadence/language/type-inference"},next:{title:"Values and Types",permalink:"/cadence/language/values-and-types"}},i={},c=[],s={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Cadence programming language is a ",(0,r.kt)("em",{parentName:"p"},"type-safe")," language."),(0,r.kt)("p",null,"When assigning a new value to a variable, the value must be the same type as the variable.\nFor example, if a variable has type ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool"),",\nit can ",(0,r.kt)("em",{parentName:"p"},"only")," be assigned a value that has type ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool"),",\nand not for example a value that has type ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a variable that has type `Bool`.\nvar a = true\n\n// Invalid: cannot assign a value that has type `Int` to a variable which has type `Bool`.\n//\na = 0\n")),(0,r.kt)("p",null,"When passing arguments to a function,\nthe types of the values must match the function parameters' types.\nFor example, if a function expects an argument that has type ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool"),",\n",(0,r.kt)("em",{parentName:"p"},"only")," a value that has type ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool")," can be provided,\nand not for example a value which has type ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun nand(_ a: Bool, _ b: Bool): Bool {\n    return !(a && b)\n}\n\nnand(false, false)  // is `true`\n\n// Invalid: The arguments of the function calls are integers and have type `Int`,\n// but the function expects parameters booleans (type `Bool`).\n//\nnand(0, 0)\n")),(0,r.kt)("p",null,"Types are ",(0,r.kt)("strong",{parentName:"p"},"not")," automatically converted.\nFor example, an integer is not automatically converted to a boolean,\nnor is an ",(0,r.kt)("inlineCode",{parentName:"p"},"Int32")," automatically converted to an ",(0,r.kt)("inlineCode",{parentName:"p"},"Int8"),",\nnor is an optional integer ",(0,r.kt)("inlineCode",{parentName:"p"},"Int?"),"\nautomatically converted to a non-optional integer ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),",\nor vice-versa."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun add(_ a: Int8, _ b: Int8): Int8 {\n    return a + b\n}\n\n// The arguments are not declared with a specific type, but they are inferred\n// to be `Int8` since the parameter types of the function `add` are `Int8`.\nadd(1, 2)  // is `3`\n\n// Declare two constants which have type `Int32`.\n//\nlet a: Int32 = 3_000_000_000\nlet b: Int32 = 3_000_000_000\n\n// Invalid: cannot pass arguments which have type `Int32` to parameters which have type `Int8`.\n//\nadd(a, b)\n")))}d.isMDXComponent=!0}}]);