"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1757],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},30982:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={},i="Cadence Generation",l={unversionedId:"tools/nft-catalog/cadence-generation",id:"tools/nft-catalog/cadence-generation",title:"Cadence Generation",description:"Using the NFT Catalog, you can generate common scripts and transactions to be run against the Flow Blockchain to support your application.",source:"@site/docs/tools/nft-catalog/cadence-generation.mdx",sourceDirName:"tools/nft-catalog",slug:"/tools/nft-catalog/cadence-generation",permalink:"/tools/nft-catalog/cadence-generation",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682540899,formattedLastUpdatedAt:"Apr 26, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"types",permalink:"/tools/flow-js-testing/types"},next:{title:"Composability Chronicles #2: How to build a new experience on top of NFTs with Flowcase",permalink:"/tools/nft-catalog/composability-flowcase-guide"}},c={},s=[{value:"How-to generate scripts and transactions",id:"how-to-generate-scripts-and-transactions",level:2},{value:"From JavaScript",id:"from-javascript",level:3},{value:"Installation",id:"installation",level:4},{value:"Usage",id:"usage",level:4},{value:"From non-javascript environments",id:"from-non-javascript-environments",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cadence-generation"},"Cadence Generation"),(0,o.kt)("p",null,"Using the NFT Catalog, you can generate common scripts and transactions to be run against the Flow Blockchain to support your application."),(0,o.kt)("h2",{id:"how-to-generate-scripts-and-transactions"},"How-to generate scripts and transactions"),(0,o.kt)("h3",{id:"from-javascript"},"From JavaScript"),(0,o.kt)("h4",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm install @onflow/fcl\nnpm install flow-catalog\n")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add @onflow/fcl\nyarn add flow-catalog\n")),(0,o.kt)("h4",{id:"usage"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"1. Retrieve a list of transactions available for code generation:"),"\nNOTE: In order to properly bootstrap the method, you will need to run and ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"getAddressMaps()")," method, passing it into all of the methods as shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import { getAddressMaps, scripts } from "flow-catalog";\nimport * as fcl from "@onflow/fcl"\n\nconst main = async () => {\n    const addressMap = await getAddressMaps();\n    console.log(await scripts.getSupportedGeneratedTransactions(addressMap));\n};\n\nmain();\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"2. Provide a Catalog collection identifier to generate code")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const getTemplatedTransactionCode = async function() {\n  const catalogAddressMap = await getAddressMaps()\n  const result = await cadence.scripts.genTx({\n\n    /*\n        'CollectionInitialization' is one of the available transactions from step 1.\n        'Flunks' is the collection identifier in this case\n        'Flow' is a fungible token identifier (if applicable to the transaction being used)\n    */\n\n    args: ['CollectionInitialization', 'Flunks', 'flow'],\n    addressMap: catalogAddressMap\n  })\n  return result\n}\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"3. Use the generated code in a transaction")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const txId = await fcl.mutate({\n  cadence: await getTemplatedTransactionCode()[0],\n  limit: 9999,\n  args: (arg: any, t: any) => []\n});\nconst transaction = await fcl.tx(txId).onceSealed()\nreturn transaction\n")),(0,o.kt)("h3",{id:"from-non-javascript-environments"},"From non-javascript environments"),(0,o.kt)("p",null,"Cadence scripts and transactions can be generated directly on-chain via scripts. You will need to be able to run cadence scripts to continue."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"1. Retrieve a list of transactions available for code generation")),(0,o.kt)("p",null,"Run the following script to retrieve available code generation methods: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dapperlabs/nft-catalog/blob/main/cadence/scripts/get_supported_generated_transactions.cdc"},"https://github.com/dapperlabs/nft-catalog/blob/main/cadence/scripts/get_supported_generated_transactions.cdc")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"2. Provide a catalog collection identifier to generate code")),(0,o.kt)("p",null,"You may use the following script to generate code: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dapperlabs/nft-catalog/blob/main/cadence/scripts/gen_tx.cdc"},"https://github.com/dapperlabs/nft-catalog/blob/main/cadence/scripts/gen_tx.cdc")),(0,o.kt)("p",null,"For example, from the CLI this may be run like the following:\n",(0,o.kt)("inlineCode",{parentName:"p"},"flow -n mainnet scripts execute ./get_tx.cdc CollectionInitialization Flunks flow")),(0,o.kt)("p",null,"In the above example, ",(0,o.kt)("inlineCode",{parentName:"p"},"CollectionInitialization")," is one of the supported transactions returned from step 1, ",(0,o.kt)("inlineCode",{parentName:"p"},"Flunks")," is the name of an entry on the catalog (",(0,o.kt)("a",{parentName:"p",href:"https://www.flow-nft-catalog.com/catalog/mainnet/Flunks"},"https://www.flow-nft-catalog.com/catalog/mainnet/Flunks"),"), and ",(0,o.kt)("inlineCode",{parentName:"p"},"flow")," is a fungible token identifier."))}u.isMDXComponent=!0}}]);