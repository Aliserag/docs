"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1381],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),k=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=k(e.components);return a.createElement(d.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=k(n),u=r,h=s["".concat(d,".").concat(u)]||s[u]||m[u]||l;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[s]="string"==typeof e?e:r,o[1]=i;for(var k=2;k<l;k++)o[k]=n[k];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},35393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>k});var a=n(87462),r=(n(67294),n(3905));const l={title:"Query Staking Info with Scripts or Events",sidebar_title:"Staking Scripts and Events"},o="Introduction",i={unversionedId:"nodes/staking/staking-scripts-events",id:"nodes/staking/staking-scripts-events",title:"Query Staking Info with Scripts or Events",description:"The staking contract stores a lot of different state, and the state is constantly changing.",source:"@site/docs/nodes/staking/staking-scripts-events.md",sourceDirName:"nodes/staking",slug:"/nodes/staking/staking-scripts-events",permalink:"/docs/nodes/staking/staking-scripts-events",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682709251,formattedLastUpdatedAt:"Apr 28, 2023",frontMatter:{title:"Query Staking Info with Scripts or Events",sidebar_title:"Staking Scripts and Events"},sidebar:"tutorialSidebar",previous:{title:"Staking and Delegation rewards",permalink:"/docs/nodes/staking/staking-rewards"},next:{title:"Staking Auction",permalink:"/docs/nodes/staking/technical-overview"}},d={},k=[{value:"Get the list of proposed nodes for the next epoch:",id:"get-the-list-of-proposed-nodes-for-the-next-epoch",level:2},{value:"Get the list of all nodes that are currently staked:",id:"get-the-list-of-all-nodes-that-are-currently-staked",level:2},{value:"Get all of the info associated with a single node staker:",id:"get-all-of-the-info-associated-with-a-single-node-staker",level:2},{value:"Get the total committed balance of a node (with delegators):",id:"get-the-total-committed-balance-of-a-node-with-delegators",level:2},{value:"Get the total committed balance of a node (without delegators):",id:"get-the-total-committed-balance-of-a-node-without-delegators",level:2},{value:"Get all the info associated with a single delegator:",id:"get-all-the-info-associated-with-a-single-delegator",level:2},{value:"Get the delegation cut percentage:",id:"get-the-delegation-cut-percentage",level:2},{value:"Get the minimum stake requirements:",id:"get-the-minimum-stake-requirements",level:2},{value:"Get the total weekly reward payout:",id:"get-the-total-weekly-reward-payout",level:2},{value:"Get the total FLOW staked:",id:"get-the-total-flow-staked",level:2},{value:"Get the total FLOW staked by all the nodes of a single node role:",id:"get-the-total-flow-staked-by-all-the-nodes-of-a-single-node-role",level:2},{value:"Global Staking and Epoch Events",id:"global-staking-and-epoch-events",level:2},{value:"NewEpoch",id:"newepoch",level:3},{value:"NewWeeklyPayout",id:"newweeklypayout",level:3},{value:"NewStakingMinimums",id:"newstakingminimums",level:3},{value:"NewDelegatorCutPercentage",id:"newdelegatorcutpercentage",level:3},{value:"Node Events",id:"node-events",level:2},{value:"NewNodeCreated",id:"newnodecreated",level:3},{value:"NodeRemovedAndRefunded",id:"noderemovedandrefunded",level:3},{value:"Token Events",id:"token-events",level:2},{value:"TokensCommitted",id:"tokenscommitted",level:3},{value:"TokensStaked",id:"tokensstaked",level:3},{value:"TokensUnstaking",id:"tokensunstaking",level:3},{value:"TokensUnstaked",id:"tokensunstaked",level:3},{value:"RewardsPaid",id:"rewardspaid",level:3},{value:"UnstakedTokensWithdrawn",id:"unstakedtokenswithdrawn",level:3},{value:"RewardTokensWithdrawn",id:"rewardtokenswithdrawn",level:3},{value:"Delegator Events",id:"delegator-events",level:2},{value:"NewDelegatorCreated",id:"newdelegatorcreated",level:3},{value:"DelegatorTokensCommitted",id:"delegatortokenscommitted",level:3},{value:"DelegatorTokensStaked",id:"delegatortokensstaked",level:3},{value:"DelegatorTokensUnstaking",id:"delegatortokensunstaking",level:3},{value:"DelegatorTokensUnstaked",id:"delegatortokensunstaked",level:3},{value:"DelegatorRewardsPaid",id:"delegatorrewardspaid",level:3},{value:"DelegatorUnstakedTokensWithdrawn",id:"delegatorunstakedtokenswithdrawn",level:3},{value:"DelegatorRewardTokensWithdrawn",id:"delegatorrewardtokenswithdrawn",level:3}],p={toc:k},s="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The staking contract stores a lot of different state, and the state is constantly changing.\nAs an external party, there are two ways to keep track of these state changes.\nYou can either use Cadence scripts to query the state of the contract at any given time,\nor you can monitor events that are emitted by the staking contract to be notified of any important occurances."),(0,r.kt)("h1",{id:"query-information-with-scripts"},"Query Information with Scripts"),(0,r.kt)("h2",{id:"get-the-list-of-proposed-nodes-for-the-next-epoch"},"Get the list of proposed nodes for the next epoch:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.getProposedNodeIDs()"),": Returns an array of node IDs for proposed nodes.\nProposed nodes are nodes that have enough staked and committed for the next epoch to be above the minimum requirement."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get Proposed Table"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.05"),") script for retrieving this info."),(0,r.kt)("p",null,"This script requires no arguments."),(0,r.kt)("h2",{id:"get-the-list-of-all-nodes-that-are-currently-staked"},"Get the list of all nodes that are currently staked:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.getStakedNodeIDs()"),": Returns an array of nodeIDs that are currently staked.\nStaked nodes are nodes that currently have staked tokens above the minimum."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get Current Table"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.04"),") script for retrieving this info."),(0,r.kt)("p",null,"This script requires no arguments."),(0,r.kt)("h2",{id:"get-all-of-the-info-associated-with-a-single-node-staker"},"Get all of the info associated with a single node staker:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeInfo(nodeID: String)"),": Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeInfo")," struct with all of the metadata\nassociated with the specified node ID. You can see the ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeInfo")," definition in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/flow-core-contracts/blob/master/contracts/FlowIDTableStaking.cdc#L264"},"FlowIDTableStaking\nsmart contract.")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get Node Info"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.08"),") script\nwith the following arguments:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"nodeID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"The node ID of the node to search for.")))),(0,r.kt)("p",null,"You can also query the info from an address by using the ",(0,r.kt)("strong",{parentName:"p"},"Get Node Info From Address"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.26"),") script\nwith the following arguments:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the account that manages the node.")))),(0,r.kt)("h2",{id:"get-the-total-committed-balance-of-a-node-with-delegators"},"Get the total committed balance of a node (with delegators):"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeInfo(_ nodeID: String).totalCommittedWithDelegators()"),": Returns the total committed balance for a node,\nwhich is their total tokens staked + committed, plus all of the staked + committed tokens of all their delegators."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get Node Total Commitment"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.09"),") script\nwith the following argument:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"nodeID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"The node ID of the node to search for.")))),(0,r.kt)("h2",{id:"get-the-total-committed-balance-of-a-node-without-delegators"},"Get the total committed balance of a node (without delegators):"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeInfo(_ nodeID: String).totalCommittedWithoutDelegators()"),": Returns the total committed balance for a node,\nwhich is their total tokens staked + committed, plus all of the staked + committed tokens of all their delegators."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get Only Node Total Commitment"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.09"),") script\nwith the following argument:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"nodeID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"The node ID of the node to search for.")))),(0,r.kt)("h2",{id:"get-all-the-info-associated-with-a-single-delegator"},"Get all the info associated with a single delegator:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.DelegatorInfo(nodeID: String, delegatorID: UInt32)"),": Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegatorInfo")," struct with all of the metadata\nassociated with the specified node ID and delegator ID. You can see the ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegatorInfo")," definition in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/flow-core-contracts/blob/master/contracts/FlowIDTableStaking.cdc#L348"},"FlowIDTableStaking\nsmart contract.")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get Delegator Info"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.10"),")\nscript with the following arguments:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"nodeID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"The node ID that the delegator delegates to.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"delegatorID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the delegator to search for.")))),(0,r.kt)("p",null,"You can also query the info from an address by using the ",(0,r.kt)("strong",{parentName:"p"},"Get Delegator Info From Address"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.27"),") script\nwith the following arguments:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Address")),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the account that manages the delegator.")))),(0,r.kt)("h2",{id:"get-the-delegation-cut-percentage"},"Get the delegation cut percentage:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.getRewardCutPercentage(): UFix64"),": Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"UFix64")," number for the cut of delegator rewards that each node operator takes."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get Cut Percentage"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.01"),") script to retrieve this info."),(0,r.kt)("p",null,"This script requires no arguments."),(0,r.kt)("h2",{id:"get-the-minimum-stake-requirements"},"Get the minimum stake requirements:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.getMinimumStakeRequirements(): {UInt8: UFix64}"),": Returns a mapping\nfor the stake requirements for each node type."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get stake requirements"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.02"),") script to retrieve this info."),(0,r.kt)("p",null,"This script requires no arguments."),(0,r.kt)("h2",{id:"get-the-total-weekly-reward-payout"},"Get the total weekly reward payout:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.getEpochTokenPayout(): UFix64"),": Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"UFix64")," value for the total number of FLOW paid out each epoch (week)."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get weekly payout"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.03"),") script to retrieve this info."),(0,r.kt)("p",null,"This script requires no arguments."),(0,r.kt)("h2",{id:"get-the-total-flow-staked"},"Get the total FLOW staked:"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get total FLOW staked"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.06"),") script to retrieve this info."),(0,r.kt)("p",null,"This script requires no arguments."),(0,r.kt)("h2",{id:"get-the-total-flow-staked-by-all-the-nodes-of-a-single-node-role"},"Get the total FLOW staked by all the nodes of a single node role:"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("strong",{parentName:"p"},"Get total FLOW staked by node type"),"(",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/staking-contract-reference/#getting-staking-info"},"SC.07"),") script\nwith the following arguments:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"nodeType")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UInt8")),(0,r.kt)("td",{parentName:"tr",align:null},"The type of node to search for.")))),(0,r.kt)("h1",{id:"staking-events"},"Staking Events"),(0,r.kt)("p",null,"Staking events can be queried using the Go or JavaScript SDKs to extract useful notifications and information about the\nstate of the staking process."),(0,r.kt)("h2",{id:"global-staking-and-epoch-events"},"Global Staking and Epoch Events"),(0,r.kt)("h3",{id:"newepoch"},"NewEpoch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event NewEpoch(totalStaked: UFix64, totalRewardPayout: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"totalStaked"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The total number of tokens staked for the new Epoch")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"totalRewardPayout"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The total number of tokens that will be paid as rewards for this epoch")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.moveTokens()")," when the tokens are moved between pools, which signals a new epoch."),(0,r.kt)("h3",{id:"newweeklypayout"},"NewWeeklyPayout"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event NewWeeklyPayout(newPayout: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newPayout"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The new number of tokens that will be paid at the end of the epoch")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.setEpochTokenPayout()")," when the Admin changes the total tokens paid at the end of the epoch."),(0,r.kt)("p",null,"After this event the ",(0,r.kt)("inlineCode",{parentName:"p"},"epochTokenPayout")," is equal to the new value."),(0,r.kt)("h3",{id:"newstakingminimums"},"NewStakingMinimums"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pub event NewStakingMinimums(newMinimums: {UInt8: UFix64})")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newRequirements"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{UInt8: UFix64}")),(0,r.kt)("td",{parentName:"tr",align:null},"The new minimum staking requirements for all the node types.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.setMinimumStakeRequirements()")," when the Admin changes the minimum requirements for node types."),(0,r.kt)("h3",{id:"newdelegatorcutpercentage"},"NewDelegatorCutPercentage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pub event NewDelegatorCutPercentage(newCutPercentage: UFix64)")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newCutPercentage"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The percentage of the delegator reward that goes to node operators.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.setCutPercentage()")," when the Admin changes the percentage of delegator rewards that every node operator takes."),(0,r.kt)("p",null,"Note that the percentage will be more than 0.0 and less than 1.0, with the actual percentage equal to this multiplied by 100."),(0,r.kt)("p",null,"Also note that the percentage is taken from the ",(0,r.kt)("em",{parentName:"p"},"delegator")," reward to go to the ",(0,r.kt)("em",{parentName:"p"},"node operator"),"."),(0,r.kt)("p",null,"After this event the nodeDelegatingRewardCut is equal to the new value."),(0,r.kt)("h2",{id:"node-events"},"Node Events"),(0,r.kt)("p",null,"These are events that concern the operation of a node."),(0,r.kt)("h3",{id:"newnodecreated"},"NewNodeCreated"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event NewNodeCreated(nodeID: String, role: UInt8, amountCommitted: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. Usually the hash of the node's public key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"role"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt8"),(0,r.kt)("td",{parentName:"tr",align:null},"The node's role type. From 1 to 5 inclusive. For the meaning of the values see ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/onflow/flow-core-contracts/blob/master/contracts/FlowIDTableStaking.cdc"},"FlowIDTableStaking.cdc"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amountCommitted"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens staked to register the node. This is determined by the ",(0,r.kt)("inlineCode",{parentName:"td"},"role"),".")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeRecord.init()")," when a new node is successfully created."),(0,r.kt)("p",null,"After this event is emitted for your node, you can begin to perform staking transactions using it."),(0,r.kt)("h3",{id:"noderemovedandrefunded"},"NodeRemovedAndRefunded"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event NodeRemovedAndRefunded(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens returned to the node.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.endStakingAuction()")," if the node is being removed from the next epoch\ndue to a failure to meet the minimum requirements of committed tokens for the next epoch."),(0,r.kt)("p",null,"After this event, the refunded FLOW tokens will be part of the node's ",(0,r.kt)("inlineCode",{parentName:"p"},"tokensUnstaked")," balance."),(0,r.kt)("h2",{id:"token-events"},"Token Events"),(0,r.kt)("p",null,"These are events that concern the direct usage of FLOW tokens - staking or unstaking locked tokens, withdrawing rewards, etc."),(0,r.kt)("p",null,"Events emitted when using delegation are described in the next section."),(0,r.kt)("h3",{id:"tokenscommitted"},"TokensCommitted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensCommitted(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of additional FLOW tokens committed to the node.")))),(0,r.kt)("p",null,"Emitted whenever additional tokens are staked on the node for the following epoch. Specifically:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"By ",(0,r.kt)("inlineCode",{parentName:"li"},"FlowIDTableStaking.NodeStaker.stakeNewTokens()")," when new tokens (tokens that have not previously been staked) are added to the system\nto stake on the node during the next epoch."),(0,r.kt)("li",{parentName:"ol"},"By ",(0,r.kt)("inlineCode",{parentName:"li"},"FlowIDTableStaking.NodeStaker.stakeUnstakedTokens()")," when unstaked tokens (tokens that were previously staked and then unstaked)\nare staked again with the node for the next epoch."),(0,r.kt)("li",{parentName:"ol"},"By ",(0,r.kt)("inlineCode",{parentName:"li"},"FlowIDTableStaking.NodeStaker.stakeRewardedTokens()")," when reward tokens (tokens paid in return for previous staking)\nare staked with the node for the next epoch.")),(0,r.kt)("p",null,"After this event, the FLOW tokens will be part of the node's ",(0,r.kt)("inlineCode",{parentName:"p"},"tokensCommitted")," balance."),(0,r.kt)("h3",{id:"tokensstaked"},"TokensStaked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensStaked(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens staked to the node.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.moveTokens()")," at the end of an epoch if committed tokens are being added to the node's tokensStaked balance."),(0,r.kt)("p",null,"After this event, the tokens will be part of the node's staked balance."),(0,r.kt)("h3",{id:"tokensunstaking"},"TokensUnstaking"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensUnstaking(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens unstaked from the node.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.moveTokens()")," at the end of an epoch if\na node operator's staked tokens are being unstaked in response to a request from the node operator.\nAfter this event, the tokens will be a part of the node operator's ",(0,r.kt)("inlineCode",{parentName:"p"},"tokensUnstaking"),' balance, where they are held for a whole epoch "unstaking period" with no rewards.'),(0,r.kt)("h3",{id:"tokensunstaked"},"TokensUnstaked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event TokensUnstaked(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens unstaked from the node.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeStaker.requestUnstaking()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.moveTokens()"),"\nwhen tokens are deposited into the ",(0,r.kt)("inlineCode",{parentName:"p"},"tokensUnstaked")," pool:"),(0,r.kt)("h3",{id:"rewardspaid"},"RewardsPaid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event RewardsPaid(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens paid to the node this epoch as a reward.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.payRewards()")," at the end of the epoch to pay rewards to node operators based on the tokens that they have staked."),(0,r.kt)("p",null,"After this event, the reward tokens will be part of the node's tokensRewarded balance."),(0,r.kt)("p",null,"The Delegator rewards are paid at the same time, see ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegatorRewardsPaid")," below."),(0,r.kt)("h3",{id:"unstakedtokenswithdrawn"},"UnstakedTokensWithdrawn"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event UnstakedTokensWithdrawn(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of unstaked FLOW tokens that the node operator is withdrawing.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeStaker.withdrawUnstakedTokens()")," when the node operator calls that function to withdraw part or all of their\nunstaked tokens balance."),(0,r.kt)("p",null,"After this event, the FLOW tokens will be withdrawn to a newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"FungibleToken.Vault")," which the caller can deposit to the vault of their choice."),(0,r.kt)("h3",{id:"rewardtokenswithdrawn"},"RewardTokensWithdrawn"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event RewardTokensWithdrawn(nodeID: String, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of rewarded FLOW tokens that the node operator is withdrawing.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeStaker.withdrawRewardedTokens()")," when the node operator calls that function to withdraw part or all of their\nreward tokens balance."),(0,r.kt)("p",null,"After this event, the FLOW tokens will be withdrawn to a newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"FungibleToken.Vault")," which the caller can deposit to the vault of their choice."),(0,r.kt)("h2",{id:"delegator-events"},"Delegator Events"),(0,r.kt)("p",null,"These are events that concern FLOW token delegation."),(0,r.kt)("h3",{id:"newdelegatorcreated"},"NewDelegatorCreated"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event NewDelegatorCreated(nodeID: String, delegatorID: UInt32)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the new delegator. Unique within the node but not globally.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.registerNewDelegator()")," when the node operator registers a new delegator for the node."),(0,r.kt)("p",null,"Note that the delegatorID is unique within the node but is not globally unique."),(0,r.kt)("p",null,"After this event, the new delegator is registered with the node."),(0,r.kt)("h3",{id:"delegatortokenscommitted"},"DelegatorTokensCommitted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event DelegatorTokensCommitted(nodeID: String, delegatorID: UInt32, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the delegator.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of additional FLOW tokens committed to the node.")))),(0,r.kt)("p",null,"Emitted whenever additional tokens are committed for a delegator for the following epoch. Specifically:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"By ",(0,r.kt)("inlineCode",{parentName:"li"},"FlowIDTableStaking.NodeDelegator.delegateNewTokens()")," when new tokens (tokens that have not previously been staked) are added to the system\nto stake with the delegator during the next epoch."),(0,r.kt)("li",{parentName:"ol"},"By ",(0,r.kt)("inlineCode",{parentName:"li"},"FlowIDTableStaking.NodeDelegator.delegateUnstakedTokens()")," when unstaked tokens (tokens that were previously staked and then unstaked)\nare staked again with the delegator for the next epoch."),(0,r.kt)("li",{parentName:"ol"},"By ",(0,r.kt)("inlineCode",{parentName:"li"},"FlowIDTableStaking.NodeDelegator.delegateRewardedTokens()")," when reward tokens (tokens paid in return for previous staking)\nare staked with the delegator for the next epoch.")),(0,r.kt)("p",null,"After this event, the FLOW tokens will be part of the delegator's ",(0,r.kt)("inlineCode",{parentName:"p"},"tokensCommitted")," balance."),(0,r.kt)("h3",{id:"delegatortokensstaked"},"DelegatorTokensStaked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event DelegatorTokensStaked(nodeID: String, delegatorID: UInt32, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the delegator.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens staked to the node.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.moveTokens()")," at the end of an epoch if committed tokens are being added to the delegator's tokensStaked balance."),(0,r.kt)("p",null,"After this event, the tokens will be part of the delegator's staked balance."),(0,r.kt)("h3",{id:"delegatortokensunstaking"},"DelegatorTokensUnstaking"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event DelegatorTokensUnstaking(nodeID: String, delegatorID: UInt32, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the delegator.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens unstaked from the node.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.moveTokens()")," at the end of an epoch if\na delegator's staked tokens are being unstaked in response to a request from the delegator.\nAfter this event, the tokens will be a part of the delegator's ",(0,r.kt)("inlineCode",{parentName:"p"},"tokensUnstaking"),' balance, where they are held for a whole epoch "unstaking period" with no rewards.'),(0,r.kt)("h3",{id:"delegatortokensunstaked"},"DelegatorTokensUnstaked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event DelegatorTokensUnstaked(nodeID: String, delegatorID: UInt32, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the delegator.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of FLOW tokens unstaked from the node.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeDelegator.requestUnstaking()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.moveTokens()"),"\nwhen tokens are deposited into the delegator's ",(0,r.kt)("inlineCode",{parentName:"p"},"tokensUnstaked")," pool:"),(0,r.kt)("h3",{id:"delegatorrewardspaid"},"DelegatorRewardsPaid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event DelegatorRewardsPaid(nodeID: String, delegatorID: UInt32, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the delegator. Unique within the node but not globally.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of rewarded FLOW tokens that the delegator is paid.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.Admin.payRewards()")," at the end of an epoch when rewards are being paid."),(0,r.kt)("p",null,"After this event is emitted, the reward tokens will be part of the delegator's tokensRewarded balance."),(0,r.kt)("p",null,"The Node rewards are paid at the same time, see ",(0,r.kt)("inlineCode",{parentName:"p"},"RewardsPaid")," above."),(0,r.kt)("h3",{id:"delegatorunstakedtokenswithdrawn"},"DelegatorUnstakedTokensWithdrawn"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event DelegatorUnstakedTokensWithdrawn(nodeID: String, delegatorID: UInt32, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the delegator. Unique within the node but not globally.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of unstaked FLOW tokens that the delegator is withdrawing.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeDelegator.withdrawUnstakedTokens()")," when the delegator calls that function to withdraw part or all of their\nunstaked tokens balance."),(0,r.kt)("p",null,"After this event, the FLOW tokens will be withdrawn to a newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"FungibleToken.Vault")," which the caller can deposit to the vault of their choice."),(0,r.kt)("h3",{id:"delegatorrewardtokenswithdrawn"},"DelegatorRewardTokensWithdrawn"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event DelegatorRewardTokensWithdrawn(nodeID: String, delegatorID: UInt32, amount: UFix64)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ID string for the node. 32 bytes. The same value emitted in the ",(0,r.kt)("inlineCode",{parentName:"td"},"NewNodeCreated")," event for the node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegatorID"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for the delegator. Unique within the node but not globally.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"UFix64"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of rewarded FLOW tokens that the delegator is withdrawing.")))),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeDelegator.withdrawRewardedTokens()")," when the delegator calls that function to withdraw part or all of their\nunstaked tokens balance."),(0,r.kt)("p",null,"After this event, the FLOW tokens will be withdrawn to a newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"FungibleToken.Vault")," which the caller can deposit to the vault of their choice."))}m.isMDXComponent=!0}}]);