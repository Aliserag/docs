"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4695],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,h=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return t?a.createElement(h,u(u({ref:n},c),{},{components:t})):a.createElement(h,u({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,u=new Array(o);u[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[m]="string"==typeof e?e:r,u[1]=l;for(var s=2;s<o;s++)u[s]=t[s];return a.createElement.apply(null,u)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},91234:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const o={title:"Enumerations"},u=void 0,l={unversionedId:"cadence/language/enumerations",id:"cadence/language/enumerations",title:"Enumerations",description:"Enumerations are sets of symbolic names bound to unique, constant values,",source:"@site/docs/cadence/language/enumerations.md",sourceDirName:"cadence/language",slug:"/cadence/language/enumerations",permalink:"/cadence/language/enumerations",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618386,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{title:"Enumerations"},sidebar:"tutorialSidebar",previous:{title:"Crypto",permalink:"/cadence/language/crypto"},next:{title:"Environment Information",permalink:"/cadence/language/environment-information"}},i={},s=[{value:"Enum Declaration",id:"enum-declaration",level:2}],c={toc:s},m="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Enumerations are sets of symbolic names bound to unique, constant values,\nwhich can be compared by identity."),(0,r.kt)("h2",{id:"enum-declaration"},"Enum Declaration"),(0,r.kt)("p",null,"Enums are declared using the ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," keyword,\nfollowed by the name of the enum, the raw type after a colon,\nand the requirements, which must be enclosed in opening and closing braces."),(0,r.kt)("p",null,"The raw type must be an integer subtype, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Int128"),"."),(0,r.kt)("p",null,"Enum cases are declared using the ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," keyword,\nfollowed by the name of the enum case."),(0,r.kt)("p",null,"Enum cases must be unique.\nEach enum case has a raw value, the index of the case in all cases."),(0,r.kt)("p",null,"The raw value of an enum case can be accessed through the ",(0,r.kt)("inlineCode",{parentName:"p"},"rawValue")," field."),(0,r.kt)("p",null,"The enum cases can be accessed by using the name as a field on the enum,\nor by using the enum constructor,\nwhich requires providing the raw value as an argument.\nThe enum constructor returns the enum case with the given raw value,\nif any, or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," if no such case exists."),(0,r.kt)("p",null,"Enum cases can be compared using the equality operators ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"!="),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an enum named `Color` which has the raw value type `UInt8`,\n// and declare three enum cases: `red`, `green`, and `blue`\n//\npub enum Color: UInt8 {\n    pub case red\n    pub case green\n    pub case blue\n}\n// Declare a variable which has the enum type `Color` and initialize\n// it to the enum case `blue` of the enum\nlet blue: Color = Color.blue\n// Get the raw value of the enum case `blue`.\n// As it is the third case, so it has index 2\n//\nblue.rawValue // is `2`\n// Get the `green` enum case of the enum `Color` by using the enum\n// constructor and providing the raw value of the enum case `green`, 1,\n// as the enum case `green` is the second case, so it has index 1\n//\nlet green: Color? = Color(rawValue: 1)  // is `Color.green`\n// Get the enum case of the enum `Color` that has the raw value 5.\n// As there are only three cases, the maximum raw value / index is 2.\n//\nlet nothing = Color(rawValue: 5)  // is `nil`\n// Enum cases can be compared\nColor.red == Color.red  // is `true`\nColor(rawValue: 1) == Color.green  // is `true`\n// Different enum cases are not the same\nColor.red != Color.blue  // is `true`\n")))}p.isMDXComponent=!0}}]);