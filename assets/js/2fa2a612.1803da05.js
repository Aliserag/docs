"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[74611],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},63832:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={title:"Values and Types"},l=void 0,o={unversionedId:"cadence/language/values-and-types",id:"cadence/language/values-and-types",title:"Values and Types",description:"Values are objects, like for example booleans, integers, or arrays.",source:"@site/docs/cadence/language/values-and-types.mdx",sourceDirName:"cadence/language",slug:"/cadence/language/values-and-types",permalink:"/docs/next/cadence/language/values-and-types",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1683049658,formattedLastUpdatedAt:"May 2, 2023",frontMatter:{title:"Values and Types"},sidebar:"tutorialSidebar",previous:{title:"Type Safety",permalink:"/docs/next/cadence/language/type-safety"},next:{title:"Measuring Time In Cadence",permalink:"/docs/next/cadence/measuring-time"}},s={},p=[{value:"Booleans",id:"booleans",level:2},{value:"Numeric Literals",id:"numeric-literals",level:2},{value:"Integers",id:"integers",level:2},{value:"Integer Functions",id:"integer-functions",level:3},{value:"Fixed-Point Numbers",id:"fixed-point-numbers",level:2},{value:"Fixed-Point Number Functions",id:"fixed-point-number-functions",level:3},{value:"Minimum and maximum values",id:"minimum-and-maximum-values",level:2},{value:"Saturation Arithmetic",id:"saturation-arithmetic",level:2},{value:"Floating-Point Numbers",id:"floating-point-numbers",level:2},{value:"Addresses",id:"addresses",level:2},{value:"Address Functions",id:"address-functions",level:3},{value:"AnyStruct and AnyResource",id:"anystruct-and-anyresource",level:2},{value:"Optionals",id:"optionals",level:2},{value:"Never",id:"never",level:2},{value:"Strings and Characters",id:"strings-and-characters",level:2},{value:"String Fields and Functions",id:"string-fields-and-functions",level:3},{value:"Character Fields and Functions",id:"character-fields-and-functions",level:3},{value:"Arrays",id:"arrays",level:2},{value:"Array Types",id:"array-types",level:3},{value:"Array Indexing",id:"array-indexing",level:3},{value:"Array Fields and Functions",id:"array-fields-and-functions",level:3},{value:"Variable-size Array Functions",id:"variable-size-array-functions",level:4},{value:"Dictionaries",id:"dictionaries",level:2},{value:"Dictionary Types",id:"dictionary-types",level:3},{value:"Dictionary Access",id:"dictionary-access",level:3},{value:"Dictionary Fields and Functions",id:"dictionary-fields-and-functions",level:3},{value:"Dictionary Keys",id:"dictionary-keys",level:3}],c=(m="Callout",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const d={toc:p},u="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Values are objects, like for example booleans, integers, or arrays.\nValues are typed."),(0,r.kt)("h2",{id:"booleans"},"Booleans"),(0,r.kt)("p",null,"The two boolean values ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," have the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool"),"."),(0,r.kt)("h2",{id:"numeric-literals"},"Numeric Literals"),(0,r.kt)("p",null,"Numbers can be written in various bases. Numbers are assumed to be decimal by default.\nNon-decimal literals have a specific prefix."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Numeral system"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Prefix"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Characters"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Decimal")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:"left"},"one or more numbers (",(0,r.kt)("inlineCode",{parentName:"td"},"0")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"9"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Binary")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"0b")),(0,r.kt)("td",{parentName:"tr",align:"left"},"one or more zeros or ones (",(0,r.kt)("inlineCode",{parentName:"td"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"1"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Octal")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"0o")),(0,r.kt)("td",{parentName:"tr",align:"left"},"one or more numbers in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"0")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"7"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Hexadecimal")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"0x")),(0,r.kt)("td",{parentName:"tr",align:"left"},"one or more numbers, or characters ",(0,r.kt)("inlineCode",{parentName:"td"},"a")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"f"),", lowercase or uppercase")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// A decimal number\n//\n1234567890  // is `1234567890`\n\n// A binary number\n//\n0b101010  // is `42`\n\n// An octal number\n//\n0o12345670  // is `2739128`\n\n// A hexadecimal number\n//\n0x1234567890ABCabc  // is `1311768467294898876`\n\n// Invalid: unsupported prefix 0z\n//\n0z0\n\n// A decimal number with leading zeros. Not an octal number!\n00123 // is `123`\n\n// A binary number with several trailing zeros.\n0b001000  // is `8`\n")),(0,r.kt)("p",null,"Decimal numbers may contain underscores (",(0,r.kt)("inlineCode",{parentName:"p"},"_"),") to logically separate components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let largeNumber = 1_000_000\n\n// Invalid: Value is not a number literal, but a variable.\nlet notNumber = _123\n")),(0,r.kt)("p",null,"Underscores are allowed for all numeral systems."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let binaryNumber = 0b10_11_01\n")),(0,r.kt)("h2",{id:"integers"},"Integers"),(0,r.kt)("p",null,"Integers are numbers without a fractional part.\nThey are either ",(0,r.kt)("em",{parentName:"p"},"signed")," (positive, zero, or negative)\nor ",(0,r.kt)("em",{parentName:"p"},"unsigned")," (positive or zero)."),(0,r.kt)("p",null,"Signed integer types which check for overflow and underflow have an ",(0,r.kt)("inlineCode",{parentName:"p"},"Int")," prefix\nand can represent values in the following ranges:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Int8")),": -2^7 through 2^7 \u2212 1 (-128 through 127)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Int16")),": -2^15 through 2^15 \u2212 1 (-32768 through 32767)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Int32")),": -2^31 through 2^31 \u2212 1 (-2147483648 through 2147483647)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Int64")),": -2^63 through 2^63 \u2212 1 (-9223372036854775808 through 9223372036854775807)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Int128")),": -2^127 through 2^127 \u2212 1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Int256")),": -2^255 through 2^255 \u2212 1")),(0,r.kt)("p",null,"Unsigned integer types which check for overflow and underflow have a ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt")," prefix\nand can represent values in the following ranges:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"UInt8")),": 0 through 2^8 \u2212 1 (255)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"UInt16")),": 0 through 2^16 \u2212 1 (65535)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"UInt32")),": 0 through 2^32 \u2212 1 (4294967295)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"UInt64")),": 0 through 2^64 \u2212 1 (18446744073709551615)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"UInt128")),": 0 through 2^128 \u2212 1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"UInt256")),": 0 through 2^256 \u2212 1")),(0,r.kt)("p",null,"Unsigned integer types which do ",(0,r.kt)("strong",{parentName:"p"},"not")," check for overflow and underflow,\ni.e. wrap around, have the ",(0,r.kt)("inlineCode",{parentName:"p"},"Word")," prefix\nand can represent values in the following ranges:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Word8")),": 0 through 2^8 \u2212 1 (255)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Word16")),": 0 through 2^16 \u2212 1 (65535)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Word32")),": 0 through 2^32 \u2212 1 (4294967295)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Word64")),": 0 through 2^64 \u2212 1 (18446744073709551615)")),(0,r.kt)("p",null,"The types are independent types, i.e. not subtypes of each other."),(0,r.kt)("p",null,"See the section about ",(0,r.kt)("a",{parentName:"p",href:"operators#arithmetic-operators"},"arithmetic operators")," for further\ninformation about the behavior of the different integer types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant that has type `UInt8` and the value 10.\nlet smallNumber: UInt8 = 10\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Invalid: negative literal cannot be used as an unsigned integer\n//\nlet invalidNumber: UInt8 = -10\n")),(0,r.kt)("p",null,"In addition, the arbitrary precision integer type ",(0,r.kt)("inlineCode",{parentName:"p"},"Int")," is provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let veryLargeNumber: Int = 10000000000000000000000000000000\n")),(0,r.kt)("p",null,"Integer literals are ",(0,r.kt)("a",{parentName:"p",href:"type-inference"},"inferred")," to have type ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),",\nor if the literal occurs in a position that expects an explicit type,\ne.g. in a variable declaration with an explicit type annotation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let someNumber = 123\n\n// `someNumber` has type `Int`\n")),(0,r.kt)("p",null,"Negative integers are encoded in two's complement representation."),(0,r.kt)("p",null,"Integer types are not converted automatically. Types must be explicitly converted,\nwhich can be done by calling the constructor of the type with the integer type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let x: Int8 = 1\nlet y: Int16 = 2\n\n// Invalid: the types of the operands, `Int8` and `Int16` are incompatible.\nlet z = x + y\n\n// Explicitly convert `x` from `Int8` to `Int16`.\nlet a = Int16(x) + y\n\n// `a` has type `Int16`\n\n// Invalid: The integer literal is expected to be of type `Int8`,\n// but the large integer literal does not fit in the range of `Int8`.\n//\nlet b = x + 1000000000000000000000000\n")),(0,r.kt)("h3",{id:"integer-functions"},"Integer Functions"),(0,r.kt)("p",null,"Integers have multiple built-in functions you can use."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toString(): String\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the string representation of the integer."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let answer = 42\n\nanswer.toString()  // is "42"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toBigEndianBytes(): [UInt8]\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the byte array representation (",(0,r.kt)("inlineCode",{parentName:"p"},"[UInt8]"),") in big-endian order of the integer."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let largeNumber = 1234567890\n\nlargeNumber.toBigEndianBytes()  // is `[73, 150, 2, 210]`\n")))),(0,r.kt)("p",null,"All integer types support the following functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun T.fromString(_ input: String): T?\n")),(0,r.kt)("p",{parentName:"li"},"   Attempts to parse an integer value from a base-10 encoded string, returning ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," if the string is invalid."),(0,r.kt)("p",{parentName:"li"},"   For a given integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T.fromString(n.toString())")," is equivalent to wrapping ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," up in an ",(0,r.kt)("a",{parentName:"p",href:"#optionals"},"optional"),"."),(0,r.kt)("p",{parentName:"li"},"   Strings are invalid if:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"}," - they contain non-digit characters\n - they don't fit in the target type\n")),(0,r.kt)("p",{parentName:"li"},"   For signed integer types like ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),", the string may optionally begin with ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-")," sign prefix."),(0,r.kt)("p",{parentName:"li"},"   For unsigned integer types like ",(0,r.kt)("inlineCode",{parentName:"p"},"Word64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt64"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt"),", sign prefices are not allowed."),(0,r.kt)("p",{parentName:"li"},"   Examples:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let fortyTwo: Int64? = Int64.fromString("42") // ok\n\nlet twenty: UInt? = UInt.fromString("20") // ok\n\nlet nilWord: Word8? = Word8.fromString("1024") // nil, out of bounds\n\nlet negTwenty: Int? = Int.fromString("-20") // ok\n')))),(0,r.kt)("h2",{id:"fixed-point-numbers"},"Fixed-Point Numbers"),(0,r.kt)(c,{type:"info",mdxType:"Callout"},(0,r.kt)("p",null,"\ud83d\udea7 Status: Currently only the 64-bit wide ",(0,r.kt)("inlineCode",{parentName:"p"},"Fix64")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"UFix64")," types are available.\nMore fixed-point number types will be added in a future release.")),(0,r.kt)("p",null,"Fixed-point numbers are useful for representing fractional values.\nThey have a fixed number of digits after decimal point."),(0,r.kt)("p",null,"They are essentially integers which are scaled by a factor.\nFor example, the value 1.23 can be represented as 1230 with a scaling factor of 1/1000.\nThe scaling factor is the same for all values of the same type\nand stays the same during calculations."),(0,r.kt)("p",null,"Fixed-point numbers in Cadence have a scaling factor with a power of 10, instead of a power of 2,\ni.e. they are decimal, not binary."),(0,r.kt)("p",null,"Signed fixed-point number types have the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"Fix"),",\nhave the following factors, and can represent values in the following ranges:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Fix64")),": Factor 1/100,000,000; -92233720368.54775808 through 92233720368.54775807")),(0,r.kt)("p",null,"Unsigned fixed-point number types have the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"UFix"),",\nhave the following factors, and can represent values in the following ranges:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"UFix64")),": Factor 1/100,000,000; 0.0 through 184467440737.09551615")),(0,r.kt)("h3",{id:"fixed-point-number-functions"},"Fixed-Point Number Functions"),(0,r.kt)("p",null,"Fixed-Point numbers have multiple built-in functions you can use."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toString(): String\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the string representation of the fixed-point number."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let fix = 1.23\n\nfix.toString()  // is "1.23000000"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toBigEndianBytes(): [UInt8]\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the byte array representation (",(0,r.kt)("inlineCode",{parentName:"p"},"[UInt8]"),") in big-endian order of the fixed-point number."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let fix = 1.23\n\nfix.toBigEndianBytes()  // is `[0, 0, 0, 0, 7, 84, 212, 192]`\n")))),(0,r.kt)("p",null,"All fixed-point types support the following functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun T.fromString(_ input: String): T?\n")),(0,r.kt)("p",{parentName:"li"},"   Attempts to parse a fixed-point value from a base-10 encoded string, returning ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," if the string is invalid."),(0,r.kt)("p",{parentName:"li"},"   For a given fixed-point numeral ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T.fromString(n.toString())")," is equivalent to wrapping ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," up in an ",(0,r.kt)("inlineCode",{parentName:"p"},"optional"),"."),(0,r.kt)("p",{parentName:"li"},"   Strings are invalid if:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},' - they contain non-digit characters.\n - they don\'t fit in the target type.\n - they\'re missing a decimal or fractional component. For example, both "0." and ".1" are invalid strings, but "0.1" is accepted.\n')),(0,r.kt)("p",{parentName:"li"},"   For signed types like ",(0,r.kt)("inlineCode",{parentName:"p"},"Fix64"),", the string may optionally begin with ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-")," sign prefix."),(0,r.kt)("p",{parentName:"li"},"   For unsigned types like ",(0,r.kt)("inlineCode",{parentName:"p"},"UFix64"),", sign prefices are not allowed."),(0,r.kt)("p",{parentName:"li"},"   Examples:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let nil1: UFix64? = UFix64.fromString("0.") // nil, fractional part is required\n\nlet nil2: UFix64? = UFix64.fromString(".1") // nil, decimal part is required\n\nlet smol: UFix64? = UFix64.fromString("0.1") // ok\n\nlet smolString: String = "-0.1"\n\nlet nil3: UFix64? = UFix64.fromString(smolString) // nil, unsigned types don\'t allow a sign prefix\n\nlet smolFix64: Fix64? = Fix64.fromString(smolString) // ok\n')))),(0,r.kt)("h2",{id:"minimum-and-maximum-values"},"Minimum and maximum values"),(0,r.kt)("p",null,"The minimum and maximum values for all integer and fixed-point number types are available through the fields ",(0,r.kt)("inlineCode",{parentName:"p"},"min")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"max"),"."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let max = UInt8.max\n// `max` is 255, the maximum value of the type `UInt8`\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let max = UFix64.max\n// `max` is 184467440737.09551615, the maximum value of the type `UFix64`\n")),(0,r.kt)("h2",{id:"saturation-arithmetic"},"Saturation Arithmetic"),(0,r.kt)("p",null,"Integers and fixed-point numbers support saturation arithmetic:\nArithmetic operations, such as addition or multiplications, are saturating at the numeric bounds instead of overflowing."),(0,r.kt)("p",null,"If the result of an operation is greater than the maximum value of the operands' type, the maximum is returned.\nIf the result is lower than the minimum of the operands' type, the minimum is returned."),(0,r.kt)("p",null,"Saturating addition, subtraction, multiplication, and division are provided as functions with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"saturating"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Int8"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int16"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int128"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int256"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Fix64"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingAdd")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingSubtract")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingMultiply")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingDivide")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Int"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"none"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"UInt8"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt16"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt128"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt256"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UFix64"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingAdd")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingSubtract")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingMultiply")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"UInt"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saturatingSubtract"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let a: UInt8 = 200\nlet b: UInt8 = 100\nlet result = a.saturatingAdd(b)\n// `result` is 255, the maximum value of the type `UInt8`\n")),(0,r.kt)("h2",{id:"floating-point-numbers"},"Floating-Point Numbers"),(0,r.kt)("p",null,"There is ",(0,r.kt)("strong",{parentName:"p"},"no")," support for floating point numbers."),(0,r.kt)("p",null,"Smart Contracts are not intended to work with values with error margins\nand therefore floating point arithmetic is not appropriate here."),(0,r.kt)("p",null,"Instead, consider using ",(0,r.kt)("a",{parentName:"p",href:"#fixed-point-numbers"},"fixed point numbers"),"."),(0,r.kt)("h2",{id:"addresses"},"Addresses"),(0,r.kt)("p",null,"The type ",(0,r.kt)("inlineCode",{parentName:"p"},"Address")," represents an address.\nAddresses are unsigned integers with a size of 64 bits (8 bytes).\nHexadecimal integer literals can be used to create address values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a constant that has type `Address`.\n//\nlet someAddress: Address = 0x436164656E636521\n\n// Invalid: Initial value is not compatible with type `Address`,\n// it is not a number.\n//\nlet notAnAddress: Address = ""\n\n// Invalid: Initial value is not compatible with type `Address`.\n// The integer literal is valid, however, it is larger than 64 bits.\n//\nlet alsoNotAnAddress: Address = 0x436164656E63652146757265766572\n')),(0,r.kt)("p",null,"Integer literals are not inferred to be an address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a number. Even though it happens to be a valid address,\n// it is not inferred as it.\n//\nlet aNumber = 0x436164656E636521\n\n// `aNumber` has type `Int`\n")),(0,r.kt)("p",null,"Address can also be created using a byte array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an address with hex representation as 0x436164656E636521.\nlet someAddress: Address = Address.fromBytes([67, 97, 100, 101, 110, 99, 101, 33])\n\n// Invalid: Provided value is not compatible with type `Address`. The function panics.\nlet invalidAddress: Address = Address.fromBytes([12, 34, 56, 11, 22, 33, 44, 55, 66, 77, 88, 99, 111])\n")),(0,r.kt)("h3",{id:"address-functions"},"Address Functions"),(0,r.kt)("p",null,"Addresses have multiple built-in functions you can use."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toString(): String\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the string representation of the address.\nThe result has a ",(0,r.kt)("inlineCode",{parentName:"p"},"0x")," prefix and is zero-padded."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let someAddress: Address = 0x436164656E636521\nsomeAddress.toString()   // is "0x436164656E636521"\n\nlet shortAddress: Address = 0x1\nshortAddress.toString()  // is "0x0000000000000001"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toBytes(): [UInt8]\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the byte array representation (",(0,r.kt)("inlineCode",{parentName:"p"},"[UInt8]"),") of the address."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let someAddress: Address = 0x436164656E636521\n\nsomeAddress.toBytes()  // is `[67, 97, 100, 101, 110, 99, 101, 33]`\n")))),(0,r.kt)("h2",{id:"anystruct-and-anyresource"},"AnyStruct and AnyResource"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AnyStruct")," is the top type of all non-resource types,\ni.e., all non-resource types are a subtype of it."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AnyResource")," is the top type of all resource types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a variable that has the type `AnyStruct`.\n// Any non-resource typed value can be assigned to it, for example an integer,\n// but not resource-typed values.\n//\nvar someStruct: AnyStruct = 1\n\n// Assign a value with a different non-resource type, `Bool`.\nsomeStruct = true\n\n// Declare a structure named `TestStruct`, create an instance of it,\n// and assign it to the `AnyStruct`-typed variable\n//\nstruct TestStruct {}\n\nlet testStruct = TestStruct()\n\nsomeStruct = testStruct\n\n// Declare a resource named `TestResource`\n\nresource TestResource {}\n\n// Declare a variable that has the type `AnyResource`.\n// Any resource-typed value can be assigned to it,\n// but not non-resource typed values.\n//\nvar someResource: @AnyResource <- create TestResource()\n\n// Invalid: Resource-typed values can not be assigned\n// to `AnyStruct`-typed variables\n//\nsomeStruct <- create TestResource()\n\n// Invalid: Non-resource typed values can not be assigned\n// to `AnyResource`-typed variables\n//\nsomeResource = 1\n")),(0,r.kt)("p",null,"However, using ",(0,r.kt)("inlineCode",{parentName:"p"},"AnyStruct")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AnyResource")," does not opt-out of type checking.\nIt is invalid to access fields and call functions on these types,\nas they have no fields and functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a variable that has the type `AnyStruct`.\n// The initial value is an integer,\n// but the variable still has the explicit type `AnyStruct`.\n//\nlet a: AnyStruct = 1\n\n// Invalid: Operator cannot be used for an `AnyStruct` value (`a`, left-hand side)\n// and an `Int` value (`2`, right-hand side).\n//\na + 2\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AnyStruct")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AnyResource")," may be used like other types,\nfor example, they may be the element type of ",(0,r.kt)("a",{parentName:"p",href:"#arrays"},"arrays"),"\nor be the element type of an ",(0,r.kt)("a",{parentName:"p",href:"#optionals"},"optional type"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a variable that has the type `[AnyStruct]`,\n// i.e. an array of elements of any non-resource type.\n//\nlet anyValues: [AnyStruct] = [1, "2", true]\n\n// Declare a variable that has the type `AnyStruct?`,\n// i.e. an optional type of any non-resource type.\n//\nvar maybeSomething: AnyStruct? = 42\n\nmaybeSomething = "twenty-four"\n\nmaybeSomething = nil\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AnyStruct")," is also the super-type of all non-resource optional types,\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"AnyResource")," is the super-type of all resource optional types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let maybeInt: Int? = 1\nlet anything: AnyStruct = maybeInt\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"operators#conditional-downcasting-operator-as"},"Conditional downcasting")," allows coercing\na value which has the type ",(0,r.kt)("inlineCode",{parentName:"p"},"AnyStruct")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"AnyResource")," back to its original type."),(0,r.kt)("h2",{id:"optionals"},"Optionals"),(0,r.kt)("p",null,"Optionals are values which can represent the absence of a value. Optionals have two cases:\neither there is a value, or there is nothing."),(0,r.kt)("p",null,"An optional type is declared using the ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," suffix for another type.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"p"},"Int")," is a non-optional integer, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Int?")," is an optional integer,\ni.e. either nothing, or an integer."),(0,r.kt)("p",null,"The value representing nothing is ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant which has an optional integer type,\n// with nil as its initial value.\n//\nlet a: Int? = nil\n\n// Declare a constant which has an optional integer type,\n// with 42 as its initial value.\n//\nlet b: Int? = 42\n\n// Invalid: `b` has type `Int?`, which does not support arithmetic.\nb + 23\n\n// Invalid: Declare a constant with a non-optional integer type `Int`,\n// but the initial value is `nil`, which in this context has type `Int?`.\n//\nlet x: Int = nil\n")),(0,r.kt)("p",null,"Optionals can be created for any value, not just for literals."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant which has a non-optional integer type,\n// with 1 as its initial value.\n//\nlet x = 1\n\n// Declare a constant which has an optional integer type.\n// An optional with the value of `x` is created.\n//\nlet y: Int? = x\n\n// Declare a variable which has an optional any type, i.e. the variable\n// may be `nil`, or any other value.\n// An optional with the value of `x` is created.\n//\nvar z: AnyStruct? = x\n")),(0,r.kt)("p",null,"A non-optional type is a subtype of its optional type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"var a: Int? = nil\nlet b = 2\na = b\n\n// `a` is `2`\n")),(0,r.kt)("p",null,"Optional types may be contained in other types, for example ",(0,r.kt)("a",{parentName:"p",href:"#arrays"},"arrays")," or even optionals."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant which has an array type of optional integers.\nlet xs: [Int?] = [1, nil, 2, nil]\n\n// Declare a constant which has a double optional type.\n//\nlet doubleOptional: Int?? = nil\n")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"operators#optional-operators"},"optional operators")," section for information\non how to work with optionals."),(0,r.kt)("h2",{id:"never"},"Never"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Never")," is the bottom type, i.e., it is a subtype of all types.\nThere is no value that has type ",(0,r.kt)("inlineCode",{parentName:"p"},"Never"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"Never")," can be used as the return type for functions that never return normally.\nFor example, it is the return type of the function ",(0,r.kt)("a",{parentName:"p",href:"built-in-functions#panic"},(0,r.kt)("inlineCode",{parentName:"a"},"panic")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a function named `crashAndBurn` which will never return,\n// because it calls the function named `panic`, which never returns.\n//\nfun crashAndBurn(): Never {\n    panic("An unrecoverable error occurred")\n}\n\n// Invalid: Declare a constant with a `Never` type, but the initial value is an integer.\n//\nlet x: Never = 1\n\n// Invalid: Declare a function which returns an invalid return value `nil`,\n// which is not a value of type `Never`.\n//\nfun returnNever(): Never {\n    return nil\n}\n')),(0,r.kt)("h2",{id:"strings-and-characters"},"Strings and Characters"),(0,r.kt)("p",null,"Strings are collections of characters.\nStrings have the type ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", and characters have the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Character"),".\nStrings can be used to work with text in a Unicode-compliant way.\nStrings are immutable."),(0,r.kt)("p",null,"String and character literals are enclosed in double quotation marks (",(0,r.kt)("inlineCode",{parentName:"p"},'"'),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let someString = "Hello, world!"\n')),(0,r.kt)("p",null,"String literals may contain escape sequences. An escape sequence starts with a backslash (",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),"):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\0"),": Null character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\\\"),": Backslash"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\t"),": Horizontal tab"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\n"),": Line feed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\r"),": Carriage return"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'\\"'),": Double quotation mark"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\'"),": Single quotation mark"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\u"),": A Unicode scalar value, written as ",(0,r.kt)("inlineCode",{parentName:"li"},"\\u{x}"),",\nwhere ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is a 1\u20138 digit hexadecimal number\nwhich needs to be a valid Unicode scalar value,\ni.e., in the range 0 to 0xD7FF and 0xE000 to 0x10FFFF inclusive")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a constant which contains two lines of text\n// (separated by the line feed character `\\n`), and ends\n// with a thumbs up emoji, which has code point U+1F44D (0x1F44D).\n//\nlet thumbsUpText =\n    "This is the first line.\\nThis is the second line with an emoji: \\u{1F44D}"\n')),(0,r.kt)("p",null,"The type ",(0,r.kt)("inlineCode",{parentName:"p"},"Character")," represents a single, human-readable character.\nCharacters are extended grapheme clusters,\nwhich consist of one or more Unicode scalars."),(0,r.kt)("p",null,"For example, the single character ",(0,r.kt)("inlineCode",{parentName:"p"},"\xfc")," can be represented\nin several ways in Unicode.\nFirst, it can be represented by a single Unicode scalar value ",(0,r.kt)("inlineCode",{parentName:"p"},"\xfc"),'\n("LATIN SMALL LETTER U WITH DIAERESIS", code point U+00FC).\nSecond, the same single character can be represented\nby two Unicode scalar values:\n',(0,r.kt)("inlineCode",{parentName:"p"},"u"),' ("LATIN SMALL LETTER U", code point U+0075),\nand "COMBINING DIAERESIS" (code point U+0308).\nThe combining Unicode scalar value is applied to the scalar before it,\nwhich turns a ',(0,r.kt)("inlineCode",{parentName:"p"},"u")," into a ",(0,r.kt)("inlineCode",{parentName:"p"},"\xfc"),"."),(0,r.kt)("p",null,"Still, both variants represent the same human-readable character ",(0,r.kt)("inlineCode",{parentName:"p"},"\xfc"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let singleScalar: Character = "\\u{FC}"\n// `singleScalar` is `\xfc`\nlet twoScalars: Character = "\\u{75}\\u{308}"\n// `twoScalars` is `\xfc`\n')),(0,r.kt)("p",null,'Another example where multiple Unicode scalar values are rendered as a single,\nhuman-readable character is a flag emoji.\nThese emojis consist of two "REGIONAL INDICATOR SYMBOL LETTER" Unicode scalar values.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a constant for a string with a single character, the emoji\n// for the Canadian flag, which consists of two Unicode scalar values:\n// - REGIONAL INDICATOR SYMBOL LETTER C (U+1F1E8)\n// - REGIONAL INDICATOR SYMBOL LETTER A (U+1F1E6)\n//\nlet canadianFlag: Character = "\\u{1F1E8}\\u{1F1E6}"\n// `canadianFlag` is `\ud83c\udde8\ud83c\udde6`\n')),(0,r.kt)("h3",{id:"string-fields-and-functions"},"String Fields and Functions"),(0,r.kt)("p",null,"Strings have multiple built-in functions you can use:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let length: Int\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the number of characters in the string as an integer."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let example = "hello"\n\n// Find the number of elements of the string.\nlet length = example.length\n// `length` is `5`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let utf8: [UInt8]\n")),(0,r.kt)("p",{parentName:"li"},"   The byte array of the UTF-8 encoding"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let flowers = "Flowers \\u{1F490}"\nlet bytes = flowers.utf8\n// `bytes` is `[70, 108, 111, 119, 101, 114, 115, 32, 240, 159, 146, 144]`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun concat(_ other: String): String\n")),(0,r.kt)("p",{parentName:"li"},"   Concatenates the string ",(0,r.kt)("inlineCode",{parentName:"p"},"other")," to the end of the original string,\nbut does not modify the original string.\nThis function creates a new string whose length is the sum of the lengths\nof the string the function is called on and the string given as a parameter."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let example = "hello"\nlet new = "world"\n\n// Concatenate the new string onto the example string and return the new string.\nlet helloWorld = example.concat(new)\n// `helloWorld` is now `"helloworld"`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun slice(from: Int, upTo: Int): String\n")),(0,r.kt)("p",{parentName:"li"},"   Returns a string slice of the characters\nin the given string from start index ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," up to,\nbut not including, the end index ",(0,r.kt)("inlineCode",{parentName:"p"},"upTo"),".\nThis function creates a new string whose length is ",(0,r.kt)("inlineCode",{parentName:"p"},"upTo - from"),".\nIt does not modify the original string.\nIf either of the parameters are out of the bounds of the string,\nor the indices are invalid (",(0,r.kt)("inlineCode",{parentName:"p"},"from > upTo"),"), then the function will fail."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let example = "helloworld"\n\n// Create a new slice of part of the original string.\nlet slice = example.slice(from: 3, upTo: 6)\n// `slice` is now `"low"`\n\n// Run-time error: Out of bounds index, the program aborts.\nlet outOfBounds = example.slice(from: 2, upTo: 10)\n\n// Run-time error: Invalid indices, the program aborts.\nlet invalidIndices = example.slice(from: 2, upTo: 1)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun decodeHex(): [UInt8]\n")),(0,r.kt)("p",{parentName:"li"},"   Returns an array containing the bytes represented by the given hexadecimal string."),(0,r.kt)("p",{parentName:"li"},"   The given string must only contain hexadecimal characters and must have an even length.\nIf the string is malformed, the program aborts"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let example = "436164656e636521"\n\nexample.decodeHex()  // is `[67, 97, 100, 101, 110, 99, 101, 33]`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toLower(): String\n")),(0,r.kt)("p",{parentName:"li"},"   Returns a string where all upper case letters are replaced with lowercase characters"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let example = "Flowers"\n\nexample.toLower()  // is `flowers`\n')))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," type also provides the following functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun String.encodeHex(_ data: [UInt8]): String\n")),(0,r.kt)("p",{parentName:"li"},"   Returns a hexadecimal string for the given byte array"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let data = [1 as UInt8, 2, 3, 0xCA, 0xDE]\n\nString.encodeHex(data)  // is `"010203cade"`\n')))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String"),"s are also indexable, returning a ",(0,r.kt)("inlineCode",{parentName:"p"},"Character")," value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let str = "abc"\nlet c = str[0] // is the Character "a"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun String.fromUTF8(_ input: [UInt8]): String?\n")),(0,r.kt)("p",{parentName:"li"},"   Attempts to convert a UTF-8 encoded byte array into a ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),". This function returns ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," if the byte array contains invalid UTF-8,\nsuch as incomplete codepoint sequences or undefined graphemes."),(0,r.kt)("p",{parentName:"li"},"   For a given string ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"String.fromUTF8(s.utf8)")," is equivalent to wrapping ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," up in an ",(0,r.kt)("a",{parentName:"p",href:"#optionals"},"optional"),"."))),(0,r.kt)("h3",{id:"character-fields-and-functions"},"Character Fields and Functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Character")," values can be converted into ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," values using the ",(0,r.kt)("inlineCode",{parentName:"p"},"toString")," function:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun toString(): String`\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the string representation of the character."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let c: Character = "x"\n\nc.toString()  // is "x"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun String.fromCharacters(_ characters: [Character]): String\n")),(0,r.kt)("p",{parentName:"li"},"   Builds a new ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," value from an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"Character"),"s. Because ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"s are immutable, this operation makes a copy of the input array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let rawUwU: [Character] = ["U", "w", "U"]\nlet uwu: String = String.fromCharacters(rawUwU) // "UwU"\n')))),(0,r.kt)("h2",{id:"arrays"},"Arrays"),(0,r.kt)("p",null,"Arrays are mutable, ordered collections of values.\nArrays may contain a value multiple times.\nArray literals start with an opening square bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"[")," and end with a closing square bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"]"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// An empty array\n//\n[]\n\n// An array with integers\n//\n[1, 2, 3]\n")),(0,r.kt)("h3",{id:"array-types"},"Array Types"),(0,r.kt)("p",null,"Arrays either have a fixed size or are variably sized, i.e., elements can be added and removed."),(0,r.kt)("p",null,"Fixed-size array types have the form ",(0,r.kt)("inlineCode",{parentName:"p"},"[T; N]"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is the element type,\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is the size of the array. ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," has to be statically known, meaning\nthat it needs to be an integer literal.\nFor example, a fixed-size array of 3 ",(0,r.kt)("inlineCode",{parentName:"p"},"Int8")," elements has the type ",(0,r.kt)("inlineCode",{parentName:"p"},"[Int8; 3]"),"."),(0,r.kt)("p",null,"Variable-size array types have the form ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is the element type.\nFor example, the type ",(0,r.kt)("inlineCode",{parentName:"p"},"[Int16]")," specifies a variable-size array of elements that have type ",(0,r.kt)("inlineCode",{parentName:"p"},"Int16"),"."),(0,r.kt)("p",null,"All values in an array must have a type which is a subtype of the array's element type (",(0,r.kt)("inlineCode",{parentName:"p"},"T"),")."),(0,r.kt)("p",null,"It is important to understand that arrays are value types and are only ever copied\nwhen used as an initial value for a constant or variable,\nwhen assigning to a variable,\nwhen used as function argument,\nor when returned from a function call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'let size = 2\n// Invalid: Array-size must be an integer literal\nlet numbers: [Int; size] = []\n\n// Declare a fixed-sized array of integers\n// which always contains exactly two elements.\n//\nlet array: [Int8; 2] = [1, 2]\n\n// Declare a fixed-sized array of fixed-sized arrays of integers.\n// The inner arrays always contain exactly three elements,\n// the outer array always contains two elements.\n//\nlet arrays: [[Int16; 3]; 2] = [\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\n// Declare a variable length array of integers\nvar variableLengthArray: [Int] = []\n\n// Mixing values with different types is possible\n// by declaring the expected array type\n// with the common supertype of all values.\n//\nlet mixedValues: [AnyStruct] = ["some string", 42]\n')),(0,r.kt)("p",null,"Array types are covariant in their element types.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"p"},"[Int]")," is a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"[AnyStruct]"),".\nThis is safe because arrays are value types and not reference types."),(0,r.kt)("h3",{id:"array-indexing"},"Array Indexing"),(0,r.kt)("p",null,"To get the element of an array at a specific index, the indexing syntax can be used:\nThe array is followed by an opening square bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"["),", the indexing value,\nand ends with a closing square bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"]"),"."),(0,r.kt)("p",null,"Indexes start at 0 for the first element in the array."),(0,r.kt)("p",null,"Accessing an element which is out of bounds results in a fatal error at run-time\nand aborts the program."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of integers.\nlet numbers = [42, 23]\n\n// Get the first number of the array.\n//\nnumbers[0] // is `42`\n\n// Get the second number of the array.\n//\nnumbers[1] // is `23`\n\n// Run-time error: Index 2 is out of bounds, the program aborts.\n//\nnumbers[2]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of arrays of integers, i.e. the type is `[[Int]]`.\nlet arrays = [[1, 2], [3, 4]]\n\n// Get the first number of the second array.\n//\narrays[1][0] // is `3`\n")),(0,r.kt)("p",null,"To set an element of an array at a specific index, the indexing syntax can be used as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of integers.\nlet numbers = [42, 23]\n\n// Change the second number in the array.\n//\n// NOTE: The declaration `numbers` is constant, which means that\n// the *name* is constant, not the *value* \u2013 the value, i.e. the array,\n// is mutable and can be changed.\n//\nnumbers[1] = 2\n\n// `numbers` is `[42, 2]`\n")),(0,r.kt)("h3",{id:"array-fields-and-functions"},"Array Fields and Functions"),(0,r.kt)("p",null,"Arrays have multiple built-in fields and functions\nthat can be used to get information about and manipulate the contents of the array."),(0,r.kt)("p",null,"The field ",(0,r.kt)("inlineCode",{parentName:"p"},"length"),", and the functions ",(0,r.kt)("inlineCode",{parentName:"p"},"concat"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"contains"),"\nare available for both variable-sized and fixed-sized or variable-sized arrays."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let length: Int\n")),(0,r.kt)("p",{parentName:"li"},"   The number of elements in the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of integers.\nlet numbers = [42, 23, 31, 12]\n\n// Find the number of elements of the array.\nlet length = numbers.length\n\n// `length` is `4`\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun concat(_ array: T): T\n")),(0,r.kt)("p",{parentName:"li"},"   Concatenates the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," to the end\nof the array the function is called on,\nbut does not modify that array."),(0,r.kt)("p",{parentName:"li"},"   Both arrays must be the same type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,r.kt)("p",{parentName:"li"},"   This function creates a new array whose length is the sum of the length of the array\nthe function is called on and the length of the array given as the parameter."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare two arrays of integers.\nlet numbers = [42, 23, 31, 12]\nlet moreNumbers = [11, 27]\n\n// Concatenate the array `moreNumbers` to the array `numbers`\n// and declare a new variable for the result.\n//\nlet allNumbers = numbers.concat(moreNumbers)\n\n// `allNumbers` is `[42, 23, 31, 12, 11, 27]`\n// `numbers` is still `[42, 23, 31, 12]`\n// `moreNumbers` is still `[11, 27]`\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun contains(_ element: T): Bool\n")),(0,r.kt)("p",{parentName:"li"},"   Returns true if the given element of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is in the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare an array of integers.\nlet numbers = [42, 23, 31, 12]\n\n// Check if the array contains 11.\nlet containsEleven = numbers.contains(11)\n// `containsEleven` is `false`\n\n// Check if the array contains 12.\nlet containsTwelve = numbers.contains(12)\n// `containsTwelve` is `true`\n\n// Invalid: Check if the array contains the string "Kitty".\n// This results in a type error, as the array only contains integers.\n//\nlet containsKitty = numbers.contains("Kitty")\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun firstIndex(of: T): Int?\n")),(0,r.kt)("p",{parentName:"li"},"   Returns the index of the first element matching the given object in the array, nil if no match.\nAvailable if ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is not resource-kinded and equatable."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"}," // Declare an array of integers.\n let numbers = [42, 23, 31, 12]\n\n // Check if the array contains 31\n let index = numbers.firstIndex(of: 31)\n // `index` is 2\n\n // Check if the array contains 22\n let index = numbers.firstIndex(of: 22)\n // `index` is nil\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun slice(from: Int, upTo: Int): [T]\n")),(0,r.kt)("p",{parentName:"li"},"   Returns an array slice of the elements\nin the given array from start index ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," up to,\nbut not including, the end index ",(0,r.kt)("inlineCode",{parentName:"p"},"upTo"),".\nThis function creates a new array whose length is ",(0,r.kt)("inlineCode",{parentName:"p"},"upTo - from"),".\nIt does not modify the original array.\nIf either of the parameters are out of the bounds of the array,\nor the indices are invalid (",(0,r.kt)("inlineCode",{parentName:"p"},"from > upTo"),"), then the function will fail."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let example = [1, 2, 3, 4]\n\n// Create a new slice of part of the original array.\nlet slice = example.slice(from: 1, upTo: 3)\n// `slice` is now `[2, 3]`\n\n// Run-time error: Out of bounds index, the program aborts.\nlet outOfBounds = example.slice(from: 2, upTo: 10)\n\n// Run-time error: Invalid indices, the program aborts.\nlet invalidIndices = example.slice(from: 2, upTo: 1)\n")))),(0,r.kt)("h4",{id:"variable-size-array-functions"},"Variable-size Array Functions"),(0,r.kt)("p",null,"The following functions can only be used on variable-sized arrays.\nIt is invalid to use one of these functions on a fixed-sized array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun append(_ element: T): Void\n")),(0,r.kt)("p",{parentName:"li"},"   Adds the new element ",(0,r.kt)("inlineCode",{parentName:"p"},"element")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," to the end of the array."),(0,r.kt)("p",{parentName:"li"},"   The new element must be the same type as all the other elements in the array."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare an array of integers.\nlet numbers = [42, 23, 31, 12]\n\n// Add a new element to the array.\nnumbers.append(20)\n// `numbers` is now `[42, 23, 31, 12, 20]`\n\n// Invalid: The parameter has the wrong type `String`.\nnumbers.append("SneakyString")\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun appendAll(_ array: T): Void\n")),(0,r.kt)("p",{parentName:"li"},"   Adds all the elements from ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," to the end of the array\nthe function is called on."),(0,r.kt)("p",{parentName:"li"},"   Both arrays must be the same type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare an array of integers.\nlet numbers = [42, 23]\n\n// Add new elements to the array.\nnumbers.appendAll([31, 12, 20])\n// `numbers` is now `[42, 23, 31, 12, 20]`\n\n// Invalid: The parameter has the wrong type `[String]`.\nnumbers.appendAll(["Sneaky", "String"])\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun insert(at: Int, _ element: T): Void\n")),(0,r.kt)("p",{parentName:"li"},"   Inserts the new element ",(0,r.kt)("inlineCode",{parentName:"p"},"element")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"\nat the given ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," of the array."),(0,r.kt)("p",{parentName:"li"},"   The new element must be of the same type as the other elements in the array."),(0,r.kt)("p",{parentName:"li"},"   The ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," must be within the bounds of the array.\nIf the index is outside the bounds, the program aborts."),(0,r.kt)("p",{parentName:"li"},"   The existing element at the supplied index is not overwritten."),(0,r.kt)("p",{parentName:"li"},"   All the elements after the new inserted element\nare shifted to the right by one."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of integers.\nlet numbers = [42, 23, 31, 12]\n\n// Insert a new element at position 1 of the array.\nnumbers.insert(at: 1, 20)\n// `numbers` is now `[42, 20, 23, 31, 12]`\n\n// Run-time error: Out of bounds index, the program aborts.\nnumbers.insert(at: 12, 39)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun remove(at: Int): T\n")),(0,r.kt)("p",{parentName:"li"},"   Removes the element at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," from the array and returns it."),(0,r.kt)("p",{parentName:"li"},"   The ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," must be within the bounds of the array.\nIf the index is outside the bounds, the program aborts."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of integers.\nlet numbers = [42, 23, 31]\n\n// Remove element at position 1 of the array.\nlet twentyThree = numbers.remove(at: 1)\n// `numbers` is now `[42, 31]`\n// `twentyThree` is `23`\n\n// Run-time error: Out of bounds index, the program aborts.\nnumbers.remove(at: 19)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun removeFirst(): T\n")),(0,r.kt)("p",{parentName:"li"},"   Removes the first element from the array and returns it."),(0,r.kt)("p",{parentName:"li"},"   The array must not be empty.\nIf the array is empty, the program aborts."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of integers.\nlet numbers = [42, 23]\n\n// Remove the first element of the array.\nlet fortytwo = numbers.removeFirst()\n// `numbers` is now `[23]`\n// `fortywo` is `42`\n\n// Remove the first element of the array.\nlet twentyThree = numbers.removeFirst()\n// `numbers` is now `[]`\n// `twentyThree` is `23`\n\n// Run-time error: The array is empty, the program aborts.\nnumbers.removeFirst()\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun removeLast(): T\n")),(0,r.kt)("p",{parentName:"li"},"   Removes the last element from the array and returns it."),(0,r.kt)("p",{parentName:"li"},"   The array must not be empty.\nIf the array is empty, the program aborts."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare an array of integers.\nlet numbers = [42, 23]\n\n// Remove the last element of the array.\nlet twentyThree = numbers.removeLast()\n// `numbers` is now `[42]`\n// `twentyThree` is `23`\n\n// Remove the last element of the array.\nlet fortyTwo = numbers.removeLast()\n// `numbers` is now `[]`\n// `fortyTwo` is `42`\n\n// Run-time error: The array is empty, the program aborts.\nnumbers.removeLast()\n")))),(0,r.kt)("h2",{id:"dictionaries"},"Dictionaries"),(0,r.kt)("p",null,"Dictionaries are mutable, unordered collections of key-value associations.\nDictionaries may contain a key only once\nand may contain a value multiple times."),(0,r.kt)("p",null,"Dictionary literals start with an opening brace ",(0,r.kt)("inlineCode",{parentName:"p"},"{"),"\nand end with a closing brace ",(0,r.kt)("inlineCode",{parentName:"p"},"}"),".\nKeys are separated from values by a colon,\nand key-value associations are separated by commas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// An empty dictionary\n//\n{}\n\n// A dictionary which associates integers with booleans\n//\n{\n    1: true,\n    2: false\n}\n")),(0,r.kt)("h3",{id:"dictionary-types"},"Dictionary Types"),(0,r.kt)("p",null,"Dictionary types have the form ",(0,r.kt)("inlineCode",{parentName:"p"},"{K: V}"),",\nwhere ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," is the type of the key,\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"V")," is the type of the value.\nFor example, a dictionary with ",(0,r.kt)("inlineCode",{parentName:"p"},"Int")," keys and ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool"),"\nvalues has type ",(0,r.kt)("inlineCode",{parentName:"p"},"{Int: Bool}"),"."),(0,r.kt)("p",null,"In a dictionary, all keys must have a type that is a subtype of the dictionary's key type (",(0,r.kt)("inlineCode",{parentName:"p"},"K"),")\nand all values must have a type that is a subtype of the dictionary's value type (",(0,r.kt)("inlineCode",{parentName:"p"},"V"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a constant that has type `{Int: Bool}`,\n// a dictionary mapping integers to booleans.\n//\nlet booleans = {\n    1: true,\n    0: false\n}\n\n// Declare a constant that has type `{Bool: Int}`,\n// a dictionary mapping booleans to integers.\n//\nlet integers = {\n    true: 1,\n    false: 0\n}\n\n// Mixing keys with different types, and mixing values with different types,\n// is possible by declaring the expected dictionary type with the common supertype\n// of all keys, and the common supertype of all values.\n//\nlet mixedValues: {String: AnyStruct} = {\n    "a": 1,\n    "b": true\n}\n')),(0,r.kt)("p",null,"Dictionary types are covariant in their key and value types.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"p"},"{Int: String}")," is a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"{AnyStruct: String}"),"\nand also a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"{Int: AnyStruct}"),".\nThis is safe because dictionaries are value types and not reference types."),(0,r.kt)("h3",{id:"dictionary-access"},"Dictionary Access"),(0,r.kt)("p",null,"To get the value for a specific key from a dictionary,\nthe access syntax can be used:\nThe dictionary is followed by an opening square bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"["),", the key,\nand ends with a closing square bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"]"),"."),(0,r.kt)("p",null,"Accessing a key returns an ",(0,r.kt)("a",{parentName:"p",href:"#optionals"},"optional"),":\nIf the key is found in the dictionary, the value for the given key is returned,\nand if the key is not found, ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," is returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a constant that has type `{Int: Bool}`,\n// a dictionary mapping integers to booleans.\n//\nlet booleans = {\n    1: true,\n    0: false\n}\n\n// The result of accessing a key has type `Bool?`.\n//\nbooleans[1]  // is `true`\nbooleans[0]  // is `false`\nbooleans[2]  // is `nil`\n\n// Invalid: Accessing a key which does not have type `Int`.\n//\nbooleans["1"]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant that has type `{Bool: Int}`,\n// a dictionary mapping booleans to integers.\n//\nlet integers = {\n    true: 1,\n    false: 0\n}\n\n// The result of accessing a key has type `Int?`\n//\nintegers[true] // is `1`\nintegers[false] // is `0`\n")),(0,r.kt)("p",null,"To set the value for a key of a dictionary,\nthe access syntax can be used as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant that has type `{Int: Bool}`,\n// a dictionary mapping booleans to integers.\n//\nlet booleans = {\n    1: true,\n    0: false\n}\n\n// Assign new values for the keys `1` and `0`.\n//\nbooleans[1] = false\nbooleans[0] = true\n// `booleans` is `{1: false, 0: true}`\n")),(0,r.kt)("h3",{id:"dictionary-fields-and-functions"},"Dictionary Fields and Functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let length: Int\n")),(0,r.kt)("p",{parentName:"li"},"   The number of entries in the dictionary."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a dictionary mapping strings to integers.\nlet numbers = {"fortyTwo": 42, "twentyThree": 23}\n\n// Find the number of entries of the dictionary.\nlet length = numbers.length\n\n// `length` is `2`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun insert(key: K, _ value: V): V?\n")),(0,r.kt)("p",{parentName:"li"},"   Inserts the given value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"V")," into the dictionary under the given ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"K"),"."),(0,r.kt)("p",{parentName:"li"},"   The inserted key must have the same type as the dictionary's key type, and the inserted value must have the same type as the dictionary's value type."),(0,r.kt)("p",{parentName:"li"},"   Returns the previous value as an optional\nif the dictionary contained the key,\notherwise ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,r.kt)("p",{parentName:"li"},"   Updates the value if the dictionary already contained the key."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the dictionary."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a dictionary mapping strings to integers.\nlet numbers = {"twentyThree": 23}\n\n// Insert the key `"fortyTwo"` with the value `42` into the dictionary.\n// The key did not previously exist in the dictionary,\n// so the result is `nil`\n//\nlet old = numbers.insert(key: "fortyTwo", 42)\n\n// `old` is `nil`\n// `numbers` is `{"twentyThree": 23, "fortyTwo": 42}`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun remove(key: K): V?\n")),(0,r.kt)("p",{parentName:"li"},"   Removes the value for the given ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," from the dictionary."),(0,r.kt)("p",{parentName:"li"},"   Returns the value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"V")," as an optional\nif the dictionary contained the key,\notherwise ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,r.kt)("p",{parentName:"li"},"   This function ",(0,r.kt)("a",{parentName:"p",href:"access-control"},"mutates")," the dictionary."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a dictionary mapping strings to integers.\nlet numbers = {"fortyTwo": 42, "twentyThree": 23}\n\n// Remove the key `"fortyTwo"` from the dictionary.\n// The key exists in the dictionary,\n// so the value associated with the key is returned.\n//\nlet fortyTwo = numbers.remove(key: "fortyTwo")\n\n// `fortyTwo` is `42`\n// `numbers` is `{"twentyThree": 23}`\n\n// Remove the key `"oneHundred"` from the dictionary.\n// The key does not exist in the dictionary, so `nil` is returned.\n//\nlet oneHundred = numbers.remove(key: "oneHundred")\n\n// `oneHundred` is `nil`\n// `numbers` is `{"twentyThree": 23}`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let keys: [K]\n")),(0,r.kt)("p",{parentName:"li"},"   Returns an array of the keys of type ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," in the dictionary. This does not\nmodify the dictionary, just returns a copy of the keys as an array.\nIf the dictionary is empty, this returns an empty array. The ordering of the keys is undefined."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a dictionary mapping strings to integers.\nlet numbers = {"fortyTwo": 42, "twentyThree": 23}\n\n// Find the keys of the dictionary.\nlet keys = numbers.keys\n\n// `keys` has type `[String]` and is `["fortyTwo","twentyThree"]`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"let values: [V]\n")),(0,r.kt)("p",{parentName:"li"},"   Returns an array of the values of type ",(0,r.kt)("inlineCode",{parentName:"p"},"V")," in the dictionary. This does not\nmodify the dictionary, just returns a copy of the values as an array.\nIf the dictionary is empty, this returns an empty array."),(0,r.kt)("p",{parentName:"li"},"   This field is not available if ",(0,r.kt)("inlineCode",{parentName:"p"},"V")," is a resource type."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a dictionary mapping strings to integers.\nlet numbers = {"fortyTwo": 42, "twentyThree": 23}\n\n// Find the values of the dictionary.\nlet values = numbers.values\n\n// `values` has type [Int] and is `[42, 23]`\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun containsKey(key: K): Bool\n")),(0,r.kt)("p",{parentName:"li"},"   Returns true if the given key of type ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," is in the dictionary."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a dictionary mapping strings to integers.\nlet numbers = {"fortyTwo": 42, "twentyThree": 23}\n\n// Check if the dictionary contains the key "twentyFive".\nlet containsKeyTwentyFive = numbers.containsKey("twentyFive")\n// `containsKeyTwentyFive` is `false`\n\n// Check if the dictionary contains the key "fortyTwo".\nlet containsKeyFortyTwo = numbers.containsKey("fortyTwo")\n// `containsKeyFortyTwo` is `true`\n\n// Invalid: Check if the dictionary contains the key 42.\n// This results in a type error, as the key type of the dictionary is `String`.\n//\nlet containsKey42 = numbers.containsKey(42)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"fun forEachKey(_ function: ((K): Bool)): Void\n")),(0,r.kt)("p",{parentName:"li"},"   Iterate through all the keys in the dictionary, exiting early if the passed function returns false.\nThis is more efficient than calling ",(0,r.kt)("inlineCode",{parentName:"p"},".keys")," and iterating over the resulting array, since an intermediate allocation is avoided.\nThe order of key iteration is undefined, similar to ",(0,r.kt)("inlineCode",{parentName:"p"},".keys"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Take in a targetKey to look for, and a dictionary to iterate through.\nfun myContainsKey(targetKey: String, dictionary: {String: Int}) {\n  // Declare an accumulator that we'll capture inside a closure.\n  var found = false\n\n  // At each step, `key` will be bound to another key from `dictionary`.\n  dictionary.forEachKey(fun (key: String): Bool {\n    found = key == targetKey\n\n    // The returned boolean value, signals whether to continue iterating. \n    // This allows for control flow during the iteration process:\n    //  true = `continue`\n    //  false = `break`\n    return !found\n  })\n\n  return found\n}\n")))),(0,r.kt)("h3",{id:"dictionary-keys"},"Dictionary Keys"),(0,r.kt)("p",null,"Dictionary keys must be hashable and equatable."),(0,r.kt)("p",null,"Most of the built-in types, like booleans and integers,\nare hashable and equatable, so can be used as keys in dictionaries."))}h.isMDXComponent=!0}}]);