"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5953],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(c,".").concat(d)]||u[d]||h[d]||o;return n?a.createElement(m,s(s({ref:t},l),{},{components:n})):a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"Transactions"},s=void 0,i={unversionedId:"cadence/language/transactions",id:"cadence/language/transactions",title:"Transactions",description:"Transactions are objects that are signed by one or more accounts",source:"@site/docs/cadence/language/transactions.md",sourceDirName:"cadence/language",slug:"/cadence/language/transactions",permalink:"/cadence/language/transactions",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618258,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{title:"Transactions"},sidebar:"tutorialSidebar",previous:{title:"Syntax",permalink:"/cadence/language/syntax"},next:{title:"Type Annotations",permalink:"/cadence/language/type-annotations"}},c={},p=[{value:"Transaction Parameters",id:"transaction-parameters",level:2},{value:"Prepare phase",id:"prepare-phase",level:2},{value:"Pre Phase",id:"pre-phase",level:2},{value:"Execute Phase",id:"execute-phase",level:2},{value:"Post Phase",id:"post-phase",level:2},{value:"Summary",id:"summary",level:2}],l={toc:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Transactions are objects that are signed by one or more ",(0,r.kt)("a",{parentName:"p",href:"accounts"},"accounts"),"\nand are sent to the chain to interact with it."),(0,r.kt)("p",null,"Transactions are structured as such:"),(0,r.kt)("p",null,"First, the transaction can import any number of types from external accounts\nusing the import syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"import FungibleToken from 0x01\n")),(0,r.kt)("p",null,"The body is declared using the ",(0,r.kt)("inlineCode",{parentName:"p"},"transaction")," keyword and its contents\nare contained in curly braces."),(0,r.kt)("p",null,"Next is the body of the transaction,\nwhich first contains local variable declarations that are valid\nthroughout the whole of the transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction {\n    // transaction contents\n    let localVar: Int\n\n    ...\n}\n")),(0,r.kt)("p",null,"Then, four optional main phases:\nPreparation, preconditions, execution, and postconditions, in that order.\nThe preparation and execution phases are blocks of code that execute sequentially."),(0,r.kt)("p",null,"The following empty Cadence transaction contains no logic,\nbut demonstrates the syntax for each phase, in the order these phases will be executed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction {\n    prepare(signer1: AuthAccount, signer2: AuthAccount) {\n        // ...\n    }\n\n    pre {\n        // ...\n    }\n\n    execute {\n        // ...\n    }\n\n    post {\n        // ...\n    }\n}\n")),(0,r.kt)("p",null,"Although optional, each phase serves a specific purpose when executing a transaction\nand it is recommended that developers use these phases when creating their transactions.\nThe following will detail the purpose of and how to use each phase."),(0,r.kt)("h2",{id:"transaction-parameters"},"Transaction Parameters"),(0,r.kt)("p",null,"Transactions may declare parameters.\nTransaction parameters are declared like function parameters.\nThe arguments for the transaction are passed in the sent transaction."),(0,r.kt)("p",null,"Transaction parameters are accessible in all phases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a transaction which has one parameter named `amount`\n// that has the type `UFix64`\n//\ntransaction(amount: UFix64) {\n\n}\n")),(0,r.kt)("h2",{id:"prepare-phase"},"Prepare phase"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare")," phase is used when access to the private ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthAccount")," object\nof ",(0,r.kt)("strong",{parentName:"p"},"signing accounts")," is required for your transaction."),(0,r.kt)("p",null,"Direct access to signing accounts is ",(0,r.kt)("strong",{parentName:"p"},"only possible inside the ",(0,r.kt)("inlineCode",{parentName:"strong"},"prepare")," phase"),"."),(0,r.kt)("p",null,"For each signer of the transaction the signing account is passed as an argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare")," phase.\nFor example, if the transaction has three signers,\nthe prepare ",(0,r.kt)("strong",{parentName:"p"},"must")," have three parameters of type ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthAccount"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"}," prepare(signer1: AuthAccount) {\n      // ...\n }\n")),(0,r.kt)("p",null,"As a best practice, only use the ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare")," phase to define and execute logic that requires access\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthAccount")," objects of signing accounts,\nand ",(0,r.kt)("em",{parentName:"p"},"move all other logic elsewhere"),".\nModifications to accounts can have significant implications,\nso keep this phase clear of unrelated logic to ensure users of your contract are able to easily read\nand understand logic related to their private account objects."),(0,r.kt)("p",null,"The prepare phase serves a similar purpose as the initializer of a contract/resource/structure."),(0,r.kt)("p",null,"For example, if a transaction performs a token transfer, put the withdrawal in the ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare")," phase,\nas it requires access to the account storage, but perform the deposit in the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute")," phase."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AuthAccount")," objects have the permissions\nto read from and write to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/storage/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/private/")," areas\nof the account, which cannot be directly accessed anywhere else.\nThey also have the permission to create and delete capabilities that\nuse these areas."),(0,r.kt)("h2",{id:"pre-phase"},"Pre Phase"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"pre")," phase is executed after the ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare")," phase, and is used for checking\nif explicit conditions hold before executing the remainder of the transaction.\nA common example would be checking requisite balances before transferring tokens between accounts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"pre {\n    sendingAccount.balance > 0\n}\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"pre")," phase throws an error, or does not return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," the remainder of the transaction\nis not executed and it will be completely reverted."),(0,r.kt)("h2",{id:"execute-phase"},"Execute Phase"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"execute")," phase does exactly what it says, it executes the main logic of the transaction.\nThis phase is optional, but it is a best practice to add your main transaction logic in the section,\nso it is explicit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"execute {\n    // Invalid: Cannot access the authorized account object,\n    // as `account1` is not in scope\n    let resource <- account1.load<@Resource>(from: /storage/resource)\n    destroy resource\n\n    // Valid: Can access any account's public Account object\n    let publicAccount = getAccount(0x03)\n}\n")),(0,r.kt)("p",null,"You ",(0,r.kt)("strong",{parentName:"p"},"may not")," access private ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthAccount")," objects in the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute")," phase,\nbut you may get an account's ",(0,r.kt)("inlineCode",{parentName:"p"},"PublicAccount")," object,\nwhich allows reading and calling methods on objects\nthat an account has published in the public domain of its account (resources, contract methods, etc.)."),(0,r.kt)("h2",{id:"post-phase"},"Post Phase"),(0,r.kt)("p",null,"Statements inside of the ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," phase are used\nto verify that your transaction logic has been executed properly.\nIt contains zero or more condition checks."),(0,r.kt)("p",null,"For example, a transfer transaction might ensure that the final balance has a certain value,\nor e.g. it was incremented by a specific amount."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},'post {\n    result.balance == 30: "Balance after transaction is incorrect!"\n}\n')),(0,r.kt)("p",null,"If any of the condition checks result in ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", the transaction will fail and be completely reverted."),(0,r.kt)("p",null,"Only condition checks are allowed in this section.\nNo actual computation or modification of values is allowed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A Note about ",(0,r.kt)("inlineCode",{parentName:"strong"},"pre")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"post")," Phases")),(0,r.kt)("p",null,"Another function of the ",(0,r.kt)("inlineCode",{parentName:"p"},"pre")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," phases is to help provide information\nabout how the effects of a transaction on the accounts and resources involved.\nThis is essential because users may want to verify what a transaction does before submitting it.\n",(0,r.kt)("inlineCode",{parentName:"p"},"pre")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," phases provide a way to introspect transactions before they are executed."),(0,r.kt)("p",null,'For example, in the future the phases could be analyzed and interpreted to the user\nin the software they are using,\ne.g. "this transaction will transfer 30 tokens from A to B.\nThe balance of A will decrease by 30 tokens and the balance of B will increase by 30 tokens."'),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Cadence transactions use phases to make the transaction's code / intent more readable\nand to provide a way for developer to separate potentially 'unsafe' account\nmodifying code from regular transaction logic,\nas well as provide a way to check for error prior / after transaction execution,\nand abort the transaction if any are found."),(0,r.kt)("p",null,"The following is a brief summary of how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pre"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"execute"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," phases in a Cadence transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence"},"transaction {\n    prepare(signer1: AuthAccount) {\n        // Access signing accounts for this transaction.\n        //\n        // Avoid logic that does not need access to signing accounts.\n        //\n        // Signing accounts can't be accessed anywhere else in the transaction.\n    }\n\n    pre {\n        // Define conditions that must be true\n        // for this transaction to execute.\n    }\n\n    execute {\n        // The main transaction logic goes here, but you can access\n        // any public information or resources published by any account.\n    }\n\n    post {\n        // Define the expected state of things\n        // as they should be after the transaction executed.\n        //\n        // Also used to provide information about what changes\n        // this transaction will make to accounts in this transaction.\n    }\n}\n")))}h.isMDXComponent=!0}}]);