"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8397],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=i(t),d=a,h=p["".concat(u,".").concat(d)]||p[d]||f[d]||o;return t?r.createElement(h,c(c({ref:n},l),{},{components:t})):r.createElement(h,c({ref:n},l))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[p]="string"==typeof e?e:a,c[1]=s;for(var i=2;i<o;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},76848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=t(87462),a=(t(67294),t(3905));const o={title:"References"},c=void 0,s={unversionedId:"cadence/language/references",id:"cadence/language/references",title:"References",description:"It is possible to create references to objects, i.e. resources or structures.",source:"@site/docs/cadence/language/references.md",sourceDirName:"cadence/language",slug:"/cadence/language/references",permalink:"/docs/cadence/language/references",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex Ni",lastUpdatedAt:1682708799,formattedLastUpdatedAt:"Apr 28, 2023",frontMatter:{title:"References"},sidebar:"tutorialSidebar",previous:{title:"Operators",permalink:"/docs/cadence/language/operators"},next:{title:"Resources",permalink:"/docs/cadence/language/resources"}},u={},i=[],l={toc:i},p="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It is possible to create references to objects, i.e. resources or structures.\nA reference can be used to access fields and call functions on the referenced object."),(0,a.kt)("p",null,"References are ",(0,a.kt)("strong",{parentName:"p"},"copied"),", i.e. they are value types."),(0,a.kt)("p",null,"References are created by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," operator, followed by the object,\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"as")," keyword, and the type through which they should be accessed.\nThe given type must be a supertype of the referenced object's type."),(0,a.kt)("p",null,"References have the type ",(0,a.kt)("inlineCode",{parentName:"p"},"&T"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," is the type of the referenced object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'let hello = "Hello"\n\n// Create a reference to the "Hello" string, typed as a `String`\n//\nlet helloRef: &String = &hello as &String\n\nhelloRef.length // is `5`\n\n// Invalid: Cannot create a reference to `hello`\n// typed as `&Int`, as it has type `String`\n//\nlet intRef: &Int = &hello as &Int\n')),(0,a.kt)("p",null,"If you attempt to reference an optional value, you will receive an optional reference.\nIf the referenced value is nil, the reference itself will be nil. If the referenced value\nexists, then forcing the optional reference will yield a reference to that value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'let nilValue: String? = nil\nlet nilRef = &nilValue as &String? // r has type &String?\nlet n = nilRef! // error, forced nil value\n\nlet strValue: String? = ""\nlet strRef = &strValue as &String? // r has type &String?\nlet n = strRef! // n has type &String\n')),(0,a.kt)("p",null,"References are covariant in their base types.\nFor example, ",(0,a.kt)("inlineCode",{parentName:"p"},"&T")," is a subtype of ",(0,a.kt)("inlineCode",{parentName:"p"},"&U"),", if ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," is a subtype of ",(0,a.kt)("inlineCode",{parentName:"p"},"U"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"\n// Declare a resource interface named `HasCount`,\n// that has a field `count`\n//\nresource interface HasCount {\n    count: Int\n}\n\n// Declare a resource named `Counter` that conforms to `HasCount`\n//\nresource Counter: HasCount {\n    pub var count: Int\n\n    pub init(count: Int) {\n        self.count = count\n    }\n\n    pub fun increment() {\n        self.count = self.count + 1\n    }\n}\n\n// Create a new instance of the resource type `Counter`\n// and create a reference to it, typed as `&Counter`,\n// so the reference allows access to all fields and functions\n// of the counter\n//\nlet counter <- create Counter(count: 42)\nlet counterRef: &Counter = &counter as &Counter\n\ncounterRef.count  // is `42`\n\ncounterRef.increment()\n\ncounterRef.count  // is `43`\n")),(0,a.kt)("p",null,"References may be ",(0,a.kt)("strong",{parentName:"p"},"authorized")," or ",(0,a.kt)("strong",{parentName:"p"},"unauthorized"),"."),(0,a.kt)("p",null,"Authorized references have the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth")," modifier, i.e. the full syntax is ",(0,a.kt)("inlineCode",{parentName:"p"},"auth &T"),",\nwhereas unauthorized references do not have a modifier."),(0,a.kt)("p",null,"Authorized references can be freely upcasted and downcasted,\nwhereas unauthorized references can only be upcasted.\nAlso, authorized references are subtypes of unauthorized references."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'\n// Create an unauthorized reference to the counter,\n// typed with the restricted type `&{HasCount}`,\n// i.e. some resource that conforms to the `HasCount` interface\n//\nlet countRef: &{HasCount} = &counter as &{HasCount}\n\ncountRef.count  // is `43`\n\n// Invalid: The function `increment` is not available\n// for the type `&{HasCount}`\n//\ncountRef.increment()\n\n// Invalid: Cannot conditionally downcast to reference type `&Counter`,\n// as the reference `countRef` is unauthorized.\n//\n// The counter value has type `Counter`, which is a subtype of `{HasCount}`,\n// but as the reference is unauthorized, the cast is not allowed.\n// It is not possible to "look under the covers"\n//\nlet counterRef2: &Counter = countRef as? &Counter\n\n// Create an authorized reference to the counter,\n// again with the restricted type `{HasCount}`, i.e. some resource\n// that conforms to the `HasCount` interface\n//\nlet authCountRef: auth &{HasCount} = &counter as auth &{HasCount}\n\n// Conditionally downcast to reference type `&Counter`.\n// This is valid, because the reference `authCountRef` is authorized\n//\nlet counterRef3: &Counter = authCountRef as? &Counter\n\ncounterRef3.count  // is `43`\n\ncounterRef3.increment()\n\ncounterRef3.count  // is `44`\n')),(0,a.kt)("p",null,"References are ephemeral, i.e they cannot be ",(0,a.kt)("a",{parentName:"p",href:"accounts#account-storage"},"stored"),".\nInstead, consider ",(0,a.kt)("a",{parentName:"p",href:"capability-based-access-control"},"storing a capability and borrowing it")," when needed."))}f.isMDXComponent=!0}}]);