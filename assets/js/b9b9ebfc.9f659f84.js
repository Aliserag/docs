"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[77537],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=o,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},74398:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={title:"Quorum Certificate and Distributed Key Generation",sidebar_title:"QC and DKG",description:"How the Flow protocol manages the Epoch Setup Phase"},i=void 0,s={unversionedId:"Concepts/nodes/staking/qc-dkg",id:"Concepts/nodes/staking/qc-dkg",title:"Quorum Certificate and Distributed Key Generation",description:"How the Flow protocol manages the Epoch Setup Phase",source:"@site/docs/Concepts/nodes/staking/qc-dkg.mdx",sourceDirName:"Concepts/nodes/staking",slug:"/Concepts/nodes/staking/qc-dkg",permalink:"/docs/next/Concepts/nodes/staking/qc-dkg",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1682971554,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{title:"Quorum Certificate and Distributed Key Generation",sidebar_title:"QC and DKG",description:"How the Flow protocol manages the Epoch Setup Phase"},sidebar:"tutorialSidebar",previous:{title:"Query QC/DKG Info with Scripts or Events",permalink:"/docs/next/Concepts/nodes/staking/qc-dkg-scripts-events"},next:{title:"Epoch and Reward Schedule",permalink:"/docs/next/Concepts/nodes/staking/schedule"}},c={},l=[{value:"<code>FlowClusterQC</code> Transactions",id:"flowclusterqc-transactions",level:2},{value:"Create QC Voter Object",id:"create-qc-voter-object",level:3},{value:"Submit Vote",id:"submit-vote",level:3},{value:"<code>FlowDKG</code> Transactions",id:"flowdkg-transactions",level:2},{value:"Create DKG Participant Object",id:"create-dkg-participant-object",level:3},{value:"Post Whiteboard Message",id:"post-whiteboard-message",level:3},{value:"Send Final Submission",id:"send-final-submission",level:3}],p=(d="Callout",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var d;const h={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(p,{type:"warning",mdxType:"Callout"},"If you haven't read the Intro to Flow Staking document and the Epoch protocol document, please read that first. Those documents provide an overview of epochs on Flow for all users and are necessary prerequisites to this document."),(0,o.kt)(p,{type:"warning",mdxType:"Callout"},"This document assumes you have some technical knowledge about the Flow blockchain and programming environment."),(0,o.kt)("h1",{id:"epoch-setup-phase"},"Epoch Setup Phase"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Purpose:")," During the epoch setup phase, all nodes participating in the upcoming epoch\nmust perform setup tasks in preparation for the upcoming epoch, including\nthe Collector Cluster Quorum Certificate Generation and Consensus Committe Distributed Key Generation."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Duration:")," The epoch setup phase begins right after the ",(0,o.kt)("inlineCode",{parentName:"p"},"EpochSetup")," service event is emitted.\nIt ends with the block where ",(0,o.kt)("inlineCode",{parentName:"p"},"EpochCommit")," service emitted."),(0,o.kt)("h1",{id:"machine-accounts"},"Machine Accounts"),(0,o.kt)("p",null,"The processes described in this document are fully automated."),(0,o.kt)("p",null,"They are expected to be performed entirely by the node software with no manual\ninteraction required by the node operator after the node has been set up and registered."),(0,o.kt)("p",null,'To facilitate this, we recommend that node operators use a secondary "machine account"\nthat only stores the ',(0,o.kt)("inlineCode",{parentName:"p"},"FlowClusterQC.Voter")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowDKG.Participant")," resource objects\nin addition to FLOW to pay for transaction fees. You can connect your node to this account\nto participate in the Epoch Setup Phase without having to do the actions manually."),(0,o.kt)("p",null,"If you are using the ",(0,o.kt)("a",{parentName:"p",href:"/staking/staking-collection/"},"Staking Collection")," for your node,\nthis functionality is built-in. When you register a node with the staking collection,\nyou also have to provide a public key or keys for your machine account for the node."),(0,o.kt)("p",null,"If you have a node without a machine account (if you were operating a node from the time\nbefore epochs and staking collection were enabled, for example) the staking collection\nalso provides a method to create a machine account for an existing node."),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"/staking/staking-collection/#machine-account-support"},"Staking Collection Docs"),"\nfor more information."),(0,o.kt)("h1",{id:"collector-cluster-quorum-certificate-generation-protocol"},"Collector Cluster Quorum Certificate Generation Protocol"),(0,o.kt)("p",null,"The collector nodes are organized into clusters and must bootstrap\nthe Hotstuff consensus algorithm for each cluster. To do this,\nthey generate the root block for their respective clusters\nand submit a vote for the root block to a specialized smart contract, ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowClusterQC"),".\nIf 2/3 of the collectors in a cluster have voted with the same unique vote,\nthen the cluster is considered complete.\nOnce all clusters are complete, the QC is complete."),(0,o.kt)("h2",{id:"flowclusterqc-transactions"},(0,o.kt)("inlineCode",{parentName:"h2"},"FlowClusterQC")," Transactions"),(0,o.kt)("h3",{id:"create-qc-voter-object"},"Create QC Voter Object"),(0,o.kt)("p",null,"A node uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/onflow/flow-core-contracts/blob/master/contracts/epochs/FlowEpoch.cdc#L732"},(0,o.kt)("inlineCode",{parentName:"a"},"getClusterQCVoter()")),"\nfunction in the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch")," contract to create their Voter object and needs to provide\na reference to their ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeStaker")," object to prove they are the node owner."),(0,o.kt)("p",null,"When registering a node with the staking collection, this process is handled by\n",(0,o.kt)("a",{parentName:"p",href:"/staking/staking-collection/#register-a-new-staked-node"},"the transaction to register."),"\nIt also creates a machine account for the QC object."),(0,o.kt)("p",null,"If a user already has a registered node with the staking collection, but hasn't created their QC Voter object yet,\nthey can use the ",(0,o.kt)("a",{parentName:"p",href:"/staking/staking-collection/#create-a-machine-account-for-an-existing-node"},(0,o.kt)("inlineCode",{parentName:"a"},"create_machine_account.cdc")," transaction.")),(0,o.kt)("p",null,"If a user is not using the staking collection, they can use the ",(0,o.kt)("strong",{parentName:"p"},"Create QC Voter")," (",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#quorum-certificate-transactions-and-scripts"},"QC.01"),")\ntransaction. This will only store the QC Voter object in the account that stores the ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeStaker")," object.\nIt does not create a machine account or store it elsewhere, so it is not recommended to use. We encourage to use the staking collection instead."),(0,o.kt)("h3",{id:"submit-vote"},"Submit Vote"),(0,o.kt)("p",null,"During the Epoch Setup Phase, the node software should submit the votes for the QC generation\nautomatically using the ",(0,o.kt)("strong",{parentName:"p"},"Submit QC Vote")," (",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#quorum-certificate-transactions-and-scripts"},"QC.02"),")\ntransaction with the following arguments."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"voteSignature")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"String")),(0,o.kt)("td",{parentName:"tr",align:null},"The signed message (signed with the node's staking key)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"voteMessage")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"String")),(0,o.kt)("td",{parentName:"tr",align:null},"The raw message itself.")))),(0,o.kt)("h1",{id:"consensus-committee-distributed-key-generation-protocol-dkg"},"Consensus Committee Distributed Key Generation Protocol (DKG)"),(0,o.kt)("p",null,"The Random Beacon Committee for the next Epoch (currently all consensus nodes)\nwill run the DKG through a specialized smart contract, ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowDKG"),'.\nTo do this, they post a series of messages to a public "whiteboard" to\ncollectively generate a shared key array. When each node has enough information\nto generate their array of keys, they send the generated array to the smart contract\nas their final submission.\nIf ',(0,o.kt)("inlineCode",{parentName:"p"},"(# of consensus nodes-1)/2")," consensus nodes submit the same key array,\nthe DKG is considered to be complete."),(0,o.kt)("h2",{id:"flowdkg-transactions"},(0,o.kt)("inlineCode",{parentName:"h2"},"FlowDKG")," Transactions"),(0,o.kt)("h3",{id:"create-dkg-participant-object"},"Create DKG Participant Object"),(0,o.kt)("p",null,"A node uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/onflow/flow-core-contracts/blob/master/contracts/epochs/FlowEpoch.cdc#L746"},(0,o.kt)("inlineCode",{parentName:"a"},"getDKGParticipant()")),"\nfunction in the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch")," contract to create their Voter object and needs to provide\na reference to their ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowIDTableStaking.NodeStaker")," object to prove they are the node owner."),(0,o.kt)("p",null,"When registering a node with the staking collection, this process is handled by\n",(0,o.kt)("a",{parentName:"p",href:"/staking/staking-collection/#register-a-new-staked-node"},"the transaction to register."),"\nIt also creates a machine account for the DKG Object."),(0,o.kt)("p",null,"If a user already has a registered node with the staking collection, but hasn't created their DKG Participant object yet,\nthey can use the ",(0,o.kt)("a",{parentName:"p",href:"/staking/staking-collection/#create-a-machine-account-for-an-existing-node"},(0,o.kt)("inlineCode",{parentName:"a"},"create_machine_account.cdc")," transaction.")),(0,o.kt)("p",null,"If a user is not using the staking collection, they can use the ",(0,o.kt)("strong",{parentName:"p"},"Create DKG Participant")," (",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#dkg-transactions-and-scripts"},"DKG.01"),")\ntransaction. This will only store the DKG Participant object in the account that stores the ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeStaker")," object.\nIt does not create a machine account or store it elsewhere, so it is not recommended to use.\nThe staking collection is the recommended method."),(0,o.kt)("h3",{id:"post-whiteboard-message"},"Post Whiteboard Message"),(0,o.kt)("p",null,"During the Epoch Setup Phase, the node software should post whiteboard messages to the DKG\nautomatically using the ",(0,o.kt)("strong",{parentName:"p"},"Post Whiteboard Message")," (",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#dkg-transactions-and-scripts"},"DKG.02"),")\ntransaction with the following arguments."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"content")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"String")),(0,o.kt)("td",{parentName:"tr",align:null},"The content of the whiteboard message")))),(0,o.kt)("h3",{id:"send-final-submission"},"Send Final Submission"),(0,o.kt)("p",null,"During the Epoch Setup Phase, the node software should send its final submission for the DKG\nautomatically using the ",(0,o.kt)("strong",{parentName:"p"},"Send Final Submission")," (",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#dkg-transactions-and-scripts"},"DKG.03"),")\ntransaction with the following arguments."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"submission")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"[String?]")),(0,o.kt)("td",{parentName:"tr",align:null},"The final key vector submission for the DKG.")))),(0,o.kt)("h1",{id:"monitor-events-and-query-state-from-the-qc-and-dkg-contracts"},"Monitor Events and Query State from the QC and DKG Contracts"),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"/staking/qc-dkg-scripts-events"},"QC and DKG events and scripts document")," for information\nabout the events that can be emitted by these contracts and scripts you can use to query information."))}m.isMDXComponent=!0}}]);