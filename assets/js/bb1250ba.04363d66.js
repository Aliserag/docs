"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3521],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,m=p["".concat(s,".").concat(d)]||p[d]||h[d]||r;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={archived:!1,draft:!1,title:"3. Resource Contract Tutorial",description:"An introduction to resources, capabilities, and account storage in Cadence",date:new Date("2022-05-10T00:00:00.000Z"),meta:{keywords:["tutorial","Flow","Cadence","Resources","Capabilities"]},tags:["reference","cadence","tutorial"],socialImageTitle:"Cadence Resources",socialImageDescription:"Resource smart contract image."},l=void 0,i={unversionedId:"cadence/tutorial/03-resources",id:"cadence/tutorial/03-resources",title:"3. Resource Contract Tutorial",description:"An introduction to resources, capabilities, and account storage in Cadence",source:"@site/docs/cadence/tutorial/03-resources.mdx",sourceDirName:"cadence/tutorial",slug:"/cadence/tutorial/03-resources",permalink:"/cadence/tutorial/03-resources",draft:!1,tags:[{label:"reference",permalink:"/tags/reference"},{label:"cadence",permalink:"/tags/cadence"},{label:"tutorial",permalink:"/tags/tutorial"}],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682538265,formattedLastUpdatedAt:"Apr 26, 2023",frontMatter:{archived:!1,draft:!1,title:"3. Resource Contract Tutorial",description:"An introduction to resources, capabilities, and account storage in Cadence",date:"2022-05-10T00:00:00.000Z",meta:{keywords:["tutorial","Flow","Cadence","Resources","Capabilities"]},tags:["reference","cadence","tutorial"],socialImageTitle:"Cadence Resources",socialImageDescription:"Resource smart contract image."},sidebar:"tutorialSidebar",previous:{title:"2. Hello World",permalink:"/cadence/tutorial/02-hello-world"},next:{title:"4. Capability Tutorial",permalink:"/cadence/tutorial/04-capabilities"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Implementing a Contract with Resources",id:"implementing-a-contract-with-resources",level:2},{value:"Resources",id:"resources",level:3},{value:"The Move Operator (<code>&lt;-</code>)",id:"the-move-operator--",level:3},{value:"Create Hello Transaction",id:"create-hello-transaction",level:3},{value:"Load Hello Transaction",id:"load-hello-transaction",level:3},{value:"Reviewing the Resource Contract",id:"reviewing-the-resource-contract",level:2}],u=(p="Callout",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var p;const h={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)(u,{type:"success",mdxType:"Callout"},"Open the starter code for this tutorial in the Flow Playground: ",(0,o.kt)("br",null),(0,o.kt)("a",{href:"https://play.onflow.org/b70199ae-6488-4e58-ae58-9f4ffecbd66a",target:"_blank"},"https://play.onflow.org/b70199ae-6488-4e58-ae58-9f4ffecbd66a"),(0,o.kt)("br",null),"The tutorial will ask you to take various actions to interact with this code."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},"Instructions that require you to take action are always included in a callout box like this one. These highlighted actions are all that you need to do to get your code running, but reading the rest is necessary to understand the language's design."),(0,o.kt)("p",null,"This tutorial builds on the previous ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello World")," tutorial.\nBefore beginning this tutorial, you should understand :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../language/accounts"},"Accounts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../language/transactions"},"Transactions")),(0,o.kt)("li",{parentName:"ul"},"Signers"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../language/composite-types"},"Field types"))),(0,o.kt)("p",null,"This tutorial will build on your understanding of accounts and how to interact with them by introducing resources.\nResources are one of the Cadence's defining features.\nIn Cadence, resources are a composite type like a struct or a class, but with some special rules."),(0,o.kt)("p",null,"Resources are useful when you want to model direct ownership.\nTraditional structs or classes from other conventional programming languages are not an ideal way to represent ownership because they can be ",(0,o.kt)("em",{parentName:"p"},"copied"),".\nThis means a coding error can easily result in creating multiple copies of the same asset, which breaks the scarcity requirements needed for these assets to have real value.\nWe have to consider loss and theft at the scale of a house, a car, or a bank account with millions of dollars, or a horse.\nResources, in turn, solve this problem by making creation, destruction, and movement of assets explicit."),(0,o.kt)("p",null,"In this tutorial, you will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Deploy a contract that declares a resource"),(0,o.kt)("li",{parentName:"ol"},"Save the resource into the account storage"),(0,o.kt)("li",{parentName:"ol"},"Interact with the resource we created using a transaction")),(0,o.kt)("h2",{id:"implementing-a-contract-with-resources"},"Implementing a Contract with Resources"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"To interact with resources, you'll learn a few important concepts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using the create keyword"),(0,o.kt)("li",{parentName:"ul"},"The move operator ",(0,o.kt)("inlineCode",{parentName:"li"},"<-")),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"../language/accounts#account-storage-api"},"Account Storage API"))),(0,o.kt)("p",null,"Let's start by looking at how to create a resource with the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," keyword and the move operator ",(0,o.kt)("inlineCode",{parentName:"p"},"<-"),"."),(0,o.kt)("p",null,"You use the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," keyword used to initialize a resource.\nResources ",(0,o.kt)("strong",{parentName:"p"},"must")," be created before you can use them."),(0,o.kt)("p",null,"The move operator ",(0,o.kt)("inlineCode",{parentName:"p"},"<-")," is used to move a resource into a variable.\nYou cannot use the assignment operator ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," with resources, so when you initialize a resource you will need to use the move operator ",(0,o.kt)("inlineCode",{parentName:"p"},"<-"),"."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the Account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," tab with file named ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorldResource.cdc"),". ",(0,o.kt)("br",null),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorldResource.cdc")," should contain the following code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=HelloWorldResource.cdc"},'pub contract HelloWorld {\n\n    // Declare a resource that only includes one function.\n    pub resource HelloAsset {\n\n        // A transaction can call this function to get the "Hello, World!"\n        // message from the resource.\n        pub fun hello(): String {\n            return "Hello, World!"\n        }\n    }\n\n    // We\'re going to use the built-in create function to create a new instance\n    // of the HelloAsset resource\n    pub fun createHelloAsset(): @HelloAsset {\n        return <-create HelloAsset()\n    }\n\n    init() {\n        log("Hello Asset")\n    }\n}\n')),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Deploy this code to account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deploy")," button.")),(0,o.kt)("p",null,"We start by declaring a new ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract in account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01"),", inside this new ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract we:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Declare the resource ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloAsset")," with public scope ",(0,o.kt)("inlineCode",{parentName:"li"},"pub")),(0,o.kt)("li",{parentName:"ol"},"Declare the function ",(0,o.kt)("inlineCode",{parentName:"li"},"hello()")," inside ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloAsset")," with public scope ",(0,o.kt)("inlineCode",{parentName:"li"},"pub")),(0,o.kt)("li",{parentName:"ol"},"Declare the function ",(0,o.kt)("inlineCode",{parentName:"li"},"createHelloAsset()")," which will ",(0,o.kt)("inlineCode",{parentName:"li"},"create")," a ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloAsset")," resource"),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"createHelloAsset()")," function will use the move operator (",(0,o.kt)("inlineCode",{parentName:"li"},"<-"),") to return the resource")),(0,o.kt)("p",null,"This is another example of what we can do with a contract.\nCadence can declare type definitions within deployed contracts.\nA type definition is simply a description of how a particular set of data is organized.\nIt ",(0,o.kt)("strong",{parentName:"p"},"isn't")," a copy of that data on its own.\nAny account can import these definitions and use them to create an object that follows that definition or to interact with other objects of those types."),(0,o.kt)("p",null,"This contract that we just deployed declares a definition for the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," resource and a function to create the resource."),(0,o.kt)("p",null,"Let's walk through this contract in more detail, starting with the resource.\nResources are one of the most important things that Cadence introduces to the smart contract design experience:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'pub resource HelloAsset {\n    pub fun hello(): String {\n        return "Hello, World!"\n    }\n}\n')),(0,o.kt)("h3",{id:"resources"},"Resources"),(0,o.kt)("p",null,"The key difference between a resource and a struct or class is the access scope for resources:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Each instance of a resource can only exist in exactly one location and cannot be copied.\nHere, location refers to account storage, a temporary variable in a function, a storage field in a contract, etc."),(0,o.kt)("li",{parentName:"ul"},"Resources must be explicitly moved from one location to another when accessed."),(0,o.kt)("li",{parentName:"ul"},"Resources also cannot go out of scope at the end of function execution.\nThey must be explicitly stored somewhere or destroyed.")),(0,o.kt)("p",null,"These characteristics make it impossible to accidentally lose a resource from a coding mistake."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"init() {\n// ...\n")),(0,o.kt)("p",null,"All composite types like contracts, resources,\nand structs can have an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"init()")," function that only runs when the object is initially created.\nCadence requires that all fields must be explicitly initialized,\nso if the object has any fields,\nthis function has to be used to initialize them."),(0,o.kt)("p",null,"Contracts also have read and write access to the storage of the account that they are deployed to by using the built-in\n",(0,o.kt)("a",{parentName:"p",href:"../language/contracts"},(0,o.kt)("inlineCode",{parentName:"a"},"self.account"))," object.\nThis is an ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#authaccount"},(0,o.kt)("inlineCode",{parentName:"a"},"AuthAccount")," object"),"\nthat gives them access to many different functions to interact with the private storage of the account."),(0,o.kt)("p",null,"This contract's ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," function is simple, it logs the phrase ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hello Asset"')," to the console."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A resource can only be created in the scope that it is defined in.")),(0,o.kt)("p",null,"This prevents anyone from being able to create arbitrary amounts of resource objects that others have defined."),(0,o.kt)("h3",{id:"the-move-operator--"},"The Move Operator (",(0,o.kt)("inlineCode",{parentName:"h3"},"<-"),")"),(0,o.kt)("p",null,"In this example, we declared a function that can create ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," resources:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub fun createHelloAsset(): @HelloAsset {\n    return <-create HelloAsset()\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," symbol specifies that it is a resource, of the type ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," which we defined in the contract.\nThis function uses the move operator to create a resource of type ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," and return it\nTo create a new resource object, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," keyword"),(0,o.kt)("p",null,"Here we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<-")," symbol. ",(0,o.kt)("a",{parentName:"p",href:"../language/resources#the-move-operator--"},"This is the move operator"),".\nThe move operator ",(0,o.kt)("inlineCode",{parentName:"p"},"<-")," replaces the assignment operator ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," in assignments that involve resources.\nTo make the assignment of resources explicit, the move operator ",(0,o.kt)("inlineCode",{parentName:"p"},"<-")," must be used when:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the resource is the initial value of a constant or variable,"),(0,o.kt)("li",{parentName:"ul"},"the resource is moved to a different variable in an assignment,"),(0,o.kt)("li",{parentName:"ul"},"the resource is moved to a function as an argument"),(0,o.kt)("li",{parentName:"ul"},"the resource is returned from a function.")),(0,o.kt)("p",null,"When a resource is moved, the old location is invalidated, and the object moves into the context of the new location."),(0,o.kt)("p",null,"So if I have a resource in the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"first_resource"),", like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"// Note the `@` symbol to specify that it is a resource\nvar first_resource: @AnyResource <- create AnyResource()\n")),(0,o.kt)("p",null,"and I want to assign it to a new variable, ",(0,o.kt)("inlineCode",{parentName:"p"},"second_resource"),",\nafter I do the assignment, ",(0,o.kt)("inlineCode",{parentName:"p"},"first_resource")," is invalid because the underlying resource has been moved to the new variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"var second_resource <- first_resource\n// first_resource is now invalid. Nothing can be done with it\n")),(0,o.kt)("p",null,"Regular assignments of resources are not allowed because assignments only copy the value.\nResources can only exist in one location at a time, so movement must be explicitly shown in the code by using the move operator ",(0,o.kt)("inlineCode",{parentName:"p"},"<-"),"."),(0,o.kt)("h3",{id:"create-hello-transaction"},"Create Hello Transaction"),(0,o.kt)("p",null,"Now we're going to use a transaction to that calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"createHelloAsset()")," function\nand saves a ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," resource to the account storage."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the transaction named ",(0,o.kt)("inlineCode",{parentName:"p"},"Create Hello"),"."),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Create Hello")," should contain the following code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=CreateHello.cdc"},'// Transaction1.cdc\n// This transaction calls the createHelloAsset() function from the contract\n// to create a resource, then saves the resource in account storage using the "save" method.\nimport HelloWorld from 0x01\n\ntransaction {\n\n    prepare(acct: AuthAccount) {\n        // Here we create a resource and move it to the variable newHello,\n        // then we save it in the account storage\n        let newHello <- HelloWorld.createHelloAsset()\n\n        acct.save(<-newHello, to: /storage/HelloAssetTutorial)\n    }\n\n    // In execute, we log a string to confirm that the transaction executed successfully.\n    execute {\n        log("Saved Hello Resource to account.")\n    }\n}\n')),(0,o.kt)("p",null,"Here's what this transaction does:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Import the ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloWorld")," definitions from account ",(0,o.kt)("inlineCode",{parentName:"li"},"0x01")),(0,o.kt)("li",{parentName:"ol"},"Uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"createHelloAsset()")," function to create a resource and move it to ",(0,o.kt)("inlineCode",{parentName:"li"},"newHello")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"save")," the created resource in the account storage of the account that deployed this contract, at the path ",(0,o.kt)("inlineCode",{parentName:"li"},"/storage/HelloAssetTutorial")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"log")," the text ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloAsset created and stored")," to the console.")),(0,o.kt)("p",null,"This is our first transaction using the ",(0,o.kt)("inlineCode",{parentName:"p"},"prepare")," phase!\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"prepare")," phase is the only place that has access to the signing accounts'\n",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#authaccount"},"private ",(0,o.kt)("inlineCode",{parentName:"a"},"AuthAccount")," object"),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," objects have many different methods that are used to interact with account storage.\nYou can see the documentation for all of these in the ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#authaccount"},"account section of the language reference"),".\nIn this tutorial, we'll be using ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," methods to save and load from ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/"),".\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"prepare")," phase can also create ",(0,o.kt)("inlineCode",{parentName:"p"},"/private/")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/public/")," links to the objects in ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/"),",\ncalled ",(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},"capabilities")," (more on these later)."),(0,o.kt)("p",null,"By not allowing the execute phase to access account storage,\nwe can statically verify which assets and areas of the signers' storage a given transaction can modify.\nBrowser wallets and applications that submit transactions for users can use this to show what a transaction could alter,\ngiving users information about transactions that wallets will be executing for them,\nand confidence that they aren't getting fed a malicious or dangerous transaction from an app or wallet."),(0,o.kt)("p",null,"Let's go over the transaction in more detail.\nTo create a ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," resource, we accessed the function ",(0,o.kt)("inlineCode",{parentName:"p"},"createHelloAsset()")," from our contract, and moved the\nresource it created to the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"newHello"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"let newHello <- HelloWorld.createHelloAsset()\n")),(0,o.kt)("p",null,"Next, we save the resource to the account storage.\nWe use the ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#account-storage-api"},"account storage API")," to interact with the account storage in Flow.\nTo save the resource, we'll be using the\n",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#account-storage-api"},(0,o.kt)("inlineCode",{parentName:"a"},"save()")),"\nmethod from the account storage API to store the resource in the account at the path ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/HelloAssetTutorial"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"acct.save(<-newHello, to: /storage/HelloAssetTutorial)\n")),(0,o.kt)("p",null,"The first parameter to ",(0,o.kt)("inlineCode",{parentName:"p"},"save")," is the object that is being stored,\nand the ",(0,o.kt)("inlineCode",{parentName:"p"},"to")," parameter is the path that the object is being stored at.\nThe path must be a storage path, so only the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/")," is allowed as the ",(0,o.kt)("inlineCode",{parentName:"p"},"to")," parameter."),(0,o.kt)("p",null,"If there is already an object stored under the given path, the program aborts.\nRemember, the Cadence type system ensures that a resource can never be accidentally lost.\nWhen moving a resource to a field, into an array, into a dictionary, or into storage,\nthere is the possibility that the location already contains a resource.\nCadence forces the developer to handle the case of an existing resource so that it is not accidentally lost through an overwrite."),(0,o.kt)("p",null,"It is also very important when choosing the name of your paths to pick an identifier\nthat is very specific and unique to your project.\nCurrently, account storage paths are global, so there is a chance that projects could use the same storage paths,\n",(0,o.kt)("strong",{parentName:"p"},"which could cause path conflicts"),"!\nThis could be a headache for you, so choose unique path names to avoid this problem."),(0,o.kt)("p",null,"Finally, in the execute phase we log the phrase ",(0,o.kt)("inlineCode",{parentName:"p"},'"Saved Hello Resource to account."')," to the console."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'log("Saved Hello Resource to account.")\n')),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Select account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," as the only signer. Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," button to submit\nthe transaction.")),(0,o.kt)("p",null,"You should see something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"Saved Hello Resource to account."\n')),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"You can also try removing the line of code that saves ",(0,o.kt)("inlineCode",{parentName:"p"},"newHello")," to storage."),(0,o.kt)("br",null),"You should see an error for `newHello` that says `loss of resource`. This means that you are not handling the resource properly. If you ever see this error in any of your programs, it means there is a resource somewhere that is not being explicitly stored or destroyed, meaning the program is invalid.",(0,o.kt)("br",null),"Add the line back to make the contract check properly."),(0,o.kt)("p",null,"In this case, this is the first time we have saved anything with the selected account,\nso we know that the storage spot at ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/HelloAssetTutorial")," is empty.\nIn real applications, we would likely perform necessary checks and actions with the location path we are storing in\nto make sure we don't abort a transaction because of an accidental overwrite."),(0,o.kt)("p",null,"Now that you have executed the transaction, account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," should have the newly created ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.HelloAsset"),"\nresource stored in its storage."),(0,o.kt)("h3",{id:"load-hello-transaction"},"Load Hello Transaction"),(0,o.kt)("p",null,"Now we're going to use a transaction to call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," resource."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the transaction named ",(0,o.kt)("inlineCode",{parentName:"p"},"Load Hello"),"."),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Load Hello")," should contain the following code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=LoadHello.cdc"},'import HelloWorld from 0x01\n\n// This transaction calls the "hello" method on the HelloAsset object\n// that is stored in the account\'s storage by removing that object\n// from storage, calling the method, and then putting it back in storage\n\ntransaction {\n\n    prepare(acct: AuthAccount) {\n\n        // Load the resource from storage, specifying the type to load it as\n        // and the path where it is stored\n        let helloResource <- acct.load<@HelloWorld.HelloAsset>(from: /storage/HelloAssetTutorial)\n\n        // We use optional chaining (?) because the value in storage\n        // may or may not exist, and thus is considered optional.\n        log(helloResource?.hello())\n\n        // Put the resource back in storage at the same spot\n        // We use the force-unwrap operator `!` to get the value\n        // out of the optional. It aborts if the optional is nil\n        acct.save(<-helloResource!, to: /storage/HelloAssetTutorial)\n    }\n}\n')),(0,o.kt)("p",null,"Here's what this transaction does:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Import the ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloWorld")," definitions from account ",(0,o.kt)("inlineCode",{parentName:"li"},"0x01")),(0,o.kt)("li",{parentName:"ol"},"Moves the ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloAsset")," object from storage to ",(0,o.kt)("inlineCode",{parentName:"li"},"helloResource")," with the move operator\nand the ",(0,o.kt)("inlineCode",{parentName:"li"},"load")," function from the ",(0,o.kt)("a",{parentName:"li",href:"../language/accounts#account-storage-api"},"account storage API")),(0,o.kt)("li",{parentName:"ol"},"Calls the ",(0,o.kt)("inlineCode",{parentName:"li"},"hello()")," function of the ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloAsset")," resource stored in ",(0,o.kt)("inlineCode",{parentName:"li"},"helloResource")," and logs the result"),(0,o.kt)("li",{parentName:"ol"},"Saves the resource in the account that we originally moved it from at the path ",(0,o.kt)("inlineCode",{parentName:"li"},"/storage/HelloAssetTutorial"))),(0,o.kt)("p",null,"We're going to be using the ",(0,o.kt)("inlineCode",{parentName:"p"},"prepare")," phase again to load the resource because it\nhas access to the signing accounts' ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#authaccount"},"private ",(0,o.kt)("inlineCode",{parentName:"a"},"AuthAccount")," object"),"."),(0,o.kt)("p",null,"Let's go over the transaction in more detail.\nTo remove an object from storage, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," method from the ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#account-storage-api"},"account storage API")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"let helloResource <- acct.load<@HelloWorld.HelloAsset>(from: /storage/HelloAssetTutorial)\n")),(0,o.kt)("p",null,"If no object of the specified type is stored under the given path, the function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\n(This is an ",(0,o.kt)("a",{parentName:"p",href:"../language/values-and-types#optionals"},"Optional"),",\na special type of data that we will cover later)"),(0,o.kt)("p",null,"If the object at the given path is not of the specified type, Cadence will throw an error and the transaction will fail."),(0,o.kt)("p",null,"If there is an object of the specified type at the path,\nthe function returns that object and the account storage will no longer contain an object under the given path."),(0,o.kt)("p",null,"The type parameter for the object type to load is contained in ",(0,o.kt)("inlineCode",{parentName:"p"},"<>"),".\nA type argument for the parameter must be provided explicitly, which is ",(0,o.kt)("inlineCode",{parentName:"p"},"@HelloWorld.HelloAsset")," here.\n(Note the ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," symbol to specify that it is a resource)"),(0,o.kt)("p",null,"The path ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," must be a storage path, so only the domain ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/")," is allowed."),(0,o.kt)("p",null,"Next, we call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," function and log the output."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"log(helloResource?.hello())\n")),(0,o.kt)("p",null,"We use ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," because the values in the storage are returned as ",(0,o.kt)("a",{parentName:"p",href:"../language/values-and-types#optionals"},"optionals"),".\nOptionals are values that can represent the absence of a value.\nOptionals have two cases: either there is a value of the specified type, or there is nothing (",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),").\nAn optional type is declared using the ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," suffix."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"let newResource: HelloAsset?  // could either have a value of type `HelloAsset`\n                              // or it could have a value of `nil`\n")),(0,o.kt)("p",null,"Optionals allow developers to account for ",(0,o.kt)("inlineCode",{parentName:"p"},"nil")," cases more gracefully.\nHere, we explicitly have to account for the possibility that the ",(0,o.kt)("inlineCode",{parentName:"p"},"helloResource")," object we got with ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),"\n(because ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," will return ",(0,o.kt)("inlineCode",{parentName:"p"},"nil")," if there is nothing there to load)."),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"?"),' "unwraps" the optional, meaning that it gets the value if it is there, before calling ',(0,o.kt)("inlineCode",{parentName:"p"},"hello"),",\nbut only if the value isn't ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),". If the value is nil, the ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,o.kt)("p",null,"Because ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," is used when calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello")," function, the function call only happens if the stored value is not ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nIn this case, the result of the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello")," function will be returned as an optional.\nHowever, if the stored value was ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),", the function call would not occur and the result is ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,o.kt)("p",null,"Next, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"save")," again to put the object back in storage in the same spot:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"acct.save(<-helloResource!, to: /storage/HelloAssetTutorial)\n")),(0,o.kt)("p",null,"Remember, ",(0,o.kt)("inlineCode",{parentName:"p"},"helloResource")," is still an optional, so we have to handle the possibility that it is ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nHere, we use the force-unwrap operator (",(0,o.kt)("inlineCode",{parentName:"p"},"!"),"). This operator gets the value in the optional if it contains a value,\nand aborts the entire transaction if the object is ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),".\nIt is a more risky way of dealing with optionals, but if your program is ever in a state where a value being ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),"\nwould defeat the purpose of the whole transaction, then the force-unwrap operator might be a good choice to deal with that."),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("a",{parentName:"p",href:"../language/values-and-types#optionals"},"Optionals In Cadence")," to learn more about optionals and how they are used."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Select account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," as the only signer. Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," button to submit\nthe transaction.")),(0,o.kt)("p",null,"You should see something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"Hello, World!"\n')),(0,o.kt)("h2",{id:"reviewing-the-resource-contract"},"Reviewing the Resource Contract"),(0,o.kt)("p",null,"This tutorial covered an introduction to resources in Cadence,\nusing the account storage API and interacting with resources using transactions."),(0,o.kt)("p",null,"You implemented a smart contract that is accessible in all scopes.\nThe smart contract had a resource declared that implemented a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()"),"\nthat returns the string ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hello, World!"'),"\nand declared a function that can create a resource."),(0,o.kt)("p",null,"Next, you deployed this contract in an account and implemented a transaction to create the resource in the smart contract\nand save it in the account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," by using it as the signer for this transaction."),(0,o.kt)("p",null,"Finally, you used a transaction to move the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," resource from account storage, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello")," method,\nand return it to the account storage."),(0,o.kt)("p",null,"Now that you have completed the tutorial, you have the basic knowledge to write a simple Cadence program that can:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Implement a resource in a smart contract"),(0,o.kt)("li",{parentName:"ul"},"Save, move, and load resources using the account storage API and the move operator ",(0,o.kt)("inlineCode",{parentName:"li"},"<-")),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"prepare")," phase of a transaction to load resources from account storage")),(0,o.kt)("p",null,"Feel free to modify the smart contract to create different resources,\nexperiment with the available ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#account-storage-api"},"account storage API"),",\nand write new transactions and scripts that execute different functions from your smart contract.\nHave a look at the ",(0,o.kt)("a",{parentName:"p",href:"../language/resources"},"resource reference page"),"\nto find out more about what you can do with resources."),(0,o.kt)("p",null,"You're on the right track to building more complex applications with Cadence,\nnow is a great time to check out the ",(0,o.kt)("a",{parentName:"p",href:"../design-patterns"},"Cadence Best Practices document"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"../anti-patterns"},"Anti-patterns document"),"\nas your applications become more complex."))}m.isMDXComponent=!0}}]);