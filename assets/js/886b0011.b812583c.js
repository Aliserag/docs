"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4159],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={},o="Release Process",l={unversionedId:"cadence/releasing",id:"cadence/releasing",title:"Release Process",description:"Assume releasing Cadence version v0.21.2 from master branch.",source:"@site/docs/cadence/releasing.md",sourceDirName:"cadence",slug:"/cadence/releasing",permalink:"/cadence/releasing",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618258,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Measuring Time In Cadence",permalink:"/cadence/measuring-time"},next:{title:"Security Best Practices",permalink:"/cadence/security-best-practices"}},s={},c=[{value:"Using GitHub Actions",id:"using-github-actions",level:2},{value:"Checking backward compatibility",id:"checking-backward-compatibility",level:3},{value:"Releasing",id:"releasing",level:3},{value:"Manual Steps",id:"manual-steps",level:2},{value:"Checking backward compatibility",id:"checking-backward-compatibility-1",level:3},{value:"Releasing",id:"releasing-1",level:3},{value:"Creating a new GitHub release",id:"creating-a-new-github-release",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"release-process"},"Release Process"),(0,r.kt)("p",null,"Assume releasing Cadence version ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.21.2")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch.\nAlso, assume the latest deployed version on the live networks is ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.21.0"),"."),(0,r.kt)("h2",{id:"using-github-actions"},"Using GitHub Actions"),(0,r.kt)("p",null,"Cadence repo provides a set of useful ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/cadence/actions"},"GitHub actions")," that can be used to\nrelease a new version of Cadence."),(0,r.kt)("h3",{id:"checking-backward-compatibility"},"Checking backward compatibility"),(0,r.kt)("p",null,"Cadence releases should be backwards compatible and are not supposed to have any breaking changes. There may be exceptions from this rule - in those cases any Cadence release that contains breaking changes must be discussed with the wider Flow community and there must be a consensus that the breaking changes are requried to improveve Cadence.\nThis step ensures the version that is going to be released does not contain such changes."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If it is expected to have breaking changes in the new version, you may skip this step and proceed to the ",(0,r.kt)("a",{parentName:"em",href:"#releasing"},"releasing"),"\nstep.")),(0,r.kt)("p",null,"Check for breaking changes can be done using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/cadence/actions/workflows/compatibility-check.yml"},"BackwardCompatibilityCheck"),"\ngithub action."),(0,r.kt)("img",{src:"images/compatibility_check_action_trigger.png",width:"800"}),(0,r.kt)("p",null,"Run the workflow by providing ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"Current branch/tag")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.21.0")," which is the latest deployed version\non the live networks, as the ",(0,r.kt)("inlineCode",{parentName:"p"},"Base branch/tag"),".\nSince the release would be based on the current master branch, the compatibility check would compare the current ",(0,r.kt)("inlineCode",{parentName:"p"},"master"),"\nbranch against ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.21.0")," branch/tag."),(0,r.kt)("img",{src:"images/compatibility_check_action_params.png",width:"300"}),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("em",{parentName:"p"},"Note: If the workflow fails due to differences in checking results, you may want to analyze the outputs/diff to see\nwhether they are actual breaking changes.\nThe workflow also uploads the checking results as artifacts, which can be downloaded and analyzed manually.")),(0,r.kt)("h3",{id:"releasing"},"Releasing"),(0,r.kt)("p",null,"Releasing a new version of Cadence can be easily done by using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/cadence/actions/workflows/release.yml"},"Release GitHub action"),"\nRun the workflow by providing ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.21.2")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"Release version")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," as the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Base branch"),"."),(0,r.kt)("img",{src:"images/release_action.png",width:"800"}),(0,r.kt)("p",null,"If everything goes well, this will create and push a new tag ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.21.2")," for the release."),(0,r.kt)("p",null,"It'll also create a new branch ",(0,r.kt)("inlineCode",{parentName:"p"},"release/v0.21.2")," on the repo and a PR to merge the version bump changes (version number constant in version.go, etc.) to the\nbase branch (",(0,r.kt)("inlineCode",{parentName:"p"},"master")," in this case)."),(0,r.kt)("h2",{id:"manual-steps"},"Manual Steps"),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("em",{parentName:"p"},"It is highly recommended to use the ",(0,r.kt)("a",{parentName:"em",href:"#using-github-actions"},"GitHub actions")," for releasing a new Cadence version.")),(0,r.kt)("h3",{id:"checking-backward-compatibility-1"},"Checking backward compatibility"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Checkout the ",(0,r.kt)("inlineCode",{parentName:"li"},"master")," branch",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"git checkout master\n"))),(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"tmp")," directory to store outputs.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"mkdir tmp\n"))),(0,r.kt)("li",{parentName:"ul"},"Download contracts for ",(0,r.kt)("strong",{parentName:"li"},"mainnet"),", by running the batch-script tool.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd ./tools/batch-script\ngo run ./cmd/get_contracts/main.go --chain=flow-mainnet --u=access.mainnet.nodes.onflow.org:9000 > ../../tmp/mainnet_contracts.csv\ncd ../..\n"))),(0,r.kt)("li",{parentName:"ul"},"Navigate to the ",(0,r.kt)("inlineCode",{parentName:"li"},"compatibility-check")," tool and update it to use the Cadence branch from which the new release\nwould be created.\nHere, since the release would also be done on the master branch, the current branch would also be ",(0,r.kt)("inlineCode",{parentName:"li"},"master"),".",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd ./tools/compatibility-check\ngo get github.com/onflow/cadence@master\ngo mod tidy\n"))),(0,r.kt)("li",{parentName:"ul"},"Check the contracts using the current branch.\nThis will write the parsing and checking errors to the ",(0,r.kt)("inlineCode",{parentName:"li"},"tmp/mainnet_output_new.txt")," file.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"go run ./cmd/check_contracts/main.go ../../tmp/mainnet_contracts.csv ../../tmp/mainnet_output_new.txt\n"))),(0,r.kt)("li",{parentName:"ul"},"Update the tool to Cadence version that is currently deployed on networks (",(0,r.kt)("inlineCode",{parentName:"li"},"v0.21.0"),"), and repeat the previous step.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"go get github.com/onflow/cadence@v0.21.0\ngo mod tidy\ngo run ./cmd/check_contracts/main.go ../../tmp/mainnet_contracts.csv ../../tmp/mainnet_output_old.txt\ncd ../..\n"))),(0,r.kt)("li",{parentName:"ul"},"Compare the diff between the two outputs.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd ./tools/compatibility-check\ngo run ./cmd/check_diff/main.go ../../tmp/output-old.txt ../../tmp/output-new.txt\n"))),(0,r.kt)("li",{parentName:"ul"},"If there is a difference in the errors reported, then there are potential breaking changes."),(0,r.kt)("li",{parentName:"ul"},"Repeat the same steps for ",(0,r.kt)("strong",{parentName:"li"},"testnet")," as well. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"--chain=flow-testnet --u=access.testnet.nodes.onflow.org:9000"),"\nflags when running the ",(0,r.kt)("inlineCode",{parentName:"li"},"go run ./cmd/get_contracts/main.go")," command.")),(0,r.kt)("p",null,"If it is deemed that there are no breaking changes, proceed to the ",(0,r.kt)("a",{parentName:"p",href:"#releasing-1"},"Releasing")," steps."),(0,r.kt)("h3",{id:"releasing-1"},"Releasing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Checkout the base branch.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"git checkout master\n"))),(0,r.kt)("li",{parentName:"ul"},"Create a release branch.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"git checkout -b release/v0.21.2\n"))),(0,r.kt)("li",{parentName:"ul"},"Update the version numbers in the code.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"make release bump=0.21.2\n"))),(0,r.kt)("li",{parentName:"ul"},"Run tests and linter. Ensure they pass successfully.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"make test && make lint\n"))),(0,r.kt)("li",{parentName:"ul"},"Commit the changes with message ",(0,r.kt)("inlineCode",{parentName:"li"},"v0.21.2"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'git commit -m "v0.21.2"\n'))),(0,r.kt)("li",{parentName:"ul"},"Create a new tag ",(0,r.kt)("inlineCode",{parentName:"li"},"v0.21.2")," and push to the remote repo.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"git tag v0.21.2 && git push origin v0.21.2\n"))),(0,r.kt)("li",{parentName:"ul"},"Push the release branch ",(0,r.kt)("inlineCode",{parentName:"li"},"release/v0.21.2")," that contains the version bump changes.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"git push origin release/v0.21.2\n"))),(0,r.kt)("li",{parentName:"ul"},"Finally, open a PR from ",(0,r.kt)("inlineCode",{parentName:"li"},"release/v0.21.2")," branch to the base branch (",(0,r.kt)("inlineCode",{parentName:"li"},"master")," in this case),\nto include the version bump changes.")),(0,r.kt)("h2",{id:"creating-a-new-github-release"},"Creating a new GitHub release"),(0,r.kt)("p",null,"Once the PR which updates the version got merged, a GitHub release can be created."),(0,r.kt)("p",null,'Go to the overview of all tags and select "Create release":'),(0,r.kt)("img",{src:"images/release_tag.png",width:"800"}),(0,r.kt)("p",null,'On the release page, click the "Generate release notes" button:'),(0,r.kt)("img",{src:"images/create_release.png",width:"800"}),(0,r.kt)("p",null,"Edit the pre-populated description, e.g. by summarizing multiple PRs that contributed to a single feature,\nas readers might not be and should not have to be familiar with the implementation details."),(0,r.kt)("p",null,"By default, the new release is set as the latest release.\nUsually this is the case, but uncheck this e.g. when releasing a bugfix release for an older version."),(0,r.kt)("p",null,'Finally, click "Publish release", and you are all done! \ud83c\udf89'))}u.isMDXComponent=!0}}]);