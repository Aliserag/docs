"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[23749],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=o,m=h["".concat(c,".").concat(d)]||h[d]||u[d]||r;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[h]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48204:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={title:"Query Epoch Info with Scripts or Events",sidebar_title:"Epoch Scripts and Events"},i="Introduction",s={unversionedId:"Concepts/nodes/staking/epoch-scripts-events",id:"Concepts/nodes/staking/epoch-scripts-events",title:"Query Epoch Info with Scripts or Events",description:"The epoch contract stores a lot of different state, and the state is constantly changing.",source:"@site/docs/Concepts/nodes/staking/epoch-scripts-events.mdx",sourceDirName:"Concepts/nodes/staking",slug:"/Concepts/nodes/staking/epoch-scripts-events",permalink:"/docs/next/Concepts/nodes/staking/epoch-scripts-events",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1682971554,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{title:"Query Epoch Info with Scripts or Events",sidebar_title:"Epoch Scripts and Events"},sidebar:"tutorialSidebar",previous:{title:"Epoch Preparation Protocol",permalink:"/docs/next/Concepts/nodes/staking/epoch-preparation"},next:{title:"Epoch and Staking Terminology",permalink:"/docs/next/Concepts/nodes/staking/epoch-terminology"}},c={},p=[{value:"What is a Service Event?",id:"what-is-a-service-event",level:2},{value:"Event Descriptions",id:"event-descriptions",level:2},{value:"<code>EpochSetup</code>",id:"epochsetup",level:3},{value:"<code>EpochCommit</code>",id:"epochcommit",level:3},{value:"Get Epoch Metadata",id:"get-epoch-metadata",level:3},{value:"Get Configurable Metadata",id:"get-configurable-metadata",level:3},{value:"Get Epoch Counter",id:"get-epoch-counter",level:3},{value:"Get Epoch Phase",id:"get-epoch-phase",level:3}],l={toc:p},h="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(h,(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The epoch contract stores a lot of different state, and the state is constantly changing.\nAs an external party, there are two ways to keep track of these state changes.\nYou can either use Cadence scripts to query the state of the contract at any given time,\nor you can monitor events that are emitted by the epoch contract to be notified of any important occurances."),(0,o.kt)("h1",{id:"monitor-epoch-service-events"},"Monitor Epoch Service Events"),(0,o.kt)("p",null,"These events can be queried using the Go or JavaScript SDKs to extract useful notifications and information about the\nstate of the epoch preparation protocol."),(0,o.kt)("h2",{id:"what-is-a-service-event"},"What is a Service Event?"),(0,o.kt)("p",null,"Service events are special messages that are generated by smart contracts and included in execution results.\nThey enable communication between system smart contracts and the Flow protocol.\nIn other words, they serve as a communication mechanism between the execution state and the protocol state. "),(0,o.kt)("p",null,"Concretely, service events are defined and emitted as events like any other in Cadence. An event is considered a service event when it is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"emitted within the service chunk"),(0,o.kt)("li",{parentName:"ul"},"emitted from a smart contract deployed to the service account"),(0,o.kt)("li",{parentName:"ul"},"conformant to an event allowlist")),(0,o.kt)("p",null,"Each block contains a system chunk. For each system chunk,\nall service events emitted are included in the corresponding execution result. "),(0,o.kt)("p",null,"When verifying the system chunk, verifier nodes will only produce result approvals\nwhen the system chunks included in the execution result are correct.\nThus, the security of this communication mechanism is enforced by the verification system."),(0,o.kt)("p",null,"When sealing a block containing a service event, the consensus committee will update the protocol state accordingly,\ndepending on the semantics of the event. "),(0,o.kt)("p",null,"For example, a service event may indicate that a node's stake has diminished to the point where they should be ejected,\nin which case the consensus committee would mark that node as ejected in the protocol state."),(0,o.kt)("p",null,"Service events are fundamentally asynchronous, due the lag between block execution and sealing.\nConsequently they are handled slightly differently than other protocol state updates."),(0,o.kt)("p",null,"The diagram below illustrates the steps each service event goes through to be included in the protocol state."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Flow Service Event Diagram",src:n(66387).Z,width:"626",height:"931"})),(0,o.kt)("p",null,"For conciseness, we say a service event is ",(0,o.kt)("inlineCode",{parentName:"p"},"sealed")," when the block in which it was emitted is sealed,\nand we say a service event is ",(0,o.kt)("inlineCode",{parentName:"p"},"finalized")," when the block containing the seal is finalized."),(0,o.kt)("h2",{id:"event-descriptions"},"Event Descriptions"),(0,o.kt)("h3",{id:"epochsetup"},(0,o.kt)("inlineCode",{parentName:"h3"},"EpochSetup")),(0,o.kt)("p",null,"The Epoch Setup service event is emitted by ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch.startEpochSetup()"),"\nwhen the staking auction phase ends and the Epoch Smart Contracts transition to the Epoch Setup phase.\nIt contains the finalized identity table for the upcoming epoch,\nas well as timing information for phase changes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event EpochSetup (\n\n    /// The counter for the upcoming epoch. Must be one greater than the\n    /// counter for the current epoch.\n    counter: UInt64,\n\n    /// Identity table for the upcoming epoch with all node information.\n    /// Includes:\n    /// nodeID, staking key, networking key, networking address, role,\n    /// staking information, weight, and more.\n    nodeInfo: [FlowIDTableStaking.NodeInfo],\n\n    /// The first view (inclusive) of the upcoming epoch.\n    firstView: UInt64,\n\n    /// The last view (inclusive) of the upcoming epoch.\n    finalView: UInt64,\n\n    /// The cluster assignment for the upcoming epoch. Each element in the list\n    /// represents one cluster and contains all the node IDs assigned to that\n    /// cluster, with their weights and votes\n    collectorClusters: [FlowClusterQC.Cluster],\n\n    /// The source of randomness to seed the leader selection algorithm with \n    /// for the upcoming epoch.\n    randomSource: String,\n\n    /// The deadlines of each phase in the DKG protocol to be completed in the upcoming\n    /// EpochSetup phase. Deadlines are specified in terms of a consensus view number. \n    /// When a DKG participant observes a finalized and sealed block with view greater \n    /// than the given deadline, it can safely transition to the next phase. \n    DKGPhase1FinalView: UInt64,\n    DKGPhase2FinalView: UInt64,\n    DKGPhase3FinalView: UInt64\n)\n")),(0,o.kt)("h3",{id:"epochcommit"},(0,o.kt)("inlineCode",{parentName:"h3"},"EpochCommit")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"EpochCommit")," service event is emitted when the Epoch Smart Contracts transition\nfrom the Epoch Setup phase to the Epoch Commit phase.\nIt is emitted only when all preparation for the upcoming epoch (QC and DKG) has been completed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event EpochCommit (\n\n    /// The counter for the upcoming epoch. Must be equal to the counter in the\n    /// previous EpochSetup event.\n    counter: UInt64,\n\n    /// The result of the QC aggregation process. Each element contains \n    /// all the nodes and votes received for a particular cluster\n    /// QC stands for quorum certificate that each cluster generates.\n    clusterQCs: [FlowClusterQC.ClusterQC],\n\n    /// The resulting public keys from the DKG process, encoded as by the flow-go\n    /// crypto library, then hex-encoded.\n    /// Group public key is the first element, followed by the individual keys\n    dkgPubKeys: [String],\n)\n")),(0,o.kt)("h1",{id:"query-information-with-scripts"},"Query Information with Scripts"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch")," smart contract stores important metadata about the current, proposed,\nand previous epochs. Metadata for all historical epochs is stored permenantely\nin the Epoch Smart Contract's storage."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub struct EpochMetadata {\n\n    /// The identifier for the epoch\n    pub let counter: UInt64\n\n    /// The seed used for generating the epoch setup\n    pub let seed: String\n\n    /// The first view of this epoch\n    pub let startView: UInt64\n\n    /// The last view of this epoch\n    pub let endView: UInt64\n\n    /// The last view of the staking auction\n    pub let stakingEndView: UInt64\n\n    /// The total rewards that are paid out for the epoch\n    pub var totalRewards: UFix64\n\n    /// The reward amounts that are paid to each individual node and its delegators\n    pub var rewardAmounts: [FlowIDTableStaking.RewardsBreakdown]\n\n    /// Tracks if rewards have been paid for this epoch\n    pub var rewardsPaid: Bool\n\n    /// The organization of collector node IDs into clusters\n    /// determined by a round robin sorting algorithm\n    pub let collectorClusters: [FlowClusterQC.Cluster]\n\n    /// The Quorum Certificates from the ClusterQC contract\n    pub var clusterQCs: [FlowClusterQC.ClusterQC]\n\n    /// The public keys associated with the Distributed Key Generation\n    /// process that consensus nodes participate in\n    /// Group key is the last element at index: length - 1\n    pub var dkgKeys: [String]\n}\n")),(0,o.kt)("h3",{id:"get-epoch-metadata"},"Get Epoch Metadata"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch")," smart contract provides a public function, ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch.getEpochMetadata()"),"\nto query the metadata for a particular epoch."),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("strong",{parentName:"p"},"Get Epoch Metadata"),"(",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#getting-epoch-info"},"EP.01"),") script\nwith the following arguments:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"epochCounter")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"UInt64")),(0,o.kt)("td",{parentName:"tr",align:null},"The counter of the epoch to get metadata for.")))),(0,o.kt)("h3",{id:"get-configurable-metadata"},"Get Configurable Metadata"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch")," smart contract also has a set of metadata that is configurable by the admin\nfor phase lengths, number of collector clusters, and inflation percentage."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub struct Config {\n    /// The number of views in an entire epoch\n    pub(set) var numViewsInEpoch: UInt64\n\n    /// The number of views in the staking auction\n    pub(set) var numViewsInStakingAuction: UInt64\n    \n    /// The number of views in each dkg phase\n    pub(set) var numViewsInDKGPhase: UInt64\n\n    /// The number of collector clusters in each epoch\n    pub(set) var numCollectorClusters: UInt16\n\n    /// Tracks the annualized percentage of FLOW total supply that is minted as rewards at the end of an epoch\n    /// Calculation for a single epoch would be (totalSupply * FLOWsupplyIncreasePercentage) / 52\n    pub(set) var FLOWsupplyIncreasePercentage: UFix64\n}\n")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("strong",{parentName:"p"},"Get Configurable Metadata"),"(",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#getting-epoch-info"},"EP.02"),") script\nto get the list of configurable metadata:"),(0,o.kt)("p",null,"This script does not require any arguments."),(0,o.kt)("h3",{id:"get-epoch-counter"},"Get Epoch Counter"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch")," smart contract always tracks the counter of the current epoch."),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("strong",{parentName:"p"},"Get Epoch Counter"),"(",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#getting-epoch-info"},"EP.03"),") script\nto get the current epoch counter."),(0,o.kt)("p",null,"This script does not require any arguments."),(0,o.kt)("h3",{id:"get-epoch-phase"},"Get Epoch Phase"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowEpoch")," smart contract always tracks the active phase of the current epoch."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub enum EpochPhase: UInt8 {\n    pub case STAKINGAUCTION\n    pub case EPOCHSETUP\n    pub case EPOCHCOMMIT\n}\n")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("strong",{parentName:"p"},"Get Epoch Phase"),"(",(0,o.kt)("a",{parentName:"p",href:"/core-contracts/epoch-contract-reference/#getting-epoch-info"},"EP.04"),") script\nto get the current epoch phase."),(0,o.kt)("p",null,"This script does not require any arguments."))}u.isMDXComponent=!0},66387:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/epoch-service-event-diagram-7271210f0c98883d51d78681f01a5b6a.png"}}]);