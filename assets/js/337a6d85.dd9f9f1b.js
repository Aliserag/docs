"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[67325],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||r;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},22969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},l="FlowControl scripting example",i={unversionedId:"Tooling/unity-sdk/samples/quickstart",id:"Tooling/unity-sdk/samples/quickstart",title:"FlowControl scripting example",description:"This example shows how to use FlowControl to perform common tasks purely from C#, without using",source:"@site/docs/Tooling/unity-sdk/samples/quickstart.md",sourceDirName:"Tooling/unity-sdk/samples",slug:"/Tooling/unity-sdk/samples/quickstart",permalink:"/docs/next/Tooling/unity-sdk/samples/quickstart",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1682971554,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorial - How to Build FlowWords",permalink:"/docs/next/Tooling/unity-sdk/samples/flow-words-tutorial"},next:{title:"Sample - FlowSDK Usage Demo",permalink:"/docs/next/Tooling/unity-sdk/samples/ui-usage"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Sample walk through",id:"sample-walk-through",level:2},{value:"Checking emulator state",id:"checking-emulator-state",level:2},{value:"Creating a FlowControl Account",id:"creating-a-flowcontrol-account",level:2},{value:"Running scripts",id:"running-scripts",level:2},{value:"Creating an SdkAccount",id:"creating-an-sdkaccount",level:2},{value:"Creating an account on the blockchain",id:"creating-an-account-on-the-blockchain",level:2},{value:"Deploying a contract",id:"deploying-a-contract",level:2},{value:"Replacement text",id:"replacement-text",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Transaction Events",id:"transaction-events",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flowcontrol-scripting-example"},"FlowControl scripting example"),(0,o.kt)("p",null,"This example shows how to use FlowControl to perform common tasks purely from C#, without using\nthe FlowControl editor interface.  This will ignore any of the GUI related code and focus on\nusing the FlowControl and Flow SDK."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Ensure you have flow-cli installed.  This will allow us to use an emulated flow environment.\nYou can install it by following the instructions at ",(0,o.kt)("a",{parentName:"p",href:"https://developers.flow.com/tools/flow-cli/install"},"https://developers.flow.com/tools/flow-cli/install")),(0,o.kt)("h2",{id:"sample-walk-through"},"Sample walk through"),(0,o.kt)("p",null,"You can follow along in FlowControlExample.cs"),(0,o.kt)("p",null,"The first thing to notice is that we declare Start() to be an IEnumerator.  This makes Start a coroutine.\nYou will always want to run FlowSDK functions inside a coroutine because they can take a while to complete\nand you don't want to lock up your game while they are processed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"private IEnumerator Start()\n{\n...\n}\n")),(0,o.kt)("h2",{id:"checking-emulator-state"},"Checking emulator state"),(0,o.kt)("p",null,"The next thing we do is ensure the emulator is running.  We give it a few seconds to start:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"//Wait up to 2.5 seconds for the emulator to start.\nint waited = 0;\n\nwhile (!FlowControl.IsEmulatorRunning && waited < 5)\n{\nwaited++;\nyield return new WaitForSeconds(.5f);\n}\n\nif (!FlowControl.IsEmulatorRunning)\n{\n//Stop execution if the emulator is not running by now.\nyield break;\n}\n")),(0,o.kt)("h2",{id:"creating-a-flowcontrol-account"},"Creating a FlowControl Account"),(0,o.kt)("p",null,"Next we'll create a FlowControl account to use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"ONLY"))," for running scripts.  The Flow network\ndoesn't require an account to run scripts, but FlowControl uses Accounts to determine which network\nto connect to."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'FlowControl.Account scriptOnlyAccount = new FlowControl.Account\n{\n    GatewayName = "Emulator"\n};\n')),(0,o.kt)("p",null,"Because this account doesn't have any keys associated with it, it can't be used to run transactions.\nIt does define which Gateway to use, in this case the \"Emulator\" gateway, so it can be used\nto run scripts."),(0,o.kt)("h2",{id:"running-scripts"},"Running scripts"),(0,o.kt)("p",null,"Next, we'll use this account to run a script on the emulator.  Scripts on Flow are written in Cadence.\nMore information is available at ",(0,o.kt)("a",{parentName:"p",href:"https://developers.flow.com/cadence/language/index"},"https://developers.flow.com/cadence/language/index")),(0,o.kt)("p",null,"First we'll define the script that we want to run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'const string code = @"pub fun main(message: String): Int{\n    log(message)\n    return 42\n}";\n')),(0,o.kt)("p",null,"This script requires a Cadence String as input, returns a Cadence Int, and will log the input\nstring to the emulator log."),(0,o.kt)("p",null,"Now we execute this script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'Task<FlowScriptResponse> task = scriptOnlyAccount.ExecuteScript(code, new CadenceString("Test"));\n')),(0,o.kt)("p",null,"FlowControl uses an Account oriented approach.  Everything is done using an Account object.  In this\ncase we'll use the scriptOnlyAccount account that we created earlier to call ExecuteScript."),(0,o.kt)("p",null,"A script is code that can not permanently mutate the state of the blockchain.  It is read-only.\nIt ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"CAN"))," call functions that would change the state of the blockchain, but any changes that are\nmade will be discarded once the script finishes running."),(0,o.kt)("p",null,'We pass in the Cadence code we want to run and any arguments that are required by the script.\nWe need to use Cadence specific data types, so  we construct a new CadenceString using the string\n"Test".'),(0,o.kt)("p",null,"This returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Task<FlowScriptResponse>"),".  This is an asynchronous Task that will result\nin a FlowScriptResponse when it is complete."),(0,o.kt)("p",null,"Next, we need to wait for the Task to complete.  Inside a Unity coroutine we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"WaitUntil"),"\nfunction as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"yield return new WaitUntil(() => task.IsCompleted);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WaitUntil")," takes a function that returns a bool (",(0,o.kt)("inlineCode",{parentName:"p"},"Func<bool>"),"), so we construct an anonymous one that\nreturns the IsCompleted field of the task.  This cause Unity to pause execution of the current coroutine\nuntil the task is completed."),(0,o.kt)("p",null,"We then check to see if an error occured, and if so, log it to the console."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'if (task.Result.Error != null)\n{\n    Debug.LogError($"Error:  {task.Result.Error.Message}");\n    yield break;\n}\n')),(0,o.kt)("p",null,"If there is no error, the script should have returned a Cadence Int value.  We can access it as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'Debug.Log($"Script result: {task.Result.Value.As<CadenceNumber>().Value}");\n')),(0,o.kt)("p",null,"This might be a bit confusing.  The Task will have a Result.  The result could contain an error,\nbut we checked for that earlier.  If it doesn't contain an error, then it will contain a Value."),(0,o.kt)("p",null,"That Value will be of type CadenceBase, which is the base type for all Cadence data types.  We\nknow that the script returns a number, so we can cast it as a CadenceNumber using\n",(0,o.kt)("inlineCode",{parentName:"p"},"As<CadenceNumber>()"),".  All Cadence types contain ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Type")," members that are strings.\nIn this case, we're interested in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Value"),".  If we wanted to use it as a number, we'd need to\nparse it, but in this case we just want to output it, so leaving it as a string is fine."),(0,o.kt)("h2",{id:"creating-an-sdkaccount"},"Creating an SdkAccount"),(0,o.kt)("p",null,"Next, let's create an account that can be used to execute transactions that mutate the state of\nthe blockchain.  This will also demonstrate how you can use both FlowControl and the base SDK\ntogether."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'SdkAccount emulatorSdkAccount = FlowControl.GetSdkAccountByName("emulator_service_account");\nif (emulatorSdkAccount == null)\n{\n    Debug.LogError("Error getting SdkAccount for emulator_service_account");\n    yield break;\n}\n')),(0,o.kt)("p",null,"When the emulator is started, FlowControl automatically creates an emulator_service_account FlowControl.Account\nfor you to use to access the built in emulator service account.  We'll use that account to create a new account."),(0,o.kt)("p",null,"Because the ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateAccount")," function is an SDK function, and not a FlowControl function, we'll need to create a\ntemporary ",(0,o.kt)("inlineCode",{parentName:"p"},"SdkAccount")," from the FlowControl Account.  The ",(0,o.kt)("inlineCode",{parentName:"p"},"GetSdkAccountByName")," function will construct an\nSdkAccount object from a FlowControl.Account object."),(0,o.kt)("p",null,"If the name you pass to ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowControl.GetSdkAccountByName")," does not exist, it will return null, so we check\nfor that and stop execution if it fails."),(0,o.kt)("h2",{id:"creating-an-account-on-the-blockchain"},"Creating an account on the blockchain"),(0,o.kt)("p",null,"Now we'll use this new SdkAccount object to create a new Flow account on the emulated blockchain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'FlowSDK.RegisterWalletProvider(ScriptableObject.CreateInstance<DevWalletProvider>());\n\nstring authAddress = "";\nFlowSDK.GetWalletProvider().Authenticate("", (string address) =>\n{\n    authAddress = address;\n}, null);\n\nyield return new WaitUntil(() => { return authAddress != ""; });\n\n//Convert FlowAccount to SdkAccount\nSdkAccount emulatorSdkAccount = FlowControl.GetSdkAccountByAddress(authAddress);\nif (emulatorSdkAccount == null)\n{\n    Debug.LogError("Error getting SdkAccount for emulator_service_account");\n    yield break;\n}\n\n//Create a new account with the name "User"\nTask<SdkAccount> newAccountTask = CommonTransactions.CreateAccount("User");\nyield return new WaitUntil(() => newAccountTask.IsCompleted);\n\nif (newAccountTask.Result.Error != null)\n{\n    Debug.LogError($"Error creating new account: {newAccountTask.Result.Error.Message}");\n    yield break;\n}\n\noutputText.text += "DONE\\n\\n";\n\n//Here we have an SdkAccount\nSdkAccount userSdkAccount = newAccountTask.Result;\n\n')),(0,o.kt)("p",null,"First we create and register a new ",(0,o.kt)("inlineCode",{parentName:"p"},"DevWalletProvider"),".  Any time a transaction is run, it calls the provided wallet provider.  The ",(0,o.kt)("inlineCode",{parentName:"p"},"DevWalletProvider"),"\nis an implementation of IWallet that shows a simulated wallet interface.  It will allow you to view and authorize the submitted transaction."),(0,o.kt)("p",null,"After creating and registering the wallet provider, we call ",(0,o.kt)("inlineCode",{parentName:"p"},"Authenticate")," to display a popup that will allow you to select any of the accounts in the FlowControl\nAccounts tab.  You should choose emulator_service_account when prompted when running the demo."),(0,o.kt)("p",null,"We then wait until the user has selected an account."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CommonTransactions")," contains some utility functions to make performing frequent operations a little easier.\nOne of these is ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateAccount"),".  It expects a ",(0,o.kt)("inlineCode",{parentName:"p"},"Name"),", which is not placed on the blockchain, and the SdkAccount\nthat should pay for the creation of the new account.  That returns a Task that is handled similarly to\nbefore."),(0,o.kt)("p",null,"If there is no error, the Result field of the task will contain the newly create account info."),(0,o.kt)("p",null,"Now, in order to use this new account with FlowControl, we'll need to create a FlowControl.Account from\nthe SdkAccount we have."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'FlowControl.Account userAccount = new FlowControl.Account\n{\n    Name = userSdkAccount.Name,\n    GatewayName = "Emulator",\n    AccountConfig = new Dictionary<string, string>\n    {\n        ["Address"] = userSdkAccount.Address,\n        ["Private Key"] = userSdkAccount.PrivateKey\n    }\n};\n')),(0,o.kt)("p",null,"Then we store this account in the FlowControlData object so that we can look it up by name later."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"FlowControl.Data.Accounts.Add(userAccount);\n")),(0,o.kt)("h2",{id:"deploying-a-contract"},"Deploying a contract"),(0,o.kt)("p",null,"The next section shows how to deploy a contract to the Flow network.  Because this is another utility\nfunction from ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonTransactions"),", it needs an SdkAccount.  We'll use userSdkAccount we created earlier."),(0,o.kt)("p",null,"First we need to define the contract we wish to deploy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'const string contractCode = @"\n    pub contract HelloWorld {\n        pub let greeting: String\n\n        pub event TestEvent(field: String)\n\n        init() {\n            self.greeting = ""Hello, World!""\n        }\n\n        pub fun hello(data: String): String {\n            emit TestEvent(field:data)\n            return self.greeting\n        }\n    }";\n')),(0,o.kt)("p",null,'We won\'t discuss how to write Flow contracts in depth here, but simply put this contract defines a single\nfunction that will emit an event and return the string "Hello World!" when run.'),(0,o.kt)("p",null,"Then we use the same pattern we've used before to deploy this contract using the ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonTransaction.DeployContract"),"\nfunction.  Note that we should register a new wallet provider since we are changing the account we want to run the transaction\nas."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'FlowSDK.GetWalletProvider().Authenticate(userAccount.Name, null, null);\nTask<FlowTransactionResponse> deployContractTask = \n    CommonTransactions.DeployContract("HelloWorld", contractCode);\n\nyield return new WaitUntil(() => deployContractTask.IsCompleted);\n\nif (deployContractTask.Result.Error != null)\n{\n    Debug.LogError($"Error deploying contract: {deployContractTask.Result.Error.Message}");\n    yield break;\n}\n')),(0,o.kt)("p",null,"We'll reauthenticate with the wallet provider to tell it to use the new newly created account.  Because we pass in a name this time, it\nwon't display the select account pop-up."),(0,o.kt)("p",null,"The first argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"DeployContract")," is the contract name.  This must match the name in the contract\ndata itself.  The second argument is the Cadence code that defines the contract, and the third argument\nis the SdkAccount that the contract should be deployed to."),(0,o.kt)("h2",{id:"replacement-text"},"Replacement text"),(0,o.kt)("p",null,"Next we'll see how to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"ReplacementText")," entry to FlowControl.  This is typically done via the\nFlowControl editor interface, but can be done programatically as shown."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'FlowControl.TextReplacement newTextReplacement = new FlowControl.TextReplacement\n{\n    description = "User Address",\n    originalText = "%USERADDRESS%",\n    replacementText = userSdkAccount.Address,\n    active = true,\n    ApplyToAccounts = new List<string> { "User" },\n    ApplyToGateways = new List<string> { "Emulator" }\n};\n\nFlowControl.Data.TextReplacements.Add(newTextReplacement);\n')),(0,o.kt)("p",null,"Note that we are setting ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplyToAccounts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplyToGateways")," so that this ",(0,o.kt)("inlineCode",{parentName:"p"},"TextReplacement"),' will be\nperformed any time the FlowControl.Account account with the name "User" executes a function against the emulator.'),(0,o.kt)("p",null,"This new ",(0,o.kt)("inlineCode",{parentName:"p"},"TextReplacement")," will be used when we execute a transaction using the contract we just deployed."),(0,o.kt)("h2",{id:"transactions"},"Transactions"),(0,o.kt)("p",null,"First we'll write the transaction we want to execute."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'string transaction = @"\n    import HelloWorld from %USERADDRESS% \n    transaction {\n        prepare(acct: AuthAccount) {\n            log(""Transaction Test"")\n            HelloWorld.hello(data:""Test Event"")\n        }\n    }";\n')),(0,o.kt)("p",null,"Based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"TextReplacement")," we created earlier, ",(0,o.kt)("inlineCode",{parentName:"p"},"%USERADDRESS%")," will be replaced with the Flow address\nof the user account we created.  This will then call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello")," function on the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract\nwe deployed to the user account."),(0,o.kt)("p",null,"Next we follow a similar pattern to before:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'Task<FlowTransactionResult> transactionTask = userAccount.SubmitAndWaitUntilSealed(transaction);\nyield return new WaitUntil(() => transactionTask.IsCompleted);\n\nif (transactionTask.Result.Error != null || !string.IsNullOrEmpty(transactionTask.Result.ErrorMessage))\n{\n    Debug.LogError($"Error executing transaction: {transactionTask.Result.Error?.Message??transactionTask.Result.ErrorMessage}");\n    yield break;\n}\n')),(0,o.kt)("p",null,"Here, we're using the ",(0,o.kt)("inlineCode",{parentName:"p"},"SubmitAndWaitUntilSealed")," FlowControl function.  This combines two SDK functions\ntogether.  It first submits the transaction to the network.  Then it polls the network until the network\nindicates that the transaction has been sealed and then returns the results."),(0,o.kt)("p",null,"Because this is combining two operations together, there are two potential failure points.  The first\nis a network error or syntax error that causes the submission to be rejected.  This will be indicated\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"Result.Error")," field.  The second is something that goes wrong during the processing of the\ntransaction after submission was successful.  This will be indicated in the Result.ErrorMessage field.\nWhen using SubmitAndWaitUntilSealed or SubmitAndWaitUntilExecuted, you will want to check both of the\nerror fields to ensure it has completed successfully."),(0,o.kt)("p",null,"Finally, we check the events emitted by the transaction.  Because submitting transactions returns before\nthe transaction is actually processed, you can't return data directly from a transaction like you can\nwith a script.  Instead, you emit events that can be retrieved.  We'll check the events of the completed\ntransaction as follows:"),(0,o.kt)("h2",{id:"transaction-events"},"Transaction Events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'FlowEvent txEvent = transactionTask.Result.Events.Find(x => x.Type.Contains("TestEvent"));\n\n//Show that the transaction finished and display the value of the event that was emitted during execution.\n//The Payload of the returned FlowEvent will be a CadenceComposite.  We want the value associated with the\n//"field" field as a string\nDebug.Log($"Executed transaction.  Event type: {txEvent.Type}.  Event payload: {txEvent.Payload.As<CadenceComposite>().CompositeFieldAs<CadenceString>("field").Value}");\n')),(0,o.kt)("p",null,"We end up a with a list of Events that were emitted by a transaction in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Result.Events"),' object.  We\nuse LINQ to find the event we\'re interested in.  It will contain "TestEvent" in it.'),(0,o.kt)("p",null,"Then we have to get the payload from the event to display.  The payload will always be a ",(0,o.kt)("inlineCode",{parentName:"p"},"CadenceComposite"),',\nwhich can contain many fields.  We\'ll get the field named "field" from it, and cast that to a ',(0,o.kt)("inlineCode",{parentName:"p"},"CadenceString"),"\nusing ",(0,o.kt)("inlineCode",{parentName:"p"},'CompositeFieldAs<CadenceString>("field")'),", and finally get the ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," of that field to display."))}d.isMDXComponent=!0}}]);