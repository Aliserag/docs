"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1955],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},21943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={title:"Environment Information"},i=void 0,c={unversionedId:"cadence/language/environment-information",id:"cadence/language/environment-information",title:"Environment Information",description:"Transaction Information",source:"@site/docs/cadence/language/environment-information.md",sourceDirName:"cadence/language",slug:"/cadence/language/environment-information",permalink:"/docs/cadence/language/environment-information",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex Ni",lastUpdatedAt:1682708799,formattedLastUpdatedAt:"Apr 28, 2023",frontMatter:{title:"Environment Information"},sidebar:"tutorialSidebar",previous:{title:"Enumerations",permalink:"/docs/cadence/language/enumerations"},next:{title:"Events",permalink:"/docs/cadence/language/events"}},l={},s=[{value:"Transaction Information",id:"transaction-information",level:2},{value:"Block Information",id:"block-information",level:2}],u={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"transaction-information"},"Transaction Information"),(0,a.kt)("p",null,"To get the addresses of the signers of a transaction,\nuse the ",(0,a.kt)("inlineCode",{parentName:"p"},"address")," field of each signing ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthAccount"),"\nthat is passed to the transaction's ",(0,a.kt)("inlineCode",{parentName:"p"},"prepare")," phase."),(0,a.kt)("p",null,"There is currently no API that allows getting other transaction information.\nPlease let us know if your use-case demands it by request this feature in an issue."),(0,a.kt)("h2",{id:"block-information"},"Block Information"),(0,a.kt)("p",null,"To get information about a block, the functions ",(0,a.kt)("inlineCode",{parentName:"p"},"getCurrentBlock")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"getBlock")," can be used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"fun getCurrentBlock(): Block\n")),(0,a.kt)("p",{parentName:"li"}," Returns the current block, i.e. the block which contains the currently executed transaction.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"fun getBlock(at: UInt64): Block?\n")),(0,a.kt)("p",{parentName:"li"}," Returns the block at the given height.\nIf the given block does not exist the function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Block")," type contains the identifier, height, and timestamp:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"pub struct Block {\n    /// The ID of the block.\n    ///\n    /// It is essentially the hash of the block.\n    ///\n    pub let id: [UInt8; 32]\n\n    /// The height of the block.\n    ///\n    /// If the blockchain is viewed as a tree with the genesis block at the root,\n    // the height of a node is the number of edges between the node and the genesis block\n    ///\n    pub let height: UInt64\n\n    /// The view of the block.\n    ///\n    /// It is a detail of the consensus algorithm. It is a monotonically increasing integer\n    /// and counts rounds in the consensus algorithm. It is reset to zero at each spork.\n    ///\n    pub let view: UInt64\n\n    /// The timestamp of the block.\n    ///\n    /// Unix timestamp of when the proposer claims it constructed the block.\n    ///\n    /// NOTE: It is included by the proposer, there are no guarantees on how much the time stamp can deviate from the true time the block was published.\n    /// Consider observing blocks\u2019 status changes off-chain yourself to get a more reliable value.\n    ///\n    pub let timestamp: UFix64\n}\n")))}m.isMDXComponent=!0}}]);