"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6715],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={title:"FUSD Transactions & Scripts",sidebar_title:"Transactions & Scripts",description:"Transaction templates for the FUSD stablecoin on Flow"},i=void 0,c={unversionedId:"flow/fusd/transactions",id:"flow/fusd/transactions",title:"FUSD Transactions & Scripts",description:"Transaction templates for the FUSD stablecoin on Flow",source:"@site/docs/flow/fusd/transactions.md",sourceDirName:"flow/fusd",slug:"/flow/fusd/transactions",permalink:"/flow/fusd/transactions",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682618386,formattedLastUpdatedAt:"Apr 27, 2023",frontMatter:{title:"FUSD Transactions & Scripts",sidebar_title:"Transactions & Scripts",description:"Transaction templates for the FUSD stablecoin on Flow"},sidebar:"tutorialSidebar",previous:{title:"FUSD Providers",permalink:"/flow/fusd/providers"},next:{title:"Overview",permalink:"/flow/nft-marketplace/"}},l={},s=[{value:"Contract",id:"contract",level:2},{value:"Transactions &amp; Scripts",id:"transactions--scripts",level:2},{value:"Setup FUSD Vault &amp; Receiver",id:"setup-fusd-vault--receiver",level:3},{value:"Transfer FUSD",id:"transfer-fusd",level:3},{value:"Get FUSD Balance for an Account",id:"get-fusd-balance-for-an-account",level:3}],u={toc:s},p="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"contract"},"Contract"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FUSD")," contract defines the Flow USD stablecoin token."),(0,r.kt)("p",null,"FUSD implements the standard ",(0,r.kt)("a",{parentName:"p",href:"/core-contracts/fungible-token/"},"FungibleToken"),"\ncontract interface on Flow."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Network"),(0,r.kt)("th",{parentName:"tr",align:null},"Contract Address"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://flow-view-source.com/testnet/account/0xe223d8a629e49c68/contract/FUSD"},"0xe223d8a629e49c68"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://flowscan.org/contract/A.3c5959b568896393.FUSD"},"0x3c5959b568896393"))))),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/fusd/blob/main/contracts/FUSD.cdc"},"FUSD.cdc")),(0,r.kt)("h2",{id:"transactions--scripts"},"Transactions & Scripts"),(0,r.kt)("h3",{id:"setup-fusd-vault--receiver"},"Setup FUSD Vault & Receiver"),(0,r.kt)("p",null,"This transaction configures the signer's account\nwith an empty FUSD vault."),(0,r.kt)("p",null,"It also links the following capabilities:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FungibleToken.Receiver")," - This capability allows this account to accept FUSD deposits."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FungibleToken.Balance")," - This capability allows anybody to inspect the FUSD balance of this account.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence:title=setup_fusd_vault.cdc"},"// Mainnet\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\n\n// Testnet\n// import FungibleToken from 0x9a0766d93b6608b7\n// import FUSD from 0xe223d8a629e49c68\n\ntransaction {\n\n  prepare(signer: AuthAccount) {\n\n    // It's OK if the account already has a Vault, but we don't want to replace it\n    if(signer.borrow<&FUSD.Vault>(from: /storage/fusdVault) != nil) {\n      return\n    }\n    \n    // Create a new FUSD Vault and put it in storage\n    signer.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\n\n    // Create a public capability to the Vault that only exposes\n    // the deposit function through the Receiver interface\n    signer.link<&FUSD.Vault{FungibleToken.Receiver}>(\n      /public/fusdReceiver,\n      target: /storage/fusdVault\n    )\n\n    // Create a public capability to the Vault that only exposes\n    // the balance field through the Balance interface\n    signer.link<&FUSD.Vault{FungibleToken.Balance}>(\n      /public/fusdBalance,\n      target: /storage/fusdVault\n    )\n  }\n}\n")),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/fusd/blob/main/transactions/setup_fusd_vault.cdc"},"setup","_","fusd","_","vault.cdc")),(0,r.kt)("h3",{id:"transfer-fusd"},"Transfer FUSD"),(0,r.kt)("p",null,"This transaction withdraws FUSD from the signer's\naccount and deposits it into a recipient account.\nThis transaction will fail if the recipient\ndoes not have an FUSD receiver.\nNo funds are transferred or lost if the transaction fails."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of FUSD transfer (e.g. 10.0)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"recipient"),": The recipient account address.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence:title=transfer_fusd.cdc"},"// Mainnet\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\n\n// Testnet\n// import FungibleToken from 0x9a0766d93b6608b7\n// import FUSD from 0xe223d8a629e49c68\n\ntransaction(amount: UFix64, recipient: Address) {\n\n  // The Vault resource that holds the tokens that are being transfered\n  let sentVault: @FungibleToken.Vault\n\n  prepare(signer: AuthAccount) {\n    // Get a reference to the signer's stored vault\n    let vaultRef = signer.borrow<&FUSD.Vault>(from: /storage/fusdVault)\n      ?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n    // Withdraw tokens from the signer's stored vault\n    self.sentVault <- vaultRef.withdraw(amount: amount)\n  }\n\n  execute {\n    // Get the recipient's public account object\n    let recipientAccount = getAccount(recipient)\n\n    // Get a reference to the recipient's Receiver\n    let receiverRef = recipientAccount.getCapability(/public/fusdReceiver)!\n      .borrow<&{FungibleToken.Receiver}>()\n      ?? panic(\"Could not borrow receiver reference to the recipient's Vault\")\n\n    // Deposit the withdrawn tokens in the recipient's receiver\n    receiverRef.deposit(from: <-self.sentVault)\n  }\n}\n")),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/fusd/blob/main/transactions/transfer_fusd.cdc"},"transfer_fusd.cdc")),(0,r.kt)("h3",{id:"get-fusd-balance-for-an-account"},"Get FUSD Balance for an Account"),(0,r.kt)("p",null,"This script returns the FUSD balance of an account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cadence:title=get_fusd_balance.cdc"},'// Mainnet\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\n\n// Testnet\n// import FungibleToken from 0x9a0766d93b6608b7\n// import FUSD from 0xe223d8a629e49c68\n\npub fun main(address: Address): UFix64 {\n  let account = getAccount(address)\n\n  let vaultRef = account\n    .getCapability(/public/fusdBalance)\n    .borrow<&FUSD.Vault{FungibleToken.Balance}>()\n    ?? panic("Could not borrow Balance capability")\n\n  return vaultRef.balance\n}\n')),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/fusd/blob/main/transactions/scripts/get_fusd_balance.cdc"},"get","_","fusd","_","balance.cdc")))}f.isMDXComponent=!0}}]);