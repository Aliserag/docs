"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5198],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,b=u["".concat(c,".").concat(d)]||u[d]||h[d]||i;return n?a.createElement(b,l(l({ref:t},p),{},{components:n})):a.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=d;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[u]="string"==typeof e?e:o,l[1]=r;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91744:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const i={archived:!1,draft:!1,title:"4. Capability Tutorial",description:"An introduction to capabilities and how they interact with resources in Cadence",date:new Date("2022-05-10T00:00:00.000Z"),meta:{keywords:["tutorial","Flow","Cadence","Resources","Capabilities"]},tags:["reference","cadence","tutorial"],socialImageTitle:"Cadence Resources",socialImageDescription:"Capability smart contract image."},l=void 0,r={unversionedId:"cadence/tutorial/04-capabilities",id:"cadence/tutorial/04-capabilities",title:"4. Capability Tutorial",description:"An introduction to capabilities and how they interact with resources in Cadence",source:"@site/docs/cadence/tutorial/04-capabilities.mdx",sourceDirName:"cadence/tutorial",slug:"/cadence/tutorial/04-capabilities",permalink:"/cadence/tutorial/04-capabilities",draft:!1,tags:[{label:"reference",permalink:"/tags/reference"},{label:"cadence",permalink:"/tags/cadence"},{label:"tutorial",permalink:"/tags/tutorial"}],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682541550,formattedLastUpdatedAt:"Apr 26, 2023",frontMatter:{archived:!1,draft:!1,title:"4. Capability Tutorial",description:"An introduction to capabilities and how they interact with resources in Cadence",date:"2022-05-10T00:00:00.000Z",meta:{keywords:["tutorial","Flow","Cadence","Resources","Capabilities"]},tags:["reference","cadence","tutorial"],socialImageTitle:"Cadence Resources",socialImageDescription:"Capability smart contract image."},sidebar:"tutorialSidebar",previous:{title:"3. Resource Contract Tutorial",permalink:"/cadence/tutorial/03-resources"},next:{title:"5.1 Non-Fungible Token Tutorial Part 1",permalink:"/cadence/tutorial/05-non-fungible-tokens-1"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Use-Cases for Capabilities and Scripts",id:"use-cases-for-capabilities-and-scripts",level:3},{value:"Accessing Resources with Capabilities",id:"accessing-resources-with-capabilities",level:2},{value:"Creating Capabilities and References to Stored Resources",id:"creating-capabilities-and-references-to-stored-resources",level:3},{value:"Capability Based Access Control",id:"capability-based-access-control",level:3},{value:"Executing Scripts",id:"executing-scripts",level:3},{value:"Reviewing Capabilities",id:"reviewing-capabilities",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=p("Callout"),h=p("Img"),d={toc:s},b="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(b,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)(u,{type:"success",mdxType:"Callout"},"Open the starter code for this tutorial in the Flow Playground. It is the same code that was in the previous tutorial: ",(0,o.kt)("br",null),(0,o.kt)("a",{href:"https://play.onflow.org/a7f45bcd-8fda-45f6-b443-4b77302a1687",target:"_blank"},"https://play.onflow.org/a7f45bcd-8fda-45f6-b443-4b77302a1687"),(0,o.kt)("br",null),"The tutorial will ask you to take various actions to interact with this code."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},"Instructions that require you to take action are always included in a callout box like this one. These highlighted actions are all that you need to do to get your code running, but reading the rest is necessary to understand the language's design."),(0,o.kt)("p",null,"This tutorial builds on the ",(0,o.kt)("a",{parentName:"p",href:"03-resources"},"previous ",(0,o.kt)("inlineCode",{parentName:"a"},"Resource")," tutorial"),".\nBefore beginning this tutorial, you should have an idea of how accounts,transactions,resources, and signers work with basic field types.\nThis tutorial will build on your understanding of accounts and resources.\nYou'll learn how to interact with resources using ",(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},"capabilities"),"\nIn Cadence, resources are a composite type like a struct or a class, but with some special rules:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Each instance of a resource can only exist in exactly one location and cannot be copied."),(0,o.kt)("li",{parentName:"ul"},"Resources must be explicitly moved from one location to another when accessed."),(0,o.kt)("li",{parentName:"ul"},"Resources also cannot go out of scope at the end of function execution, they must be explicitly stored somewhere or destroyed.")),(0,o.kt)("h3",{id:"use-cases-for-capabilities-and-scripts"},"Use-Cases for Capabilities and Scripts"),(0,o.kt)("p",null,"Let's look at why you would want to use capabilities to expand access to resources in a real-world context."),(0,o.kt)("p",null,"A real user's account will contain functions and fields that need varying levels of access scope and privacy.\nFor example, if you're working on an app that allows users to exchange tokens.\nWhile you definitely need to sign write access for a feature like withdrawing tokens from an account, your app should allow anybody to deposit tokens.\nAfter your user authenticates your app for the first time, you can create a capability that allows your app to withdraw tokens, this makes it more\nconvenient to write transactions that can withdraw an account's tokens to spend or trade them."),(0,o.kt)("p",null,"In this tutorial, you will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Interact with the resource we created using transactions"),(0,o.kt)("li",{parentName:"ol"},"Create capabilities to extend the resource access scope"),(0,o.kt)("li",{parentName:"ol"},"Execute a script that interacts with the resource")),(0,o.kt)("h2",{id:"accessing-resources-with-capabilities"},"Accessing Resources with Capabilities"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Before following this tutorial, you should have the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract deployed in account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01"),",\njust like in the ",(0,o.kt)("a",{parentName:"p",href:"03-resources"},"previous ",(0,o.kt)("inlineCode",{parentName:"a"},"Resource")," contract tutorial"),"."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the Account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," tab with file named ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorldResource.cdc"),". ",(0,o.kt)("br",null),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorldResource.cdc")," should contain the following code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=HelloWorldResource-2.cdc"},'pub contract HelloWorld {\n\n    // Declare a resource that only includes one function.\n    pub resource HelloAsset {\n\n        // A transaction can call this function to get the "Hello, World!"\n        // message from the resource.\n        pub fun hello(): String {\n            return "Hello, World!"\n        }\n    }\n\n    // We\'re going to use the built-in create function to create a new instance\n    // of the HelloAsset resource\n    pub fun createHelloAsset(): @HelloAsset {\n        return <-create HelloAsset()\n    }\n\n    init() {\n        log("Hello Asset")\n    }\n}\n')),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Deploy this code to account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deploy")," button.")),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Create Hello")," transaction and send it with ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," as the signer.")),(0,o.kt)("p",null,"The contract and transaction above creates and stores the resource we'll be using in this tutorial.\nFor a more detailed breakdown of the contract, have a look at the ",(0,o.kt)("a",{parentName:"p",href:"03-resources"},"previous tutorial"),"."),(0,o.kt)("h3",{id:"creating-capabilities-and-references-to-stored-resources"},"Creating Capabilities and References to Stored Resources"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"You need explicit permission from the owner of an account to access its storage.\nCapabilities allow an account owner to grant access to specific fields and functions\nstored in their accounts. (Explained more below)"),(0,o.kt)("p",null,"In this transaction, you create a new capability,\nthen use the ",(0,o.kt)("inlineCode",{parentName:"p"},"link")," function to create a public link to your ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," resource object.\nNext you use that link to borrow a ",(0,o.kt)("a",{parentName:"p",href:"../language/references"},"reference"),"\nto the underlying object and call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," function.\nA detailed explanation of what is happening in this transaction\nis below the transaction code so, if you feel lost, keep reading!"),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the transaction named ",(0,o.kt)("inlineCode",{parentName:"p"},"Create Link"),"."),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Create Link")," should contain the following code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=CreateLink"},'import HelloWorld from 0x01\n\n// This transaction creates a new capability\n// for the HelloAsset resource in storage\n// and adds it to the account\'s public area.\n//\n// Other accounts and scripts can use this capability\n// to create a reference to the private object to be able to\n// access its fields and call its methods.\n\ntransaction {\n  prepare(account: AuthAccount) {\n\n    // Create a public capability by linking the capability to\n    // a `target` object in account storage.\n    // The capability allows access to the object through an\n    // interface defined by the owner.\n    // This does not check if the link is valid or if the target exists.\n    // It just creates the capability.\n    // The capability is created and stored at /public/Hello, and is\n    // also returned from the function.\n    let capability = account.link<&HelloWorld.HelloAsset>(/public/HelloAssetTutorial, target: /storage/HelloAssetTutorial)\n\n    // Use the capability\'s borrow method to create a new reference\n    // to the object that the capability links to\n    // We use optional chaining "??" to get the value because\n    // result of the borrow could fail, so it is an optional.\n    // If the optional is nil,\n    // the panic will happen with a descriptive error message\n    let helloReference = capability.borrow()\n      ?? panic("Could not borrow a reference to the hello capability")\n\n    // Call the hello function using the reference\n    // to the HelloAsset resource.\n    //\n    log(helloReference.hello())\n  }\n}\n')),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Ensure account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," is still selected as a transaction signer. ",(0,o.kt)("br",null),"\nClick the ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," button to send the transaction.")),(0,o.kt)("p",null,"In this transaction, we use the prepare phase to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a capability with the ",(0,o.kt)("inlineCode",{parentName:"li"},"link")," method to the stored object ",(0,o.kt)("inlineCode",{parentName:"li"},"HelloWorld.HelloAsset")," from the account path ",(0,o.kt)("inlineCode",{parentName:"li"},"/storage/HelloAssetTutorial")),(0,o.kt)("li",{parentName:"ol"},"Store the capability in the account path ",(0,o.kt)("inlineCode",{parentName:"li"},"/public/HelloAssetTutorial")),(0,o.kt)("li",{parentName:"ol"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"borrow")," method to create a reference to the object we linked to called ",(0,o.kt)("inlineCode",{parentName:"li"},"helloReference")),(0,o.kt)("li",{parentName:"ol"},"Call the ",(0,o.kt)("inlineCode",{parentName:"li"},"hello()")," function using the reference we created, ",(0,o.kt)("inlineCode",{parentName:"li"},"helloReference"))),(0,o.kt)("p",null,"You should see ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hello, World"')," show up in the console again.\nYou might be confused that we were able to call a method on the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," object\nwithout actually being directly in control of it!\nIt is also stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/")," domain of the account, which should be private."),(0,o.kt)("p",null,"This is because we created a ",(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},(0,o.kt)("strong",{parentName:"a"},"capability"))," for the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," object.\nCapabilities are kind of like pointers in other languages."),(0,o.kt)("h3",{id:"capability-based-access-control"},"Capability Based Access Control"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},"Capabilities")," allow the owners of objects\nto specify what functionality of their private objects is available to others.\nThink of it kind of like an account's public API, if you're familiar with the concept.\nThe account owner has private objects stored in their storage, like their collectibles or their money,\nbut they might still want others to be able to see what collectibles they have in their account,\nor they want to allow anyone to deposit more money of a certain currency in their account.\nSince these objects are stored in private storage by default, the owner has to do something\nto open up access to these while still retaining full control.\nWe create capabilities to accomplish this."),(0,o.kt)("p",null,"In our example, the owner of ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," might still want to let other people call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello")," method.\nThis is what capabilities are for. They represent a link to an object in an account's storage that has the type specified when the link is created."),(0,o.kt)("p",null,"It is important to remember that someone else who has this capability cannot move or destroy the object that the capability is linked to!\nThey can only access fields that the owner has explicitly declared in the type specification of the ",(0,o.kt)("inlineCode",{parentName:"p"},"link")," method (described below)."),(0,o.kt)("p",null,"Capabilities do not have any meaningful functionality on their own, but every capability has a ",(0,o.kt)("inlineCode",{parentName:"p"},"borrow")," method,\nwhich creates a reference to the object that the capability is linked to.\nThis reference is used to read fields or call methods on the object they reference\nas if the owner of the reference had the actual object."),(0,o.kt)("p",null,"Note that this only allows access to fields and methods.\nIt does not allow copying, moving, or modifying the original object directly."),(0,o.kt)("p",null,"Let's break down what is happening in this transaction."),(0,o.kt)("p",null,"First, we create a public link to the private ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," object in ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"let capability = account.link<&HelloWorld.HelloAsset>(/public/Hello, target: /storage/Hello)\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"link")," method returns a capability that can be used to access this link."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," object is stored in ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/HelloAssetTutorial"),", which only the account owner can access.\nThey want any user in the network to be able to call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," method. So they make a public capability in ",(0,o.kt)("inlineCode",{parentName:"p"},"/public/HelloAssetTutorial"),"."),(0,o.kt)("p",null,"To create a capability, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount.link")," method to link a new capability to an object in storage.\nThe type contained in ",(0,o.kt)("inlineCode",{parentName:"p"},"<>")," is the restricted reference type that the capability represents.\nThe capability says that whoever borrows a reference from this capability can only have access to the fields and methods\nthat are specified by the type in ",(0,o.kt)("inlineCode",{parentName:"p"},"<>"),".\nThe specified type has to be a subtype of the type of the object being linked to,\nmeaning that it cannot contain any fields or functions that the linked object doesn't have."),(0,o.kt)("p",null,"A reference is referred to by the ",(0,o.kt)("inlineCode",{parentName:"p"},"&")," symbol. Here, the capability references the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," object,\nso we specify ",(0,o.kt)("inlineCode",{parentName:"p"},"<&HelloWorld.HelloAsset>")," as the type, which gives access to everything in the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," object."),(0,o.kt)("p",null,"The first argument to the ",(0,o.kt)("inlineCode",{parentName:"p"},"link")," function is the path where you want to store the link for the capability\nand the ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," argument is the path to the object in storage that is to be linked to.\nWe always store links for capabilities in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/private/")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"/public/")," domains:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We choose ",(0,o.kt)("inlineCode",{parentName:"li"},"/private/")," if we only want to allow one or a small number of users to access it"),(0,o.kt)("li",{parentName:"ul"},"We choose ",(0,o.kt)("inlineCode",{parentName:"li"},"/public/")," if we want any user in the network to be able to access it.\nCapabilities always link to objects in the ",(0,o.kt)("inlineCode",{parentName:"li"},"/storage/")," domain.")),(0,o.kt)("p",null,"To borrow a reference to an object from the capability, we use the capability's ",(0,o.kt)("inlineCode",{parentName:"p"},"borrow")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'let helloReference = capability.borrow()\n    ?? panic("Could not borrow a reference to the hello capability")\n')),(0,o.kt)("p",null,"This method creates the reference as the type we specified in ",(0,o.kt)("inlineCode",{parentName:"p"},"<>")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"link")," function.\nWhile borrowing the reference, we use\n",(0,o.kt)("a",{parentName:"p",href:"../language/composite-types#accessing-fields-and-functions-of-composite-types-using-optional-chaining"},"optional chaining"),"\nbecause the borrowing of the reference could fail.\nThe reference could be ",(0,o.kt)("inlineCode",{parentName:"p"},"nil")," if the targeted storage slot is empty, is already borrowed,\nor if the requested type exceeds what is allowed by the capability.\nWe panic with a descriptive error message so the caller can know better what went wrong."),(0,o.kt)("p",null,"We separate this process into capabilities and references to protect against reentrancy attacks.\nA reentrancy attack is where a malicious actor could call into an object multiple times.\nThese attacks have plagued other smart contract languages.\nOnly one reference to an object can exist at a time, so this type of vulnerability isn't possible for objects in storage when you use Cadence."),(0,o.kt)("p",null,"Additionally, the owner of an object can effectively revoke capabilities they have created by moving the underlying object or destroying the link with the ",(0,o.kt)("inlineCode",{parentName:"p"},"unlink")," method.\nIf the referenced object is moved or the link is destroyed, capabilities that have been created from that link are invalidated."),(0,o.kt)("p",null,"You can find more ",(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},"detailed documentation about capabilities in the language reference.")),(0,o.kt)("p",null,"Now, anyone can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," method on your ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloAsset")," object by borrowing a reference with your public capability in ",(0,o.kt)("inlineCode",{parentName:"p"},"/public/Hello"),"!\n(Covered in the next section)"),(0,o.kt)("p",null,"Lastly, we call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," method with our borrowed reference:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"// Call the hello function using the reference to the HelloAsset resource\nlog(helloReference.hello())\n")),(0,o.kt)("p",null,"At the end of the transaction execution, the ",(0,o.kt)("inlineCode",{parentName:"p"},"helloReference")," value is lost,\nbut that is ok because while it references a resource, it isn't the actual resource itself, so it is ok to lose it."),(0,o.kt)("p",null,"In the next section, we look at how capabilities can expand the access a script has to an account."),(0,o.kt)("h3",{id:"executing-scripts"},"Executing Scripts"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"A script is a very simple transaction type in Cadence that cannot perform\nany writes to the blockchain and can only read the state of an account or contract.\nIt runs without permission from any account, so scripts need capabilities to access account storage."),(0,o.kt)("p",null,"To execute a script, write a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"pub fun main()"),".\nYou can click the execute script button to run the script.\nThe result of the script will be printed to the console output."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open the file ",(0,o.kt)("inlineCode",{parentName:"p"},"Script1.cdc"),"."),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Script1.cdc")," should look like the following:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=Script1.cdc"},'import HelloWorld from 0x01\n\npub fun main() {\n\n    // Cadence code can get an account\'s public account object\n    // by using the getAccount() built-in function.\n    let helloAccount = getAccount(0x01)\n\n    // Get the public capability from the public path of the owner\'s account\n    let helloCapability = helloAccount.getCapability<&HelloWorld.HelloAsset>(/public/HelloAssetTutorial)\n\n    // borrow a reference for the capability\n    let helloReference = helloCapability.borrow()\n        ?? panic("Could not borrow a reference to the hello capability")\n\n    // The log built-in function logs its argument to stdout.\n    //\n    // Here we are using optional chaining to call the "hello"\n    // method on the HelloAsset resource that is referenced\n    // in the published area of the account.\n    log(helloReference.hello())\n}\n')),(0,o.kt)("p",null,"Here's what this script does:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"It fetches the ",(0,o.kt)("inlineCode",{parentName:"li"},"PublicAccount")," object with ",(0,o.kt)("inlineCode",{parentName:"li"},"getAccount")," and assigns it to the variable ",(0,o.kt)("inlineCode",{parentName:"li"},"helloAccount")),(0,o.kt)("li",{parentName:"ol"},"Uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"getCapability")," method to get the capability from the ",(0,o.kt)("inlineCode",{parentName:"li"},"Create Link")," transaction"),(0,o.kt)("li",{parentName:"ol"},"Borrows a reference for the capability using the ",(0,o.kt)("inlineCode",{parentName:"li"},"borrow")," method and assigns it to ",(0,o.kt)("inlineCode",{parentName:"li"},"helloReference")),(0,o.kt)("li",{parentName:"ol"},"Logs the result of the ",(0,o.kt)("inlineCode",{parentName:"li"},"hello()")," function from ",(0,o.kt)("inlineCode",{parentName:"li"},"helloReference")," to the console.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"let helloAccount = getAccount(0x01)\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccount")," object is available to anyone in the network for every account,\nbut only has access to a small subset of functions that can be read from the ",(0,o.kt)("inlineCode",{parentName:"p"},"/public/")," domain in an account.\nMost of the ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#account-storage-api"},"account storage API"),"\nis not available on the ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccount")," object,\nand only signed transactions can make persistent changes to the ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," object.\n",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount")," can now be accessed publicly in scripts with the ",(0,o.kt)("inlineCode",{parentName:"p"},"getAuthAccount")," function,\nbut any changes are discarded after the script execution.\nWith capabilities we can make resources saved to an account explicitly available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/public/")," domain."),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts"},"language reference")," for more information about accounts."),(0,o.kt)("p",null,"Then, the script gets the capability that was created in ",(0,o.kt)("inlineCode",{parentName:"p"},"Create Link"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"// Get the public capability from the public path of the owner's account\nlet helloCapability = helloAccount.getCapability(/public/HelloAssetTutorial)\n")),(0,o.kt)("p",null,"To get a capability that is stored in an account, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"account.getCapability()")," function.\nThis function is available on ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount"),"s and on ",(0,o.kt)("inlineCode",{parentName:"p"},"PublicAccount"),"s.\n",(0,o.kt)("inlineCode",{parentName:"p"},"getCapability()")," returns a capability for the link at the path that is specified,\nalso with the type that is specified.\nIt does not check if the target exists, so the borrow will fail if the capability is invalid."),(0,o.kt)("p",null,"After that, the script borrows a reference from the capability."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"let helloReference = helloCapability.borrow()\n")),(0,o.kt)("p",null,"Then, the script uses the reference to call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," function and prints the result."),(0,o.kt)("p",null,"Let's execute the script to see it run correctly."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Execute")," button in the playground.")),(0,o.kt)(h,{src:"https://storage.googleapis.com/flow-resources/documentation-assets/cadence-tuts/playground-execute.png",mdxType:"Img"}),(0,o.kt)("p",null,"You should see something like this print:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'> "Hello, World"\n> Result > "void"\n')),(0,o.kt)("p",null,"Good work!\nYour script ran successfully."),(0,o.kt)("h2",{id:"reviewing-capabilities"},"Reviewing Capabilities"),(0,o.kt)("p",null,"This tutorial expanded on the idea of resources in Cadence by expanding access scope to a resource using capabilities\nand covering more account storage API use-cases."),(0,o.kt)("p",null,"You deployed a smart contract with a resource, then created a capability to grant access to that resource.\nWith the capability, you used the borrow method to create a reference and used the reference to call the\nresource's ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," function.\nFinally, you used a script to borrow the same capability and create a reference so that the script can\ncall the resource's ",(0,o.kt)("inlineCode",{parentName:"p"},"hello()")," function. This is important because script's cannot access account storage\nwithout using capabilities."),(0,o.kt)("p",null,"Now that you have completed the tutorial, you have the basic knowledge to write a simple Cadence program that can:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Implement a resource in a smart contract"),(0,o.kt)("li",{parentName:"ul"},"Create capabilities to grant access to resources in an account"),(0,o.kt)("li",{parentName:"ul"},"Interact with resources using both signed transactions and scripts")),(0,o.kt)("p",null,"Feel free to modify the smart contract to create different resources,\nexperiment with the available ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#account-storage-api"},"account storage API"),",\nand write new transactions and scripts that execute different functions from your smart contract.\nHave a look at the ",(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},"capability-based access control page"),"\nto find out more about what you can do with capabilities."),(0,o.kt)("p",null,"You're on the right track to building more complex applications with Cadence,\nnow is a great time to check out the ",(0,o.kt)("a",{parentName:"p",href:"../design-patterns"},"Cadence Best Practices document"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"../anti-patterns"},"Anti-patterns document")," as your applications become more complex."))}m.isMDXComponent=!0}}]);