"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7684],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(n),k=a,m=d["".concat(c,".").concat(k)]||d[k]||p[k]||o;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=k;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},54275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={},l="Contract ExampleToken",i={unversionedId:"flow/flow-ft/ExampleToken/ExampleToken",id:"flow/flow-ft/ExampleToken/ExampleToken",title:"Contract ExampleToken",description:"Implemented Interfaces:",source:"@site/docs/flow/flow-ft/ExampleToken/ExampleToken.md",sourceDirName:"flow/flow-ft/ExampleToken",slug:"/flow/flow-ft/ExampleToken/",permalink:"/flow/flow-ft/ExampleToken/",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682540899,formattedLastUpdatedAt:"Apr 26, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flow Operators",permalink:"/flow/faq/operators"},next:{title:"Resource Administrator",permalink:"/flow/flow-ft/ExampleToken/ExampleToken_Administrator"}},c={},u=[{value:"Structs &amp; Resources",id:"structs--resources",level:2},{value:"resource <code>Vault</code>",id:"resource-vault",level:3},{value:"resource <code>Administrator</code>",id:"resource-administrator",level:3},{value:"resource <code>Minter</code>",id:"resource-minter",level:3},{value:"resource <code>Burner</code>",id:"resource-burner",level:3},{value:"Functions",id:"functions",level:2},{value:"fun <code>createEmptyVault()</code>",id:"fun-createemptyvault",level:3},{value:"Events",id:"events",level:2},{value:"event <code>TokensInitialized</code>",id:"event-tokensinitialized",level:3},{value:"event <code>TokensWithdrawn</code>",id:"event-tokenswithdrawn",level:3},{value:"event <code>TokensDeposited</code>",id:"event-tokensdeposited",level:3},{value:"event <code>TokensMinted</code>",id:"event-tokensminted",level:3},{value:"event <code>TokensBurned</code>",id:"event-tokensburned",level:3},{value:"event <code>MinterCreated</code>",id:"event-mintercreated",level:3},{value:"event <code>BurnerCreated</code>",id:"event-burnercreated",level:3}],s={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"contract-exampletoken"},"Contract ",(0,a.kt)("inlineCode",{parentName:"h1"},"ExampleToken")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"contract ExampleToken {\n\n    totalSupply:  UFix64\n\n    VaultStoragePath:  StoragePath\n\n    ReceiverPublicPath:  PublicPath\n\n    VaultPublicPath:  PublicPath\n\n    AdminStoragePath:  StoragePath\n}\n")),(0,a.kt)("p",null,"Implemented Interfaces:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FungibleToken"))),(0,a.kt)("h2",{id:"structs--resources"},"Structs & Resources"),(0,a.kt)("h3",{id:"resource-vault"},"resource ",(0,a.kt)("inlineCode",{parentName:"h3"},"Vault")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"resource Vault {\n\n    balance:  UFix64\n}\n")),(0,a.kt)("p",null,"Each user stores an instance of only the Vault in their storage\nThe functions in the Vault and governed by the pre and post conditions\nin FungibleToken when they are called.\nThe checks happen at runtime whenever a function is called."),(0,a.kt)("p",null,"Resources can only be created in the context of the contract that they\nare defined in, so there is no way for a malicious user to create Vaults\nout of thin air. A special Minter resource needs to be defined to mint\nnew tokens."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/flow/flow-ft/ExampleToken/ExampleToken_Vault"},"More...")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"resource-administrator"},"resource ",(0,a.kt)("inlineCode",{parentName:"h3"},"Administrator")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"resource Administrator {\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/flow/flow-ft/ExampleToken/ExampleToken_Administrator"},"More...")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"resource-minter"},"resource ",(0,a.kt)("inlineCode",{parentName:"h3"},"Minter")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"resource Minter {\n\n    allowedAmount:  UFix64\n}\n")),(0,a.kt)("p",null,"Resource object that token admin accounts can hold to mint new tokens."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/flow/flow-ft/ExampleToken/ExampleToken_Minter"},"More...")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"resource-burner"},"resource ",(0,a.kt)("inlineCode",{parentName:"h3"},"Burner")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"resource Burner {\n}\n")),(0,a.kt)("p",null,"Resource object that token admin accounts can hold to burn tokens."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/flow/flow-ft/ExampleToken/ExampleToken_Burner"},"More...")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"fun-createemptyvault"},"fun ",(0,a.kt)("inlineCode",{parentName:"h3"},"createEmptyVault()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"func createEmptyVault(): Vault\n")),(0,a.kt)("p",null,"Function that creates a new Vault with a balance of zero\nand returns it to the calling context. A user must call this function\nand store the returned Vault in their storage in order to allow their\naccount to be able to receive deposits of this token type."),(0,a.kt)("p",null,"Returns: The new Vault resource"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"event-tokensinitialized"},"event ",(0,a.kt)("inlineCode",{parentName:"h3"},"TokensInitialized")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"event TokensInitialized(initialSupply UFix64)\n")),(0,a.kt)("p",null,"The event that is emitted when the contract is created"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"event-tokenswithdrawn"},"event ",(0,a.kt)("inlineCode",{parentName:"h3"},"TokensWithdrawn")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"event TokensWithdrawn(amount UFix64, from Address?)\n")),(0,a.kt)("p",null,"The event that is emitted when tokens are withdrawn from a Vault"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"event-tokensdeposited"},"event ",(0,a.kt)("inlineCode",{parentName:"h3"},"TokensDeposited")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"event TokensDeposited(amount UFix64, to Address?)\n")),(0,a.kt)("p",null,"The event that is emitted when tokens are deposited to a Vault"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"event-tokensminted"},"event ",(0,a.kt)("inlineCode",{parentName:"h3"},"TokensMinted")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"event TokensMinted(amount UFix64)\n")),(0,a.kt)("p",null,"The event that is emitted when new tokens are minted"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"event-tokensburned"},"event ",(0,a.kt)("inlineCode",{parentName:"h3"},"TokensBurned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"event TokensBurned(amount UFix64)\n")),(0,a.kt)("p",null,"The event that is emitted when tokens are destroyed"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"event-mintercreated"},"event ",(0,a.kt)("inlineCode",{parentName:"h3"},"MinterCreated")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"event MinterCreated(allowedAmount UFix64)\n")),(0,a.kt)("p",null,"The event that is emitted when a new minter resource is created"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"event-burnercreated"},"event ",(0,a.kt)("inlineCode",{parentName:"h3"},"BurnerCreated")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"event BurnerCreated()\n")),(0,a.kt)("p",null,"The event that is emitted when a new burner resource is created"),(0,a.kt)("hr",null))}p.isMDXComponent=!0}}]);