"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4564],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>g});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=n.createContext({}),d=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=d(t.components);return n.createElement(o.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,s=p(t,["components","mdxType","originalType","parentName"]),m=d(a),k=r,g=m["".concat(o,".").concat(k)]||m[k]||u[k]||l;return a?n.createElement(g,i(i({ref:e},s),{},{components:a})):n.createElement(g,i({ref:e},s))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p[m]="string"==typeof t?t:r,i[1]=p;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},97217:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={},i="Flow Cadence Utilities API Reference",p={unversionedId:"tools/flow-cadut/api",id:"tools/flow-cadut/api",title:"Flow Cadence Utilities API Reference",description:"Imports",source:"@site/docs/tools/flow-cadut/api.md",sourceDirName:"tools/flow-cadut",slug:"/tools/flow-cadut/api",permalink:"/tools/flow-cadut/api",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682540899,formattedLastUpdatedAt:"Apr 26, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flow App Quickstart",permalink:"/tools/fcl-js/tutorials/flow-app-quickstart"},next:{title:"Flow Cadut Generator API Reference",permalink:"/tools/flow-cadut/generator"}},o={},d=[{value:"Imports",id:"imports",level:2},{value:"<code>extractImports(code)</code>",id:"extractimportscode",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:4},{value:"<code>missingImports(code, addressMap)</code>",id:"missingimportscode-addressmap",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"<code>report(list, prefix)</code>",id:"reportlist-prefix",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Usage",id:"usage-2",level:4},{value:"<code>reportMissingImports(code, addressMap, prefix)</code>",id:"reportmissingimportscode-addressmap-prefix",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Usage",id:"usage-3",level:4},{value:"<code>replaceImportAddresses(code, addressMap)</code>",id:"replaceimportaddressescode-addressmap",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Usage",id:"usage-4",level:4},{value:"Arguments",id:"arguments-5",level:2},{value:"<code>mapArgument(type, value)</code>",id:"mapargumenttype-value",level:3},{value:"Arguments",id:"arguments-6",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Usage",id:"usage-5",level:4},{value:"<code>mapArguments(schema, values)</code>",id:"mapargumentsschema-values",level:3},{value:"Arguments",id:"arguments-7",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Usage",id:"usage-6",level:4},{value:"<code>mapValuesToCode(code, values)</code>",id:"mapvaluestocodecode-values",level:3},{value:"Arguments",id:"arguments-8",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Throws",id:"throws",level:4},{value:"Parser",id:"parser",level:2},{value:"<code>getTemplateInfo(code)</code>",id:"gettemplateinfocode",level:3},{value:"Arguments",id:"arguments-9",level:4},{value:"Usage",id:"usage-7",level:4},{value:"<code>extractSigners(code)</code>",id:"extractsignerscode",level:3},{value:"Arguments",id:"arguments-10",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Usage",id:"usage-8",level:4},{value:"<code>extractScriptArguments(code)</code>",id:"extractscriptargumentscode",level:3},{value:"Arguments",id:"arguments-11",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Usage",id:"usage-9",level:4},{value:"<code>extractTransactionArguments(code)</code>",id:"extracttransactionargumentscode",level:3},{value:"Arguments",id:"arguments-12",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Usage",id:"usage-10",level:4},{value:"<code>extractContractName(code)</code>",id:"extractcontractnamecode",level:3},{value:"Arguments",id:"arguments-13",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Usage",id:"usage-11",level:4},{value:"<code>splitArgs(pair)</code>",id:"splitargspair",level:3},{value:"Arguments",id:"arguments-14",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Usage",id:"usage-12",level:4},{value:"<code>argType(pair)</code>",id:"argtypepair",level:3},{value:"Arguments",id:"arguments-15",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Usage",id:"usage-13",level:4},{value:"<code>getArrayType(type)</code>",id:"getarraytypetype",level:3},{value:"Arguments",id:"arguments-16",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Usage",id:"usage-14",level:4},{value:"<code>getDictionaryTypes(type)</code>",id:"getdictionarytypestype",level:3},{value:"Arguments",id:"arguments-17",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Usage",id:"usage-15",level:4},{value:"Generator",id:"generator",level:2},{value:"<code>processFolder(input, output, options)</code>",id:"processfolderinput-output-options",level:3},{value:"Arguments",id:"arguments-18",level:4},{value:"Options",id:"options",level:4},{value:"Usage",id:"usage-16",level:4},{value:"<code>processGitRepo(url, output, branch, options)</code>",id:"processgitrepourl-output-branch-options",level:3},{value:"Arguments",id:"arguments-19",level:4},{value:"Options",id:"options-1",level:4},{value:"Usage",id:"usage-17",level:4},{value:"Interactions",id:"interactions",level:2},{value:"<code>setEnvironment(network, options)</code>",id:"setenvironmentnetwork-options",level:3},{value:"Arguments",id:"arguments-20",level:4},{value:"Network Variants",id:"network-variants",level:4},{value:"Options",id:"options-2",level:4},{value:"Usage",id:"usage-18",level:4},{value:"<code>getEnvironment()</code>",id:"getenvironment",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Usage",id:"usage-19",level:4},{value:"<code>hexContract(code)</code>",id:"hexcontractcode",level:3},{value:"Arguments",id:"arguments-21",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Usage",id:"usage-20",level:4},{value:"<code>executeScript(args)</code>",id:"executescriptargs",level:3},{value:"Arguments",id:"arguments-22",level:4},{value:"Returns",id:"returns-16",level:4},{value:"ScriptArguments",id:"scriptarguments",level:5},{value:"ScriptResult",id:"scriptresult",level:5},{value:"Usage",id:"usage-21",level:4},{value:"Alias",id:"alias",level:5},{value:"<code>sendTransaction</code>",id:"sendtransaction",level:3},{value:"Arguments",id:"arguments-23",level:4},{value:"Returns",id:"returns-17",level:4},{value:"TransactionArguments",id:"transactionarguments",level:4},{value:"TransactionResult",id:"transactionresult",level:5},{value:"Usage",id:"usage-22",level:4},{value:"Alias",id:"alias-1",level:5}],s={toc:d},m="wrapper";function u(t){let{components:e,...a}=t;return(0,r.kt)(m,(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flow-cadence-utilities-api-reference"},"Flow Cadence Utilities API Reference"),(0,r.kt)("h2",{id:"imports"},"Imports"),(0,r.kt)("h3",{id:"extractimportscode"},(0,r.kt)("inlineCode",{parentName:"h3"},"extractImports(code)")),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},"contract name as key and import address as value")))),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { extractImports } from "@onflow/flow-cadut";\n\nconst code = `\n  import Message from 0x01\n  import Utilities from 0x02\n  \n  pub fun main(){\n    Utilities.log(Message.hello)\n  }\n`;\nconst imports = extractImports(code);\n\nconsole.log(imports);\n/*\n *  Line above shall show the following:\n *  {\n *     "Message": "0x01",\n *     "Utilities": "0x02"\n *   }\n * */\n')),(0,r.kt)("h3",{id:"missingimportscode-addressmap"},(0,r.kt)("inlineCode",{parentName:"h3"},"missingImports(code, addressMap)")),(0,r.kt)("p",null,"Given Cadence code template and addressMap, returns an array of missing contract imports"),(0,r.kt)("h4",{id:"arguments-1"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#AddressMap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"addressMap for provided template")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},"array strings, representing names of missing contract imports")))),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { missingImports } from "@onflow/flow-cadut";\n\nconst code = `\n  import Message from 0x01\n  import Utilities from 0x02\n  \n  pub fun main(){\n    Utilities.log(Message.hello)\n  }\n`;\n\nconst missing = missingImports(code, {});\nconsole.log({ missing });\n')),(0,r.kt)("h3",{id:"reportlist-prefix"},(0,r.kt)("inlineCode",{parentName:"h3"},"report(list, prefix)")),(0,r.kt)("p",null,"Reports missing imports via ",(0,r.kt)("inlineCode",{parentName:"p"},"console.error")," with format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[prefix] Missing Imports for contracts: [ Contract_1, Contract_2 ]\n")),(0,r.kt)("h4",{id:"arguments-2"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"array"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"list of missing contract imports")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'))))),(0,r.kt)("h4",{id:"usage-2"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { missingImports, report } from "@onflow/flow-cadut";\nconst code = `\n      import Message from 0x01\n      \n      pub fun main(){}\n    `;\nconst list = missingImports(code, {});\nreport(list);\n')),(0,r.kt)("h3",{id:"reportmissingimportscode-addressmap-prefix"},(0,r.kt)("inlineCode",{parentName:"h3"},"reportMissingImports(code, addressMap, prefix)")),(0,r.kt)("p",null,"Checks and reports missing contracts by matching code and addressMap in format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[prefix] Missing Imports for contracts: [ Contract_1, Contract_2 ]\n")),(0,r.kt)("h4",{id:"arguments-3"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code to check")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#AddressMap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"addressMap for imported contracts. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"message prefix. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'))))),(0,r.kt)("h4",{id:"usage-3"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { missingImports, report } from "@onflow/flow-cadut";\n\nconst code = `\n  import Message from 0x01\n  \n  pub fun main(){}\n`;\n\nreportMissingImports(code);\n')),(0,r.kt)("h3",{id:"replaceimportaddressescode-addressmap"},(0,r.kt)("inlineCode",{parentName:"h3"},"replaceImportAddresses(code, addressMap)")),(0,r.kt)("p",null,"Replaces import statements in provided Cadence templates with corresponding values from addressMap"),(0,r.kt)("h4",{id:"arguments-4"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#AddressMap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"AddressMap to use map contract names to addresses")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Updated template with replaced addresses")))),(0,r.kt)("h4",{id:"usage-4"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { replaceImportAddresses } from "@onflow/flow-cadut";\n\nconst code = `\n  import Messages from 0x01\n  \n  pub fun main(){}\n`;\nconst addressMap = {\n  Message: "0xf8d6e0586b0a20c7",\n};\nconst replaced = replaceImportAddresses(code, addressMap);\nconsole.log({ replaced });\n')),(0,r.kt)("h2",{id:"arguments-5"},"Arguments"),(0,r.kt)("h3",{id:"mapargumenttype-value"},(0,r.kt)("inlineCode",{parentName:"h3"},"mapArgument(type, value)")),(0,r.kt)("p",null,"Converts provided value to ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk")," argument."),(0,r.kt)("p",null,"\ud83d\udce3 Best usage of this method is with combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")," methods from Javascript SDK."),(0,r.kt)("h4",{id:"arguments-6"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence type represented as string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"correspondent value to use for conversion")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#Argument"},"Argument")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sdk")," argument")))),(0,r.kt)("h4",{id:"usage-5"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { query, config } from "@onflow/fcl";\nimport { mapArgument } from "@onflow/flow-cadut";\n\n(async () => {\n  config().put("accessNode.api", "https://rest-testnet.onflow.org");\n\n  const cadence = `\n    pub fun main(message: String): String{\n      return message\n    }\n`;\n\n  // Script expects a single argument of type "String"\n  const message = mapArgument("String", "Hello from Cadence!");\n\n  // "args" shall return array of arguments.\n  // We will pass "message" value into it\n  const args = () => [message];\n\n  const result = await query({ cadence, args });\n  console.log(result);\n})();\n')),(0,r.kt)("h3",{id:"mapargumentsschema-values"},(0,r.kt)("inlineCode",{parentName:"h3"},"mapArguments(schema, values)")),(0,r.kt)("p",null,"Converts provided values to ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk")," arguments."),(0,r.kt)("p",null,"\ud83d\udce3 Best usage of this method is with combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")," methods from Javascript SDK."),(0,r.kt)("h4",{id:"arguments-7"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"schema")),(0,r.kt)("td",{parentName:"tr",align:null},"array","[string]"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of Cadence types represented as string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"values")),(0,r.kt)("td",{parentName:"tr",align:null},"array","[any]"),(0,r.kt)("td",{parentName:"tr",align:null},"array of correspondent values to use for conversion")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"array[",(0,r.kt)("a",{parentName:"td",href:"#Argument"},"Argument"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"array of ",(0,r.kt)("inlineCode",{parentName:"td"},"sdk")," arguments")))),(0,r.kt)("h4",{id:"usage-6"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { query, config } from "@onflow/fcl";\nimport { mapArgument } from "@onflow/flow-cadut";\n\n(async () => {\n  config().put("accessNode.api", "https://rest-testnet.onflow.org");\n\n  const cadence = `\n    pub fun main(message: String, amount: Int): Int{\n      log(message)\n      return amount\n    }\n`;\n\n  // Script expects multiple arguments - "String" and "Int"\n  const schema = ["String", "Int"];\n  // These are the values we will convert to arguments\n  const values = ["Hello from Cadence", 1337];\n  // mapArguments will return an array, no extra steps are required\n  const args = () => mapArguments(schema, values);\n\n  const result = await query({ cadence, args });\n  console.log(result);\n})();\n')),(0,r.kt)("h3",{id:"mapvaluestocodecode-values"},(0,r.kt)("inlineCode",{parentName:"h3"},"mapValuesToCode(code, values)")),(0,r.kt)("p",null,"This method will extract argument types from provided Cadence code and then converts\nvalues to corresponding types, preparing them to be passed into ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk.send")),(0,r.kt)("p",null,"\ud83d\udce3 Best usage of this method is with combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")," methods from Javascript SDK."),(0,r.kt)("h4",{id:"arguments-8"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"values")),(0,r.kt)("td",{parentName:"tr",align:null},"array"),(0,r.kt)("td",{parentName:"tr",align:null},"array of values to process")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"array"),(0,r.kt)("td",{parentName:"tr",align:null},"array of ",(0,r.kt)("inlineCode",{parentName:"td"},"sdk")," arguments")))),(0,r.kt)("h4",{id:"throws"},"Throws"),(0,r.kt)("p",null,"This method will throw an error if user would fail to provide required amount of arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { query, config } from "@onflow/fcl";\nimport { mapValuesToCode } from "@onflow/flow-cadut";\n\n(async () => {\n  config().put("accessNode.api", "https://rest-testnet.onflow.org");\n\n  const cadence = `\n    pub fun main(metadata: {String:String}, key: String):String {\n      return metadata[key]!\n    }\n`;\n\n  const result = await query({\n    cadence,\n    args: () =>\n      mapValuesToCode(cadence, [\n        { language: "Cadence", languageRating: "Cadence is Awesome \ud83e\udd1f" },\n        "languageRating",\n      ]),\n  });\n\n  console.log(result);\n})();\n')),(0,r.kt)("h2",{id:"parser"},"Parser"),(0,r.kt)("h3",{id:"gettemplateinfocode"},(0,r.kt)("inlineCode",{parentName:"h3"},"getTemplateInfo(code)")),(0,r.kt)("p",null,"Parses the code and returns ",(0,r.kt)("a",{parentName:"p",href:"#TemplateInfo"},"TemplateInfo")),(0,r.kt)("h4",{id:"arguments-9"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code to process")))),(0,r.kt)("h4",{id:"usage-7"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { getTemplateInfo } from "@onflow/flow-cadut";\n\nconst script = `\n  pub fun main(message:String):String{\n    return 42\n  }\n`;\nconst info = getTemplateInfo(script);\n\n/*\n * "info" will contain an object:\n *   {\n *     type: "script",\n *     args: [ \'message:String\' ]\n *   }\n */\nconsole.log({ info });\n')),(0,r.kt)("h3",{id:"extractsignerscode"},(0,r.kt)("inlineCode",{parentName:"h3"},"extractSigners(code)")),(0,r.kt)("p",null,"Parses the code and returns array of ",(0,r.kt)("a",{parentName:"p",href:"#SignerPair"},"SignerPair")),(0,r.kt)("h4",{id:"arguments-10"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code to process")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#SignerPair"},"SignerPair")),(0,r.kt)("td",{parentName:"tr",align:null},"String representation of signer pair")))),(0,r.kt)("h4",{id:"usage-8"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { extractSigners } from "@onflow/flow-cadut";\n\nconst script = `\n  pub fun main(){\n    log("nothing to see here :)")\n  }\n`;\nconst signers = extractSigners(script);\nconsole.log({ signers });\n')),(0,r.kt)("h3",{id:"extractscriptargumentscode"},(0,r.kt)("inlineCode",{parentName:"h3"},"extractScriptArguments(code)")),(0,r.kt)("p",null,"Parses the code and returns array of ",(0,r.kt)("a",{parentName:"p",href:"#ArgumentPair"},"ArgumentPair")),(0,r.kt)("h4",{id:"arguments-11"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code to process")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#ArgumentPair"},"ArgumentPair")),(0,r.kt)("td",{parentName:"tr",align:null},"String representation of argument pair")))),(0,r.kt)("h4",{id:"usage-9"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { extractScriptArguments } from "@onflow/flow-cadut";\n\nconst script = `\n  pub fun main(message: String, metadata: {String:String}){\n    log(message)\n  }\n`;\nconst args = extractScriptArguments(script);\nconsole.log({ args });\n')),(0,r.kt)("h3",{id:"extracttransactionargumentscode"},(0,r.kt)("inlineCode",{parentName:"h3"},"extractTransactionArguments(code)")),(0,r.kt)("p",null,"Parses the code and returns array of ",(0,r.kt)("a",{parentName:"p",href:"#ArgumentPair"},"ArgumentPair")),(0,r.kt)("h4",{id:"arguments-12"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code to process")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#ArgumentPair"},"ArgumentPair")),(0,r.kt)("td",{parentName:"tr",align:null},"String representation of argument pair")))),(0,r.kt)("h4",{id:"usage-10"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { extractTransactionArguments } from "@onflow/flow-cadut";\n\nconst tx = `\n  transaction(message: String, metadata: {String:String}){\n    prepare(signer:AuthAccount){\n      \n    }\n  }\n`;\nconst args = extractTransactionArguments(tx);\nconsole.log({ args });\n')),(0,r.kt)("h3",{id:"extractcontractnamecode"},(0,r.kt)("inlineCode",{parentName:"h3"},"extractContractName(code)")),(0,r.kt)("p",null,"Parses the code and returns contract name"),(0,r.kt)("h4",{id:"arguments-13"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code to process")))),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"name of the contract defined in template code")))),(0,r.kt)("h4",{id:"usage-11"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { extractContractName } from "@onflow/flow-cadut";\n\nconst contract = `\n  pub contract HelloWorld{\n    init(){}\n  }\n`;\nconst name = extractContractName(contract);\nconsole.log({ name });\n')),(0,r.kt)("h3",{id:"splitargspair"},(0,r.kt)("inlineCode",{parentName:"h3"},"splitArgs(pair)")),(0,r.kt)("p",null,"Splits ",(0,r.kt)("a",{parentName:"p",href:"#ArgumentPair"},"ArgumentPair")," into array of two items"),(0,r.kt)("h4",{id:"arguments-14"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pair")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#ArgumentPair"},"ArgumentPair")),(0,r.kt)("td",{parentName:"tr",align:null},"argument pair in form of a string")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"array"),(0,r.kt)("td",{parentName:"tr",align:null},"first item is a name, second - string representation of type")))),(0,r.kt)("h4",{id:"usage-12"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { splitArgs } from "@onflow/flow-cadut";\nconst simplePair = "message:String";\nconst metaPair = "metadata: {String:String}";\n\nconst simple = splitArgs(simplePair);\nconst meta = splitArgs(metaPair);\n\nconsole.log({ simple, meta });\n')),(0,r.kt)("h3",{id:"argtypepair"},(0,r.kt)("inlineCode",{parentName:"h3"},"argType(pair)")),(0,r.kt)("p",null,"Splits ",(0,r.kt)("a",{parentName:"p",href:"#ArgumentPair"},"ArgumentPair")," and returns type of the argument"),(0,r.kt)("h4",{id:"arguments-15"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"`pair"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#ArgumentPair"},"ArgumentPair")),(0,r.kt)("td",{parentName:"tr",align:null},"argument pair in form of a string")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string representation of argument type")))),(0,r.kt)("h4",{id:"usage-13"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { argType } from "@onflow/flow-cadut";\n\nconst simplePair = "message:String";\nconst metaPair = "metadata: {String:String}";\n\nconst simple = argType(simplePair);\nconst meta = argType(metaPair);\n\nconsole.log({ simple, meta });\n')),(0,r.kt)("h3",{id:"getarraytypetype"},(0,r.kt)("inlineCode",{parentName:"h3"},"getArrayType(type)")),(0,r.kt)("p",null,"Extracts item type from array type"),(0,r.kt)("h4",{id:"arguments-16"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string representation of Array type")))),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string representation of item type")))),(0,r.kt)("h4",{id:"usage-14"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { getArrayType } from "@onflow/flow-cadut";\n\nconst simpleType = getArrayType("[String]");\nconst complexType = getArrayType("[{String: String}]");\n\nconsole.log({ simpleType, complexType });\n')),(0,r.kt)("h3",{id:"getdictionarytypestype"},(0,r.kt)("inlineCode",{parentName:"h3"},"getDictionaryTypes(type)")),(0,r.kt)("p",null,"Extracts key and value types from Dictionary type"),(0,r.kt)("h4",{id:"arguments-17"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string representation of Dictionary type")))),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"array"),(0,r.kt)("td",{parentName:"tr",align:null},"array of strings - first item for the ",(0,r.kt)("inlineCode",{parentName:"td"},"key")," type, second for the ",(0,r.kt)("inlineCode",{parentName:"td"},"value")," type")))),(0,r.kt)("h4",{id:"usage-15"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { getDictionaryTypes } from "@onflow/flow-cadut";\n\nconst type = "{String: UFix64}";\nconst types = getDictionaryTypes(type);\nconst [keyType, valueType] = types;\n\nconsole.log({ keyType, valueType });\n')),(0,r.kt)("h2",{id:"generator"},"Generator"),(0,r.kt)("h3",{id:"processfolderinput-output-options"},(0,r.kt)("inlineCode",{parentName:"h3"},"processFolder(input, output, options)")),(0,r.kt)("p",null,"Recursively goes through ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," folder and generates code for found contracts, transactions and scripts.\nWrite files under ",(0,r.kt)("inlineCode",{parentName:"p"},"output")," path."),(0,r.kt)("h4",{id:"arguments-18"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"input")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"path to the input folder")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"output")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"path to output folder")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"additional options. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("h4",{id:"options"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dependency")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"interactions dependency. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"flow-cadut"))))),(0,r.kt)("h4",{id:"usage-16"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path";\nimport { processFolder } from "@onflow/flow-cadut";\n\n(async () => {\n  const input = path.resolve("./cadence");\n  const output = path.resolve("./src/generated/localRegistry");\n\n  await processFolder(input, output);\n  console.log("\u2705 Done!");\n})();\n')),(0,r.kt)("h3",{id:"processgitrepourl-output-branch-options"},(0,r.kt)("inlineCode",{parentName:"h3"},"processGitRepo(url, output, branch, options)")),(0,r.kt)("p",null,"Fetches GitHub repository from provided ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"branch"),". Then generates code for found contracts, transactions and scripts.\nWrite files under ",(0,r.kt)("inlineCode",{parentName:"p"},"output")," path."),(0,r.kt)("h4",{id:"arguments-19"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"url")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"url to GitHub repo")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"output")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"path to output folder")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"branch")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"branch to use. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"main"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"additional options. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("h4",{id:"options-1"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dependency")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"interactions dependency. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"flow-cadut"))))),(0,r.kt)("h4",{id:"usage-17"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import path from "path";\nimport { processGitRepo } from "@onflow/flow-cadut";\n\n(async () => {\n  const url = path.resolve("https://github.com/onflow/flow-core-contracts");\n  const output = path.resolve("./src/generated/localRegistry");\n\n  await processGitRepo(url, output);\n  console.log("\u2705 Done!");\n})();\n')),(0,r.kt)("h2",{id:"interactions"},"Interactions"),(0,r.kt)("h3",{id:"setenvironmentnetwork-options"},(0,r.kt)("inlineCode",{parentName:"h3"},"setEnvironment(network, options)")),(0,r.kt)("p",null,"Sets ",(0,r.kt)("inlineCode",{parentName:"p"},"flow.network")," config value"),(0,r.kt)("h4",{id:"arguments-20"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"network")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"network to use. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"emulator"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"extra options to adjust config")))),(0,r.kt)("h4",{id:"network-variants"},"Network Variants"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variants"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emulator")),(0,r.kt)("td",{parentName:"tr",align:null},'Emulator instance running locally at "http://localhost:8080"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"testnet")),(0,r.kt)("td",{parentName:"tr",align:null},"Testnet access node at ",(0,r.kt)("a",{parentName:"td",href:"https://access-testnet.onflow.org"},"https://access-testnet.onflow.org"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mainnet")),(0,r.kt)("td",{parentName:"tr",align:null},'Mainnet access node at "',(0,r.kt)("a",{parentName:"td",href:"https://access.mainnet.onflow.org%22"},'https://access.mainnet.onflow.org"'))))),(0,r.kt)("h4",{id:"options-2"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options.port")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"port for emulator. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"8080"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options.endpoint")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Access API endpoint.")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Attention: ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint")," will override ",(0,r.kt)("inlineCode",{parentName:"p"},"port")," and provided ",(0,r.kt)("inlineCode",{parentName:"p"},"network"),". Don't mix endpoint from different ",(0,r.kt)("inlineCode",{parentName:"p"},"network")," - it might lead to unexpected result.")),(0,r.kt)("h4",{id:"usage-18"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { setEnvironment } from "@onflow/flow-cadut";\n\n(async () => {\n  await setEnvironment("testnet");\n})();\n')),(0,r.kt)("h3",{id:"getenvironment"},(0,r.kt)("inlineCode",{parentName:"h3"},"getEnvironment()")),(0,r.kt)("p",null,"Returns a set of deployed contracts for current environment"),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#AddressMap"},"AddressMap")," for known contracts deployed in current environment")))),(0,r.kt)("h4",{id:"usage-19"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { setEnvironment, getEnvironment } from "@onflow/flow-cadut";\n\n(async () => {\n  await setEnvironment("mainnet");\n  const addressMap = await getEnvironment();\n  console.log({ addressMap });\n})();\n')),(0,r.kt)("h3",{id:"hexcontractcode"},(0,r.kt)("inlineCode",{parentName:"h3"},"hexContract(code)")),(0,r.kt)("p",null,"Prepares Cadence template code to pass into deployment transaction.\nSyntax sugar for ",(0,r.kt)("inlineCode",{parentName:"p"},'Buffer.from(code, "utf8").toString("hex");')),(0,r.kt)("h4",{id:"arguments-21"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence template code")))),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"hex representation of template code")))),(0,r.kt)("h4",{id:"usage-20"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { hexContract } from "@onflow/flow-cadut";\n\nconst code = `\n  pub contract HelloWorld{\n    init(){}\n  }\n`;\nconst hexed = hexContract(code);\n')),(0,r.kt)("h3",{id:"executescriptargs"},(0,r.kt)("inlineCode",{parentName:"h3"},"executeScript(args)")),(0,r.kt)("p",null,"Sends script to the network"),(0,r.kt)("h4",{id:"arguments-22"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#ScriptArguments"},"ScriptArguments")),(0,r.kt)("td",{parentName:"tr",align:null},"script arguments")))),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#ScriptResult"},"ScriptResult")),(0,r.kt)("td",{parentName:"tr",align:null},"Result of script execution.")))),(0,r.kt)("h5",{id:"scriptarguments"},"ScriptArguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence code to execute")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"array",(0,r.kt)("a",{parentName:"td",href:"#InteractionArgument"},"InteractionArgument")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional if script does not expect arguments. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#AddressMap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"address map to use for import replacement. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"limit")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"gas limit. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"100"))))),(0,r.kt)("h5",{id:"scriptresult"},"ScriptResult"),(0,r.kt)("p",null,"Script result is represented as a tuple ",(0,r.kt)("inlineCode",{parentName:"p"},"[result, error]")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"result of script execution. Type of this value depends on script return value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"error")),(0,r.kt)("td",{parentName:"tr",align:null},"error"),(0,r.kt)("td",{parentName:"tr",align:null},"Caught error. This will be ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," if script executed successfully")))),(0,r.kt)("h4",{id:"usage-21"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { executeScript } from "@onflow/flow-cadut";\n\n(async () => {\n  const code = `\n    pub fun main():Int{\n      return 42\n    }\n  `;\n\n  const [result, err] = executeScript({ code });\n  console.log({ result });\n})();\n')),(0,r.kt)("h5",{id:"alias"},"Alias"),(0,r.kt)("p",null,"This method is also available under alias ",(0,r.kt)("inlineCode",{parentName:"p"},"query")),(0,r.kt)("h3",{id:"sendtransaction"},(0,r.kt)("inlineCode",{parentName:"h3"},"sendTransaction")),(0,r.kt)("p",null,"Sends script to the network"),(0,r.kt)("h4",{id:"arguments-23"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#TransactionArguments"},"TransactionArguments")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"transaction arguments")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"waitForExecution")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"wait for transaction execution or not")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"waitForExecution")," flag is set to true, method will not return result until ",(0,r.kt)("inlineCode",{parentName:"p"},"fcl.tx(hash).onceExecuted()")," is resolved")),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#TransactionResult"},"TransactionResult")),(0,r.kt)("td",{parentName:"tr",align:null},"Result of script execution.")))),(0,r.kt)("h4",{id:"transactionarguments"},"TransactionArguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Cadence code to execute")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"payer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/api/#authorizationfunction"},"AuthorizationFunction")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The authorization function that returns a valid ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/api/#authorizationobject"},"AuthorizationObject")," for the payer role.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signers")),(0,r.kt)("td",{parentName:"tr",align:null},"[AuthorizationFunction]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"an array of ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/api/#authorizationobject"},"AuthorizationObject")," representing transaction authorizers. Default: same as ",(0,r.kt)("inlineCode",{parentName:"td"},"payer"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"proposer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/api/#authorizationfunction"},"AuthorizationFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"The authorization function that returns a valid ",(0,r.kt)("a",{parentName:"td",href:"https://docs.onflow.org/fcl/api/#authorizationobject"},"AuthorizationObject")," for the proposer role. Default: same as ",(0,r.kt)("inlineCode",{parentName:"td"},"payer"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"[Any]"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional if transactions does not expect arguments. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addressMap")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#AddressMap"},"AddressMap")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"address map to use for import replacement. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"limit")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"gas limit. Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"100"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When being used in the browser, you can pass built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"fcl.authz")," function to produce the authorization (signatures) for the current user.\nWhen calling this method from Node.js, you will need to supply your own custom authorization functions.")),(0,r.kt)("h5",{id:"transactionresult"},"TransactionResult"),(0,r.kt)("p",null,"Transaction result is represented as a tuple ",(0,r.kt)("inlineCode",{parentName:"p"},"[result, error]")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[ResponseObject][https://docs.onflow.org/fcl/api/#responseobject]"),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"result of transaction execution. Type of this value depends on script return value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"error")),(0,r.kt)("td",{parentName:"tr",align:null},"error"),(0,r.kt)("td",{parentName:"tr",align:null},"Caught error. This will be ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," if script executed successfully")))),(0,r.kt)("h4",{id:"usage-22"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { authenticate, currentUser, authz, config } from "@onflow/fcl";\nimport { sendTransaction } from "@onflow/flow-cadut";\n\nconfig()\n  .put("accessNode.api", "https://rest-testnet.onflow.org") // Configure FCL\'s Access Node\n  .put("challenge.handshake", "https://fcl-discovery.onflow.org/testnet/authn") // Configure FCL\'s Wallet Discovery mechanism\n  .put("0xProfile", "0xba1132bc08f82fe2"); // Will let us use `0xProfile` in our Cadence\n\n(async () => {\n  currentUser().subscribe(async (user) => {\n    const code = `\n    transaction {\n      prepare(currentUser: AuthAccount) {\n        log("hello")\n      }\n    }`;\n\n    const [result] = await sendTransaction({ code, payer: authz });\n    console.log({ result });\n  });\n\n  authenticate();\n})();\n')),(0,r.kt)("h5",{id:"alias-1"},"Alias"),(0,r.kt)("p",null,"This method is also available under alias ",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")))}u.isMDXComponent=!0}}]);