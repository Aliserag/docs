"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3728],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),c=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(h,o(o({ref:e},p),{},{components:n})):a.createElement(h,o({ref:e},p))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},54096:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},o=void 0,i={unversionedId:"tools/fcl-js/reference/sdk-guidelines",id:"tools/fcl-js/reference/sdk-guidelines",title:"sdk-guidelines",description:"Overview",source:"@site/docs/tools/fcl-js/reference/sdk-guidelines.mdx",sourceDirName:"tools/fcl-js/reference",slug:"/tools/fcl-js/reference/sdk-guidelines",permalink:"/tools/fcl-js/reference/sdk-guidelines",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682541550,formattedLastUpdatedAt:"Apr 26, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scripts",permalink:"/tools/fcl-js/reference/scripts"},next:{title:"Transactions",permalink:"/tools/fcl-js/reference/transactions"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Installing",id:"installing",level:3},{value:"Importing the Library",id:"importing-the-library",level:3},{value:"Connect",id:"connect",level:2},{value:"Querying the Flow Network",id:"querying-the-flow-network",level:2},{value:"Get Blocks",id:"get-blocks",level:3},{value:"Examples",id:"examples",level:4},{value:"Get Account",id:"get-account",level:3},{value:"Examples",id:"examples-1",level:4},{value:"Get Transactions",id:"get-transactions",level:3},{value:"Get Events",id:"get-events",level:3},{value:"Examples",id:"examples-2",level:4},{value:"Get Collections",id:"get-collections",level:3},{value:"Execute Scripts",id:"execute-scripts",level:3},{value:"Mutate Flow Network",id:"mutate-flow-network",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Mutate",id:"mutate",level:3},{value:"Single party, single signature",id:"single-party-single-signature",level:3},{value:"Single party, multiple signatures",id:"single-party-multiple-signatures",level:3},{value:"Multiple parties",id:"multiple-parties",level:3},{value:"Multiple parties, two authorizers",id:"multiple-parties-two-authorizers",level:3},{value:"Multiple parties, multiple signatures",id:"multiple-parties-multiple-signatures",level:3}],p={toc:c},u="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This reference documents methods available in the SDK that can be accessed via FCL, and explains in detail how these methods work.\nFCL/SDKs are open source, and you can use them according to the licence."),(0,r.kt)("p",null,"The library client specifications can be found here:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("h3",{id:"installing"},"Installing"),(0,r.kt)("p",null,"NPM:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save @onflow/fcl @onflow/types\n")),(0,r.kt)("p",null,"Yarn:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn add @onflow/fcl @onflow/types\n")),(0,r.kt)("h3",{id:"importing-the-library"},"Importing the Library"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\nimport * as types from "@onflow/types"\n')),(0,r.kt)("h2",{id:"connect"},"Connect"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/configure-fcl/"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,"By default, the library uses HTTP to communicate with the access nodes and it must be configured with the correct access node API URL.  An error will be returned if the host is unreachable."),(0,r.kt)("p",null,"\ud83d\udcd6",(0,r.kt)("strong",{parentName:"p"},"The HTTP/REST API information")," can be found ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/http-api/"},"here"),".  The public Flow HTTP/REST access nodes are accessible at:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Testnet ",(0,r.kt)("inlineCode",{parentName:"li"},"https://rest-testnet.onflow.org")),(0,r.kt)("li",{parentName:"ul"},"Mainnet ",(0,r.kt)("inlineCode",{parentName:"li"},"https://rest-mainnet.onflow.org")),(0,r.kt)("li",{parentName:"ul"},"Local Emulator ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:8888")," ")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { config } from "@onflow/fcl"\n\nconfig({\n  "accessNode.api": "https://rest-testnet.onflow.org"\n})\n')),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"gRPC Access API URLs")," can be found ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/access-api/#flow-access-node-endpoints"},"here"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk.transport")," must be specified if you wish to use the gRPC API.  The public Flow gRPC access nodes are accessible at:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Testnet ",(0,r.kt)("inlineCode",{parentName:"li"},"https://access-testnet.onflow.org")),(0,r.kt)("li",{parentName:"ul"},"Mainnet ",(0,r.kt)("inlineCode",{parentName:"li"},"https://access-mainnet.onflow.org")),(0,r.kt)("li",{parentName:"ul"},"Local Emulator ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:3569"))),(0,r.kt)("p",null,"For local development, use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/onflow/flow-emulator"},"flow emulator")," which once started provides an HTTP access endpoint at ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1:8888")," and a gRPC access endpoint at ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1:3569"),"."),(0,r.kt)("p",null,"If using the gRPC Access API, the ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk.transport")," configuration key must be populated as this value defaults to the HTTP API transport.  The SDK can be configured to use the gRPC API transport as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { config } from "@onflow/fcl"\nimport { send as transportGRPC } from "@onflow/transport-grpc"\n\nconfig({\n  "accessNode.api": "https://access-testnet.onflow.org",\n  "sdk.transport": transportGRPC\n})\n')),(0,r.kt)("h2",{id:"querying-the-flow-network"},"Querying the Flow Network"),(0,r.kt)("p",null,"After you have established a connection with an access node, you can query the Flow network to retrieve data about blocks, accounts, events and transactions. We will explore how to retrieve each of these entities in the sections below."),(0,r.kt)("h3",{id:"get-blocks"},"Get Blocks"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#getblock"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,"Query the network for block by id, height or get the latest block."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Block ID")," is SHA3-256 hash of the entire block payload. This hash is stored as an ID field on any block response object (ie. response from ",(0,r.kt)("inlineCode",{parentName:"p"},"GetLatestBlock"),"). "),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Block height")," expresses the height of the block on the chain. The latest block height increases by one for every valid block produced."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"This example depicts ways to get the latest block as well as any other block by height or ID:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import * as fcl from "@onflow/fcl";\n\n// Get latest block\nconst latestBlock = await fcl.latestBlock(true); // If true, get the latest sealed block\n\n// Get block by ID (uses builder function)\nawait fcl.send([fcl.getBlock(), fcl.atBlockId("23232323232")]).then(fcl.decode);\n\n// Get block at height (uses builder function)\nawait fcl.send([fcl.getBlock(), fcl.atBlockHeight(123)]).then(fcl.decode)\n')),(0,r.kt)("p",null,"Result output: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#blockobject"},"BlockObject")),(0,r.kt)("h3",{id:"get-account"},"Get Account"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#account"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,"Retrieve any account from Flow network's latest block or from a specified block height."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Account address")," is a unique account identifier. Be mindful about the ",(0,r.kt)("inlineCode",{parentName:"p"},"0x")," prefix, you should use the prefix as a default representation but be careful and safely handle user inputs without the prefix."),(0,r.kt)("p",null,"An account includes the following data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Address: the account address."),(0,r.kt)("li",{parentName:"ul"},"Balance: balance of the account."),(0,r.kt)("li",{parentName:"ul"},"Contracts: list of contracts deployed to the account."),(0,r.kt)("li",{parentName:"ul"},"Keys: list of keys associated with the account.")),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("p",null,"Example depicts ways to get an account at the latest block and at a specific block height:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl";\n\n// Get account from latest block height\nconst account = await fcl.account("0x1d007d755706c469");\n\n// Get account at a specific block height\nfcl.send([\n  fcl.getAccount("0x1d007d755706c469"),\n  fcl.atBlockHeight(123)\n]);\n')),(0,r.kt)("p",null,"Result output: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#accountobject"},"AccountObject")),(0,r.kt)("h3",{id:"get-transactions"},"Get Transactions"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#gettransaction"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,"Retrieve transactions from the network by providing a transaction ID. After a transaction has been submitted, you can also get the transaction result to check the status."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Transaction ID")," is a hash of the encoded transaction payload and can be calculated before submitting the transaction to the network."),(0,r.kt)("p",null,"\u26a0\ufe0f The transaction ID provided must be from the current spork."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Transaction status")," represents the state of a transaction in the blockchain. Status can change until it is finalized."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Final"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UNKNOWN"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"The transaction has not yet been seen by the network")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PENDING"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"The transaction has not yet been included in a block")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FINALIZED"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"The transaction has been included in a block")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EXECUTED"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"The transaction has been executed but the result has not yet been sealed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SEALED"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"The transaction has been executed and the result is sealed in a block")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EXPIRED"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"The transaction reference block is outdated before being executed")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl";\n\n// Snapshot the transaction at a point in time\nfcl.tx(transactionId).snapshot();\n\n// Subscribe to a transaction\'s updates\nfcl.tx(transactionId).subscribe(callback);\n\n// Provides the transaction once the status is finalized\nfcl.tx(transactionId).onceFinalized();\n\n// Provides the transaction once the status is executed\nfcl.tx(transactionId).onceExecuted();\n\n// Provides the transaction once the status is sealed\nfcl.tx(transactionId).onceSealed();\n')),(0,r.kt)("p",null,"Result output: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#gettransactionstatus"},"TransactionStatusObject")),(0,r.kt)("h3",{id:"get-events"},"Get Events"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#geteventsatblockheightrange"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,"Retrieve events by a given type in a specified block height range or through a list of block IDs."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Event type")," is a string that follow a standard format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A.{contract address}.{contract name}.{event name}\n")),(0,r.kt)("p",null,"Please read more about ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/cadence/language/core-events/"},"events in the documentation"),". The exception to this standard are\ncore events, and you should read more about them in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/cadence/language/core-events/"},"this document"),"."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Block height range")," expresses the height of the start and end block in the chain."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("p",null,"Example depicts ways to get events within block range or by block IDs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl";\n\n// Get events at block height range\nawait fcl\n  .send([\n    fcl.getEventsAtBlockHeightRange(\n      "A.7e60df042a9c0868.FlowToken.TokensWithdrawn", // event name\n      35580624, // block to start looking for events at\n      35580624 // block to stop looking for events at\n    ),\n  ])\n  .then(fcl.decode);\n\n// Get events from list of block ids\nawait fcl\n  .send([\n    fcl.getEventsAtBlockIds("A.7e60df042a9c0868.FlowToken.TokensWithdrawn", [\n      "c4f239d49e96d1e5fbcf1f31027a6e582e8c03fcd9954177b7723fdb03d938c7",\n      "5dbaa85922eb194a3dc463c946cc01c866f2ff2b88f3e59e21c0d8d00113273f",\n    ]),\n  ])\n  .then(fcl.decode);\n')),(0,r.kt)("p",null,"Result output: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#event-object"},"EventObject")),(0,r.kt)("h3",{id:"get-collections"},"Get Collections"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#getcollection"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,"Retrieve a batch of transactions that have been included in the same block, known as ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"collections")),".\nCollections are used to improve consensus throughput by increasing the number of transactions per block and they act as a link between a block and a transaction."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Collection ID")," is SHA3-256 hash of the collection payload."),(0,r.kt)("p",null,"Example retrieving a collection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl";\n\nconst collection = await fcl\n  .send([\n    fcl.getCollection(\n      "cccdb0c67d015dc7f6444e8f62a3244ed650215ed66b90603006c70c5ef1f6e5"\n    ),\n  ])\n  .then(fcl.decode);\n')),(0,r.kt)("p",null,"Result output: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#collectionobject"},"CollectionObject")),(0,r.kt)("h3",{id:"execute-scripts"},"Execute Scripts"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/tools/fcl-js/reference/api#query"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,"Scripts allow you to write arbitrary non-mutating Cadence code on the Flow blockchain and return data. You can learn more about ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/cadence/language/"},"Cadence here")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/scripts/"},"scripts here"),", but we are now only interested in executing the script code and getting back the data."),(0,r.kt)("p",null,"We can execute a script using the latest state of the Flow blockchain or we can choose to execute the script at a specific time in history defined by a block height or block ID."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Block ID")," is SHA3-256 hash of the entire block payload, but you can get that value from the block response properties."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Block height")," expresses the height of the block in the chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl";\n\nconst result = await fcl.query({\n  cadence: `\n    pub fun main(a: Int, b: Int, addr: Address): Int {\n      log(addr)\n      return a + b\n    }\n  `,\n  args: (arg, t) => [\n    arg(7, t.Int), // a: Int\n    arg(6, t.Int), // b: Int\n    arg("0xba1132bc08f82fe2", t.Address), // addr: Address\n  ],\n});\n')),(0,r.kt)("p",null,"Example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"console.log(result); // 13\n")),(0,r.kt)("h2",{id:"mutate-flow-network"},"Mutate Flow Network"),(0,r.kt)("p",null,"Flow, like most blockchains, allows anybody to submit a transaction that mutates the shared global chain state. A transaction is an object that holds a payload, which describes the state mutation, and one or more authorizations that permit the transaction to mutate the state owned by specific accounts."),(0,r.kt)("p",null,"Transaction data is composed and signed with help of the SDK. The signed payload of transaction then gets submitted to the access node API. If a transaction is invalid or the correct number of authorizing signatures are not provided, it gets rejected. "),(0,r.kt)("h2",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"A transaction is nothing more than a signed set of data that includes script code which are instructions on how to mutate the network state and properties that define and limit it's execution. All these properties are explained bellow. "),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Script")," field is the portion of the transaction that describes the state mutation logic. On Flow, transaction logic is written in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/cadence/"},"Cadence"),". Here is an example transaction script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'transaction(greeting: String) {\n  execute {\n    log(greeting.concat(", World!"))\n  }\n}\n')),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Arguments"),". A transaction can accept zero or more arguments that are passed into the Cadence script. The arguments on the transaction must match the number and order declared in the Cadence script. Sample script from above accepts a single ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," argument."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.onflow.org/concepts/transaction-signing/#proposal-key"},"Proposal key"))," must be provided to act as a sequence number and prevent replay and other potential attacks."),(0,r.kt)("p",null,"Each account key maintains a separate transaction sequence counter; the key that lends its sequence number to a transaction is called the proposal key."),(0,r.kt)("p",null,"A proposal key contains three fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Account address"),(0,r.kt)("li",{parentName:"ul"},"Key index"),(0,r.kt)("li",{parentName:"ul"},"Sequence number")),(0,r.kt)("p",null,"A transaction is only valid if its declared sequence number matches the current on-chain sequence number for that key. The sequence number increments by one after the transaction is executed."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.onflow.org/concepts/transaction-signing/#signer-roles"},"Payer"))," is the account that pays the fees for the transaction. A transaction must specify exactly one payer. The payer is only responsible for paying the network and gas fees; the transaction is not authorized to access resources or code stored in the payer account."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.onflow.org/concepts/transaction-signing/#signer-roles"},"Authorizers"))," are accounts that authorize a transaction to read and mutate their resources. A transaction can specify zero or more authorizers, depending on how many accounts the transaction needs to access."),(0,r.kt)("p",null,"The number of authorizers on the transaction must match the number of AuthAccount parameters declared in the prepare statement of the Cadence script."),(0,r.kt)("p",null,"Example transaction with multiple authorizers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"transaction {\n  prepare(authorizer1: AuthAccount, authorizer2: AuthAccount) { }\n}\n")),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Gas limit")," is the limit on the amount of computation a transaction requires, and it will abort if it exceeds its gas limit.\nCadence uses metering to measure the number of operations per transaction. You can read more about it in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/cadence/"},"Cadence documentation"),"."),(0,r.kt)("p",null,"The gas limit depends on the complexity of the transaction script. Until dedicated gas estimation tooling exists, it's best to use the emulator to test complex transactions and determine a safe limit."),(0,r.kt)("p",null,"\ud83d\udcd6 ",(0,r.kt)("strong",{parentName:"p"},"Reference block")," specifies an expiration window (measured in blocks) during which a transaction is considered valid by the network.\nA transaction will be rejected if it is submitted past its expiry block. Flow calculates transaction expiry using the ",(0,r.kt)("em",{parentName:"p"},"reference block")," field on a transaction.\nA transaction expires after ",(0,r.kt)("inlineCode",{parentName:"p"},"600")," blocks are committed on top of the reference block, which takes about 10 minutes at average Mainnet block rates."),(0,r.kt)("h3",{id:"mutate"},"Mutate"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/reference/api/#mutate"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/ref.svg",width:"130"}))),(0,r.kt)("p",null,'FCL "mutate" does the work of building, signing, and sending a transaction behind the scenes. In order to mutate the blockchain state using FCL, you need to do the following:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nawait fcl.mutate({\n  cadence: `\n    transaction(a: Int) {\n      prepare(acct: AuthAccount) {\n        log(acct)\n        log(a)\n      }\n    }\n  `,\n  args: (arg, t) => [\n    arg(6, t.Int)\n  ],\n  limit: 50\n})\n')),(0,r.kt)("p",null,"Flow supports great flexibility when it comes to transaction signing, we can define multiple authorizers (multi-sig transactions) and have different payer account than proposer. We will explore advanced signing scenarios bellow."),(0,r.kt)("h3",{id:"single-party-single-signature"},(0,r.kt)("a",{parentName:"h3",href:"https://docs.onflow.org/concepts/transaction-signing/#single-party-single-signature"},"Single party, single signature")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposer, payer and authorizer are the same account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x01"),")."),(0,r.kt)("li",{parentName:"ul"},"Only the envelope must be signed."),(0,r.kt)("li",{parentName:"ul"},"Proposal key must have full signing weight.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Account"),(0,r.kt)("th",{parentName:"tr",align:null},"Key ID"),(0,r.kt)("th",{parentName:"tr",align:null},"Weight"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x01")),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// There are multiple ways to acheive this\nimport * as fcl from "@onflow/fcl"\n\n// FCL provides currentUser as an authorization function\nawait fcl.mutate({\n  cadence: `\n    transaction {\n      prepare(acct: AuthAccount) {}\n    }\n  `,\n  proposer: currentUser,\n  payer: currentUser,\n  authorizations: [currentUser],\n  limit: 50,\n})\n\n// Or, simplified\n\nmutate({\n  cadence: `\n    transaction {\n      prepare(acct: AuthAccount) {}\n    }\n  `,\n  authz: currentUser, // Optional. Will default to currentUser if not provided.\n  limit: 50,\n})\n\n\n// Or, create a custom authorization function\nconst authzFn = async (txAccount) => {\n  return {\n    ...txAccount,\n    addr: "0x01",\n    keyId: 0,\n    signingFunction: async(signable) => {\n      return {\n        addr: "0x01",\n        keyId: 0,\n        signature\n      }\n    }\n  }\n}\n\nmutate({\n  cadence: `\n    transaction {\n      prepare(acct: AuthAccount) {}\n    }\n  `,\n  proposer: authzFn,\n  payer: authzFn,\n  authorizations: [authzFn],\n  limit: 50,\n})\n')),(0,r.kt)("h3",{id:"single-party-multiple-signatures"},(0,r.kt)("a",{parentName:"h3",href:"https://docs.onflow.org/concepts/transaction-signing/#single-party-multiple-signatures"},"Single party, multiple signatures")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposer, payer and authorizer are the same account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x01"),")."),(0,r.kt)("li",{parentName:"ul"},"Only the envelope must be signed."),(0,r.kt)("li",{parentName:"ul"},"Each key has weight 500, so two signatures are required.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Account"),(0,r.kt)("th",{parentName:"tr",align:null},"Key ID"),(0,r.kt)("th",{parentName:"tr",align:null},"Weight"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x01")),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"500")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x01")),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"500")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/onflow/flow-go-sdk/tree/master/examples#single-party-multiple-signatures"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/try.svg",width:"130"})))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nconst authzFn = async (txAccount) => {\n  return [\n    {\n      ...txAccount,\n      addr: "0x01",\n      keyId: 0,\n      signingFunction: async(signable) => {\n        return {\n          addr: "0x01",\n          keyId: 0,\n          signature\n        }\n      }\n    },\n    {\n      ...txAccount,\n      addr: "0x01",\n      keyId: 1,\n      signingFunction: async(signable) => {\n        return {\n          addr: "0x01",\n          keyId: 1,\n          signature\n        }\n      }\n    }\n  ]\n}\n\nmutate({\n  cadence: `\n    transaction {\n      prepare(acct: AuthAccount) {}\n    }\n  `,\n  proposer: authzFn,\n  payer: authzFn,\n  authorizations: [authzFn],\n  limit: 50,\n})\n')),(0,r.kt)("h3",{id:"multiple-parties"},(0,r.kt)("a",{parentName:"h3",href:"https://docs.onflow.org/concepts/transaction-signing/#multiple-parties"},"Multiple parties")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposer and authorizer are the same account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x01"),")."),(0,r.kt)("li",{parentName:"ul"},"Payer is a separate account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x02"),")."),(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x01")," signs the payload."),(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," signs the envelope.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," must sign last since it is the payer.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Account"),(0,r.kt)("th",{parentName:"tr",align:null},"Key ID"),(0,r.kt)("th",{parentName:"tr",align:null},"Weight"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x01")),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x02")),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/onflow/flow-go-sdk/tree/master/examples#multiple-parties"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/try.svg",width:"130"})))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nconst authzFn = async (txAccount) => {\n  return {\n    ...txAccount,\n    addr: "0x01",\n    keyId: 0,\n    signingFunction: async(signable) => {\n      return {\n        addr: "0x01",\n        keyId: 0,\n        signature\n      }\n    }\n  }\n}\n\nconst authzTwoFn = async (txAccount) => {\n  return {\n    ...txAccount,\n    addr: "0x02",\n    keyId: 0,\n    signingFunction: async(signable) => {\n      return {\n        addr: "0x02",\n        keyId: 0,\n        signature\n      }\n    }\n  }\n}\n\nmutate({\n  cadence: `\n    transaction {\n      prepare(acct: AuthAccount) {}\n    }\n  `,\n  proposer: authzFn,\n  payer: authzTwoFn,\n  authorizations: [authzFn],\n  limit: 50,\n})\n')),(0,r.kt)("h3",{id:"multiple-parties-two-authorizers"},(0,r.kt)("a",{parentName:"h3",href:"https://docs.onflow.org/concepts/transaction-signing/#multiple-parties"},"Multiple parties, two authorizers")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposer and authorizer are the same account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x01"),")."),(0,r.kt)("li",{parentName:"ul"},"Payer is a separate account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x02"),")."),(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x01")," signs the payload."),(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," signs the envelope.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," must sign last since it is the payer."))),(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," is also an authorizer to show how to include two AuthAccounts into an transaction")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Account"),(0,r.kt)("th",{parentName:"tr",align:null},"Key ID"),(0,r.kt)("th",{parentName:"tr",align:null},"Weight"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x01")),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x02")),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/onflow/flow-go-sdk/tree/master/examples#multiple-parties-two-authorizers"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/onflow/sdks/main/templates/documentation/try.svg",width:"130"})))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nconst authzFn = async (txAccount) => {\n  return {\n    ...txAccount,\n    addr: "0x01",\n    keyId: 0,\n    signingFunction: async(signable) => {\n      return {\n        addr: "0x01",\n        keyId: 0,\n        signature\n      }\n    }\n  }\n}\n\nconst authzTwoFn = async (txAccount) => {\n  return {\n    ...txAccount,\n    addr: "0x02",\n    keyId: 0,\n    signingFunction: async(signable) => {\n      return {\n        addr: "0x02",\n        keyId: 0,\n        signature\n      }\n    }\n  }\n}\n\nmutate({\n  cadence: `\n    transaction {\n      prepare(acct: AuthAccount, acct2: AuthAccount) {}\n    }\n  `,\n  proposer: authzFn,\n  payer: authzTwoFn,\n  authorizations: [authzFn, authzTwoFn],\n  limit: 50,\n})\n')),(0,r.kt)("h3",{id:"multiple-parties-multiple-signatures"},(0,r.kt)("a",{parentName:"h3",href:"https://docs.onflow.org/concepts/transaction-signing/#multiple-parties"},"Multiple parties, multiple signatures")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposer and authorizer are the same account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x01"),")."),(0,r.kt)("li",{parentName:"ul"},"Payer is a separate account (",(0,r.kt)("inlineCode",{parentName:"li"},"0x02"),")."),(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x01")," signs the payload."),(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," signs the envelope.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Account ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," must sign last since it is the payer."))),(0,r.kt)("li",{parentName:"ul"},"Both accounts must sign twice (once with each of their keys).")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Account"),(0,r.kt)("th",{parentName:"tr",align:null},"Key ID"),(0,r.kt)("th",{parentName:"tr",align:null},"Weight"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x01")),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"500")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x01")),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"500")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x02")),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"500")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x02")),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"500")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as fcl from "@onflow/fcl"\n\nconst authzFn = async (txAccount) => {\n  return [\n    {\n      ...txAccount,\n      addr: "0x01",\n      keyId: 0,\n      signingFunction: async(signable) => {\n        return {\n          addr: "0x01",\n          keyId: 0,\n          signature\n        }\n      }\n    },\n    {\n      ...txAccount,\n      addr: "0x01",\n      keyId: 1,\n      signingFunction: async(signable) => {\n        return {\n          addr: "0x01",\n          keyId: 1,\n          signature\n        }\n      }\n    }\n  ]\n}\n\nconst authzTwoFn = async (txAccount) => {\n  return [\n    {\n      ...txAccount,\n      addr: "0x02",\n      keyId: 0,\n      signingFunction: async(signable) => {\n        return {\n          addr: "0x02",\n          keyId: 0,\n          signature\n        }\n      }\n    },\n    {\n      ...txAccount,\n      addr: "0x02",\n      keyId: 1,\n      signingFunction: async(signable) => {\n        return {\n          addr: "0x02",\n          keyId: 1,\n          signature\n        }\n      }\n    }\n  ]\n}\n\nmutate({\n  cadence: `\n    transaction {\n      prepare(acct: AuthAccount) {}\n    }\n  `,\n  proposer: authzFn,\n  payer: authzTwoFn,\n  authorizations: [authzFn],\n  limit: 50,\n})\n')),(0,r.kt)("p",null,"After a transaction has been ",(0,r.kt)("a",{parentName:"p",href:"/tools/fcl-js/reference/sdk-guidelines#build-transactions"},"built")," and ",(0,r.kt)("a",{parentName:"p",href:"/tools/fcl-js/reference/sdk-guidelines#sign-transactions"},"signed"),", it can be sent to the Flow blockchain where it will be executed. If sending was successful you can then ",(0,r.kt)("a",{parentName:"p",href:"/tools/fcl-js/reference/sdk-guidelines#get-transactions"},"retrieve the transaction result"),"."))}d.isMDXComponent=!0}}]);