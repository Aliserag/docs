"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||h[d]||l;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19366:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const l={title:"8. Marketplace"},r=void 0,i={unversionedId:"cadence/tutorial/08-marketplace-compose",id:"cadence/tutorial/08-marketplace-compose",title:"8. Marketplace",description:"In this tutorial, we're going to create a marketplace that uses both the fungible",source:"@site/docs/cadence/tutorial/08-marketplace-compose.mdx",sourceDirName:"cadence/tutorial",slug:"/cadence/tutorial/08-marketplace-compose",permalink:"/cadence/tutorial/08-marketplace-compose",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tom Haile",lastUpdatedAt:1682541550,formattedLastUpdatedAt:"Apr 26, 2023",frontMatter:{title:"8. Marketplace"},sidebar:"tutorialSidebar",previous:{title:"7. Marketplace Setup",permalink:"/cadence/tutorial/07-marketplace-setup"},next:{title:"9. Voting Contract",permalink:"/cadence/tutorial/09-voting"}},c={},s=[{value:"Marketplace Design",id:"marketplace-design",level:2},{value:"Setting up an NFT <strong>Marketplace</strong>",id:"setting-up-an-nft-marketplace",level:2},{value:"Events",id:"events",level:3},{value:"Resource-Owned Capabilities",id:"resource-owned-capabilities",level:3},{value:"Deploying and using the Marketplace",id:"deploying-and-using-the-marketplace",level:2},{value:"Purchasing an NFT",id:"purchasing-an-nft",level:2},{value:"Verifying the NFT Was Purchased Correctly",id:"verifying-the-nft-was-purchased-correctly",level:2},{value:"Scaling the Marketplace",id:"scaling-the-marketplace",level:2},{value:"Creating a <strong>Marketplace for Any Generic NFT</strong>",id:"creating-a-marketplace-for-any-generic-nft",level:2},{value:"Composable Resources on Flow",id:"composable-resources-on-flow",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=p("Callout"),h=p("Img"),d={toc:s},f="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this tutorial, we're going to create a marketplace that uses both the fungible\nand non-fungible token (NFTs) contracts that we have learned about in previous tutorials.\nThis is only for educational purposes and is not meant to be used in production\nSee a production-ready marketplace in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/onflow/nft-storefront"},"NFT storefront repo."),"\nThis contract is already deployed to testnet and mainnet and can be used by anyone for any generic NFT sale!"),(0,o.kt)("hr",null),(0,o.kt)(u,{type:"success",mdxType:"Callout"},"Open the starter code for this tutorial in the Flow Playground:",(0,o.kt)("a",{href:"https://play.onflow.org/49ec2856-1258-4675-bac3-850b4bae1929",target:"_blank"},"https://play.onflow.org/49ec2856-1258-4675-bac3-850b4bae1929"),(0,o.kt)("br",null),"The tutorial will be asking you to take various actions to interact with this code. [The marketplace setup guide](07-marketplace-setup) shows you how to get the playground set up to do this tutorial."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},"Instructions that require you to take action are always included in a callout box like this one. These highlighted actions are all that you need to do to get your code running, but reading the rest is necessary to understand the language's design."),(0,o.kt)("p",null,"Marketplaces are a popular application of blockchain technology and smart contracts.\nWhen there are NFTs in existence, users usually want to be able to buy and sell them with their fungible tokens."),(0,o.kt)("p",null,"Now that there is an example for both fungible and non-fungible tokens,\nwe can build a marketplace that uses both. This is referred to as ",(0,o.kt)("strong",{parentName:"p"},"composability"),":\nthe ability for developers to leverage shared resources, such as code or userbases,\nand use them as building blocks for new applications. Flow is designed to enable composability\nbecause of the way that interfaces, resources and capabilities are designed.\n",(0,o.kt)("a",{parentName:"p",href:"../language/interfaces"},"Interfaces")," allow projects to support any generic type as long as it supports a standard set of functionality specified by an interface.\n",(0,o.kt)("a",{parentName:"p",href:"../language/resources"},"Resources")," can be passed around and owned by accounts, contracts or even other resources,\nunlocking different use cases depending on where the resource is stored.\n",(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},"Capabilities")," allow exposing user-defined sets of functionality through special objects\nthat enforce strict security with Cadence's type system.\nThe combination of these allows developers to do more with less, re-using known safe code and design patterns\nto create new, powerful, and unique interactions!"),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"At some point before or after this tutorial, you should definitely check out the formal documentation\nlinked above about interfaces, resources, and capabilities. It will help complete your understanding\nof these complex, but powerful features.")),(0,o.kt)("p",null,"To create a marketplace, we need to integrate the functionality of both fungible\nand non-fungible tokens into a single contract that gives users control over their money and assets.\nTo accomplish this, we're going to take you through these steps to create a composable smart contract and get comfortable with the marketplace:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Ensure that your fungible token and non-fungible token contracts are deployed and set up correctly."),(0,o.kt)("li",{parentName:"ol"},"Deploy the marketplace type declarations to account ",(0,o.kt)("inlineCode",{parentName:"li"},"0x03"),"."),(0,o.kt)("li",{parentName:"ol"},"Create a marketplace object and store it in your account storage, putting an NFT up for sale and publishing a public capability for your sale."),(0,o.kt)("li",{parentName:"ol"},"Use a different account to purchase the NFT from the sale."),(0,o.kt)("li",{parentName:"ol"},"Run a script to verify that the NFT was purchased.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Before proceeding with this tutorial"),", you need to complete the ",(0,o.kt)("a",{parentName:"p",href:"06-fungible-tokens"},"Fungible Tokens"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"05-non-fungible-tokens-1"},"Non-Fungible Token")," tutorials\nto understand the building blocks of this smart contract."),(0,o.kt)("h2",{id:"marketplace-design"},"Marketplace Design"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"One way to implement a marketplace is to have a central smart contract that users deposit their NFTs and their price into,\nand have anyone come by and be able to buy the token for that price.\nThis approach is reasonable, but it centralizes the process and takes away options from the owners.\nWe want users to be able to maintain ownership of the NFTs that they are trying to sell while they are trying to sell them."),(0,o.kt)("p",null,"Instead of taking this centralized approach, each user can list a sale from within their own account."),(0,o.kt)("p",null,"Then, users could either provide a link to their sale to an application that can list it centrally on a website,\nor to a central sale aggregator smart contract if they want the entire transaction to stay on-chain.\nThis way, the owner of the token keeps custody of their token while it is on sale."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Before we start, we need to confirm the state of your accounts. ",(0,o.kt)("br",null),"\nIf you haven't already, please perform the steps in the ",(0,o.kt)("a",{parentName:"p",href:"07-marketplace-setup"},"marketplace setup guide"),"\nto ensure that the Fungible Token and Non-Fungible Token contracts are deployed to account 1 and 2 and own some tokens.\nYour accounts should look like this:")),(0,o.kt)(h,{src:"https://storage.googleapis.com/flow-resources/documentation-assets/cadence-tuts/accounts-nft-storage.png",mdxType:"Img"}),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"You can run the ",(0,o.kt)("inlineCode",{parentName:"p"},"1. CheckSetupScript.cdc")," script to ensure that your accounts are correctly set up:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=CheckSetupScript.cdc"},'// CheckSetupScript.cdc\n\nimport ExampleToken from 0x01\nimport ExampleNFT from 0x02\n\n// This script checks that the accounts are set up correctly for the marketplace tutorial.\n//\n// Account 0x01: Vault Balance = 40, NFT.id = 1\n// Account 0x02: Vault Balance = 20, No NFTs\npub fun main() {\n    // Get the accounts\' public account objects\n    let acct1 = getAccount(0x01)\n    let acct2 = getAccount(0x02)\n\n    // Get references to the account\'s receivers\n    // by getting their public capability\n    // and borrowing a reference from the capability\n    let acct1ReceiverRef = acct1.getCapability(/public/CadenceFungibleTokenTutorialReceiver)\n                          .borrow<&ExampleToken.Vault{ExampleToken.Balance}>()\n                          ?? panic("Could not borrow acct1 vault reference")\n\n    let acct2ReceiverRef = acct2.getCapability(/public/CadenceFungibleTokenTutorialReceiver)\n                          .borrow<&ExampleToken.Vault{ExampleToken.Balance}>()\n                          ?? panic("Could not borrow acct2 vault reference")\n\n    // Log the Vault balance of both accounts and ensure they are\n    // the correct numbers.\n    // Account 0x01 should have 40.\n    // Account 0x02 should have 20.\n    log("Account 1 Balance")\n    log(acct1ReceiverRef.balance)\n    log("Account 2 Balance")\n    log(acct2ReceiverRef.balance)\n\n    // verify that the balances are correct\n    if acct1ReceiverRef.balance != 40.0 || acct2ReceiverRef.balance != 20.0 {\n        panic("Wrong balances!")\n    }\n\n    // Find the public Receiver capability for their Collections\n    let acct1Capability = acct1.getCapability(ExampleNFT.CollectionPublicPath)\n    let acct2Capability = acct2.getCapability(ExampleNFT.CollectionPublicPath)\n\n    // borrow references from the capabilities\n    let nft1Ref = acct1Capability.borrow<&{ExampleNFT.NFTReceiver}>()\n        ?? panic("Could not borrow acct1 nft collection reference")\n\n    let nft2Ref = acct2Capability.borrow<&{ExampleNFT.NFTReceiver}>()\n        ?? panic("Could not borrow acct2 nft collection reference")\n\n    // Print both collections as arrays of IDs\n    log("Account 1 NFTs")\n    log(nft1Ref.getIDs())\n\n    log("Account 2 NFTs")\n    log(nft2Ref.getIDs())\n\n    // verify that the collections are correct\n    if nft1Ref.getIDs()[0] != 1 || nft2Ref.getIDs().length != 0 {\n        panic("Wrong Collections!")\n    }\n}\n')),(0,o.kt)("p",null,"You should see something similar to this output if your accounts are set up correctly.\nThey are in the same state that they would have been in if you followed\nthe ",(0,o.kt)("a",{parentName:"p",href:"06-fungible-tokens"},"Fungible Tokens"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"05-non-fungible-tokens-1"},"Non-Fungible Tokens")," tutorials in succession:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"Account 1 Vault Balance"\n40\n"Account 2 Vault Balance"\n20\n"Account 1 NFTs"\n[1]\n"Account 2 NFTs"\n[]\n')),(0,o.kt)("p",null,"Now that your accounts are in the correct state, we can build a marketplace that enables the sale of NFT's between accounts."),(0,o.kt)("h2",{id:"setting-up-an-nft-marketplace"},"Setting up an NFT ",(0,o.kt)("strong",{parentName:"h2"},"Marketplace")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Every user who wants to sell an NFT will store an instance of a ",(0,o.kt)("inlineCode",{parentName:"p"},"SaleCollection")," resource in their account storage."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Switch to account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x03"),".\nOpen ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleMarketplace.cdc"),(0,o.kt)("br",null),"\nWith ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleMarketplace.cdc")," open, click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deploy")," button that appears at the top right of the editor.\n",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleMarketplace.cdc")," should contain the following contract definition:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=ExampleMarketplace.cdc"},'import ExampleToken from 0x01\nimport ExampleNFT from 0x02\n\n// ExampleMarketplace.cdc\n//\n// The ExampleMarketplace contract is a very basic sample implementation of an NFT ExampleMarketplace on Flow.\n//\n// This contract allows users to put their NFTs up for sale. Other users\n// can purchase these NFTs with fungible tokens.\n//\n// Learn more about marketplaces in this tutorial: https://docs.onflow.org/cadence/tutorial/08-marketplace-compose\n//\n// This contract is a learning tool and is not meant to be used in production.\n// See the NFTStorefront contract for a generic marketplace smart contract that\n// is used by many different projects on the Flow blockchain:\n//\n// https://github.com/onflow/nft-storefront\n\npub contract ExampleMarketplace {\n\n    // Event that is emitted when a new NFT is put up for sale\n    pub event ForSale(id: UInt64, price: UFix64, owner: Address?)\n\n    // Event that is emitted when the price of an NFT changes\n    pub event PriceChanged(id: UInt64, newPrice: UFix64, owner: Address?)\n\n    // Event that is emitted when a token is purchased\n    pub event TokenPurchased(id: UInt64, price: UFix64, seller: Address?, buyer: Address?)\n\n    // Event that is emitted when a seller withdraws their NFT from the sale\n    pub event SaleCanceled(id: UInt64, seller: Address?)\n\n    // Interface that users will publish for their Sale collection\n    // that only exposes the methods that are supposed to be public\n    //\n    pub resource interface SalePublic {\n        pub fun purchase(tokenID: UInt64, recipient: Capability<&AnyResource{ExampleNFT.NFTReceiver}>, buyTokens: @ExampleToken.Vault)\n        pub fun idPrice(tokenID: UInt64): UFix64?\n        pub fun getIDs(): [UInt64]\n    }\n\n    // SaleCollection\n    //\n    // NFT Collection object that allows a user to put their NFT up for sale\n    // where others can send fungible tokens to purchase it\n    //\n    pub resource SaleCollection: SalePublic {\n\n        /// A capability for the owner\'s collection\n        access(self) var ownerCollection: Capability<&ExampleNFT.Collection>\n\n        // Dictionary of the prices for each NFT by ID\n        access(self) var prices: {UInt64: UFix64}\n\n        // The fungible token vault of the owner of this sale.\n        // When someone buys a token, this resource can deposit\n        // tokens into their account.\n        access(account) let ownerVault: Capability<&AnyResource{ExampleToken.Receiver}>\n\n        init (ownerCollection: Capability<&ExampleNFT.Collection>,\n              ownerVault: Capability<&AnyResource{ExampleToken.Receiver}>) {\n\n            pre {\n                // Check that the owner\'s collection capability is correct\n                ownerCollection.check():\n                    "Owner\'s NFT Collection Capability is invalid!"\n\n                // Check that the fungible token vault capability is correct\n                ownerVault.check():\n                    "Owner\'s Receiver Capability is invalid!"\n            }\n            self.ownerCollection = ownerCollection\n            self.ownerVault = ownerVault\n            self.prices = {}\n        }\n\n        // cancelSale gives the owner the opportunity to cancel a sale in the collection\n        pub fun cancelSale(tokenID: UInt64) {\n            // remove the price\n            self.prices.remove(key: tokenID)\n            self.prices[tokenID] = nil\n\n            // Nothing needs to be done with the actual token because it is already in the owner\'s collection\n        }\n\n        // listForSale lists an NFT for sale in this collection\n        pub fun listForSale(tokenID: UInt64, price: UFix64) {\n            pre {\n                self.ownerCollection.borrow()!.idExists(id: tokenID):\n                    "NFT to be listed does not exist in the owner\'s collection"\n            }\n            // store the price in the price array\n            self.prices[tokenID] = price\n\n            emit ForSale(id: tokenID, price: price, owner: self.owner?.address)\n        }\n\n        // changePrice changes the price of a token that is currently for sale\n        pub fun changePrice(tokenID: UInt64, newPrice: UFix64) {\n            self.prices[tokenID] = newPrice\n\n            emit PriceChanged(id: tokenID, newPrice: newPrice, owner: self.owner?.address)\n        }\n\n        // purchase lets a user send tokens to purchase an NFT that is for sale\n        pub fun purchase(tokenID: UInt64, recipient: Capability<&AnyResource{ExampleNFT.NFTReceiver}>, buyTokens: @ExampleToken.Vault) {\n            pre {\n                self.prices[tokenID] != nil:\n                    "No token matching this ID for sale!"\n                buyTokens.balance >= (self.prices[tokenID] ?? 0.0):\n                    "Not enough tokens to by the NFT!"\n                recipient.borrow != nil:\n                    "Invalid NFT receiver capability!"\n            }\n\n            // get the value out of the optional\n            let price = self.prices[tokenID]!\n\n            self.prices[tokenID] = nil\n\n            let vaultRef = self.ownerVault.borrow()\n                ?? panic("Could not borrow reference to owner token vault")\n\n            // deposit the purchasing tokens into the owners vault\n            vaultRef.deposit(from: <-buyTokens)\n\n            // borrow a reference to the object that the receiver capability links to\n            // We can force-cast the result here because it has already been checked in the pre-conditions\n            let receiverReference = receiver.borrow()!\n\n            // deposit the NFT into the buyers collection\n            receiverReference.deposit(token: <-self.ownerCollection.borrow()!.withdraw(withdrawID: tokenID))\n\n            emit TokenPurchased(id: tokenID, price: price, owner: self.owner?.address, buyer: receiverReference.owner?.address)\n        }\n\n        // idPrice returns the price of a specific token in the sale\n        pub fun idPrice(tokenID: UInt64): UFix64? {\n            return self.prices[tokenID]\n        }\n\n        // getIDs returns an array of token IDs that are for sale\n        pub fun getIDs(): [UInt64] {\n            return self.prices.keys\n        }\n    }\n\n    // createCollection returns a new collection resource to the caller\n    pub fun createSaleCollection(ownerCollection: Capability<&ExampleNFT.Collection>,\n                                 ownerVault: Capability<&AnyResource{ExampleToken.Receiver}>): @SaleCollection {\n        return <- create SaleCollection(ownerCollection: ownerCollection, ownerVault: ownerVault)\n    }\n}\n')),(0,o.kt)("p",null,"This marketplace contract has resources that function similarly to the NFT ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),"\nthat was explained in ",(0,o.kt)("a",{parentName:"p",href:"05-non-fungible-tokens-1"},"Non-Fungible Tokens"),", with a few differences and additions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This marketplace contract has methods to add and remove NFTs, but instead of storing the NFT resource object in the sale collection,\nthe user provides a capability to their main collection that allows the listed NFT to be withdrawn and transferred when it is purchased.\nWhen a user wants to put their NFT up for sale, they do so by providing the ID and the price to the ",(0,o.kt)("inlineCode",{parentName:"li"},"listForSale")," function.\nThen, another user can call the ",(0,o.kt)("inlineCode",{parentName:"li"},"purchase")," method, sending their ",(0,o.kt)("inlineCode",{parentName:"li"},"ExampleToken.Vault")," that contains the currency they are using to make the purchase.\nThe buyer also includes a capability to their NFT ",(0,o.kt)("inlineCode",{parentName:"li"},"ExampleNFT.Collection")," so that the purchased token\ncan be immediately deposited into their collection when the purchase is made."),(0,o.kt)("li",{parentName:"ul"},"This marketplace contract stores a capability: ",(0,o.kt)("inlineCode",{parentName:"li"},"pub let ownerVault: Capability<&AnyResource{FungibleToken.Receiver}>"),".\nThe owner of the sale saves a capability to their Fungible Token ",(0,o.kt)("inlineCode",{parentName:"li"},"Receiver")," within the sale.\nThis allows the sale resource to be able to immediately deposit the currency that was used to buy the NFT\ninto the owners ",(0,o.kt)("inlineCode",{parentName:"li"},"Vault")," when a purchase is made."),(0,o.kt)("li",{parentName:"ul"},"This marketplace contract includes events. Cadence supports defining events within contracts\nthat can be emitted when important actions happen. External apps can monitor these events to know the state of the smart contract.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"    // Event that is emitted when a new NFT is put up for sale\n    pub event ForSale(id: UInt64, price: UFix64, owner: Address?)\n\n    // Event that is emitted when the price of an NFT changes\n    pub event PriceChanged(id: UInt64, newPrice: UFix64, owner: Address?)\n\n    // Event that is emitted when a token is purchased\n    pub event TokenPurchased(id: UInt64, price: UFix64, seller: Address?, buyer: Address?)\n\n    // Event that is emitted when a seller withdraws their NFT from the sale\n    pub event SaleCanceled(id: UInt64, seller: Address?)\n")),(0,o.kt)("p",null,"This contract has a few new features and concepts that are important to cover:"),(0,o.kt)("h3",{id:"events"},"Events"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../language/events"},"Events")," are special values that can be emitted during the execution of a program.\nThey usually contain information to indicate that some important action has happened in a smart contract,\nsuch as an NFT transfer, a permission change, or many other different things.\nOff-chain applications can monitor events using a Flow SDK to know what is happening on-chain without having to query a smart contract directly."),(0,o.kt)("p",null,"Many applications want to maintain an off-chain record of what is happening on-chain so they can have faster performance\nwhen getting information about their users' accounts or generating analytics."),(0,o.kt)("p",null,"Events are declared by indicating ",(0,o.kt)("a",{parentName:"p",href:"../language/access-control"},"the access level"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"event"),",\nand the name and parameters of the event, like a function declaration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub event ForSale(id: UInt64, price: UFix64, owner: Address?)\n")),(0,o.kt)("p",null,"Events cannot modify state at all; they indicate when important actions happen in the smart contract."),(0,o.kt)("p",null,"Events are emitted with the ",(0,o.kt)("inlineCode",{parentName:"p"},"emit")," keyword followed by the invocation of the event as if it were a function call."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"emit ForSale(id: tokenID, price: price, owner: self.owner?.address)\n")),(0,o.kt)("p",null,"External applications can monitor the blockchain to take action when certain events are emitted."),(0,o.kt)("h3",{id:"resource-owned-capabilities"},"Resource-Owned Capabilities"),(0,o.kt)("p",null,"We have covered capabilities in previous ",(0,o.kt)("a",{parentName:"p",href:"04-capabilities"},"tutorials"),",\nbut only the basics. Capabilities can be used for so much more!"),(0,o.kt)("p",null,"As you hopefully understand, ",(0,o.kt)("a",{parentName:"p",href:"../language/capability-based-access-control"},"capabilites"),"\nare links to private objects in account storage that specify subset of functionality to expose."),(0,o.kt)("p",null,"To create a capability, a user typically uses ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#authaccount"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"AuthAccount.link")),"\nmethod to create a link to a resource in their private storage, specifying a type to link the capability as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"// Create a public Receiver + Balance capability to the Vault\n// acct is an `AuthAccount`\n// The object being linked to has to be an `ExampleToken.Vault`,\n// and the link only exposes the fields in the `ExampleToken.Receiver` and `ExampleToken.Balance` interfaces.\nacct.link<&ExampleToken.Vault{ExampleToken.Receiver, ExampleToken.Balance}>\n    (/public/CadenceFungibleTokenTutorialReceiver, target: /storage/CadenceFungibleTokenTutorialVault)\n")),(0,o.kt)("p",null,"Then, users can get that capability if it was created ",(0,o.kt)("a",{parentName:"p",href:"../language/accounts#paths"},"in a public path"),",\nborrow it, and access the functionality that the owner specified."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},'// Get account 0x01\'s PublicAccount object\nlet publicAccount = getAccount(0x01)\n\n// Retrieve public Vault Receiver reference for the account\nlet acct1Capability = acct.getCapability<&AnyResource{ExampleToken.Receiver}>(/public/CadenceFungibleTokenTutorialReceiver)\n\n// borrow the reference\nlet acct1ReceiverRef = acct1Capability.borrow()\n    ?? panic("Could not borrow a receiver reference to the vault")\n\n// deposit tokens\nacct1ReceiverRef.deposit(from: <-tokens)\n')),(0,o.kt)("p",null,"With the marketplace contract, we are utilizing a new feature of capabilities.\nCapabilities can be stored anywhere! Lots of functionality is contained within resources,\nand developers will sometimes want to be able to access some of the functionality of resources from within different resources or contracts."),(0,o.kt)("p",null,"We store two different capabilities in the marketplace sale collection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"/// A capability for the owner's collection\naccess(self) var ownerCollection: Capability<&ExampleNFT.Collection>\n\n// The fungible token vault of the owner of this sale.\n// When someone buys a token, this resource can deposit\n// tokens into their account.\naccess(account) let ownerVault: Capability<&AnyResource{ExampleToken.Receiver}>\n")),(0,o.kt)("p",null,"If an object like a contract or resource owns a capability, they can borrow a reference to that capability at any time\nto access that functionality without having to get it from the owner's account every time."),(0,o.kt)("p",null,"This is especially important if the owner wants to expose some functionality that is only intended for one person,\nmeaning that the link for the capability is not stored in a public path.\nWe do that in this example, because the sale collection stores a capability that can access all of the functionality\nof the ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleNFT.Collection"),". It needs this because it withdraws the specified NFT in the ",(0,o.kt)("inlineCode",{parentName:"p"},"purchase()")," method to send to the buyer."),(0,o.kt)("p",null,"It is important to remember that control of a capability does not equal ownership of the underlying resource.\nYou can use the capability to access that resource's functionality, but you can't use it to fake ownership.\nYou need the actual resource with the ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," symbol specified to prove ownership."),(0,o.kt)("p",null,"Additionally, these capabilities can be stored anywhere, but if a user decides that they no longer want the capability\nto be used, they can revoke it with the ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthAccount.unlink()")," method so any capabilities that use that link are rendered invalid."),(0,o.kt)("p",null,"One last piece to consider about capabilities is the decision about when to use them instead of storing the resource directly.\nThis tutorial used to have the ",(0,o.kt)("inlineCode",{parentName:"p"},"SaleCollection")," directly store the NFTs that were for sale, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence"},"pub resource SaleCollection: SalePublic {\n\n    /// Dictionary of NFT objects for sale\n    /// Maps ID to NFT resource object\n    /// Not recommended\n    access(self) var forSale: @{UInt64: ExampleNFT.NFT}\n}\n")),(0,o.kt)("p",null,"This is a logical way to do it, and illustrates another important concept in Cadence, that resources can own other resources!\nCheck out the ",(0,o.kt)("a",{parentName:"p",href:"10-resources-compose"},"Kitty Hats tutorial")," for a little more exploration of this concept."),(0,o.kt)("p",null,"In this case however, it doesn't make sense. If a user decides to store their for-sale NFTs in a separate place from their main collection,\nthen, those NFTs are not available to be shown to any app or smart contract that queries the main collection,\nso it is as if the owner doesn't actually own the NFT! In cases like this, we usually recommend using a capability to the main\ncollection so that the main collection can remain unchanged and fully usable by other smart contracts and apps.\nThis also means that if a for-sale NFT gets transferred by some means other than a purchase, then you need a way to get rid of the stale listing.\nThat is out of the scope of this tutorial though."),(0,o.kt)("p",null,"Enough explaining! Lets execute some code!"),(0,o.kt)("h2",{id:"deploying-and-using-the-marketplace"},"Deploying and using the Marketplace"),(0,o.kt)("p",null,"At this point, we should have an ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleToken.Vault")," and an ",(0,o.kt)("inlineCode",{parentName:"p"},"Example.NFT.Collection")," in both accounts' storage.\nAccount ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," should have an NFT in their collection."),(0,o.kt)("p",null,"You can create a ",(0,o.kt)("inlineCode",{parentName:"p"},"SaleCollection")," and list account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01"),"'s token for sale by following these steps:"),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open Transaction 4, ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateSale.cdc")," ",(0,o.kt)("br",null),"\nSelect account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," as the only signer and click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," button to submit the transaction.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=Transaction4.cdc"},'// CreateSale.cdc\n\nimport ExampleToken from 0x01\nimport ExampleNFT from 0x02\nimport ExampleMarketplace from 0x03\n\n// This transaction creates a new Sale Collection object,\n// lists an NFT for sale, puts it in account storage,\n// and creates a public capability to the sale so that others can buy the token.\ntransaction {\n\n    prepare(acct: AuthAccount) {\n\n        // Borrow a reference to the stored Vault\n        let receiver = acct.getCapability<&{ExampleToken.Receiver}>(/public/CadenceFungibleTokenTutorialReceiver)\n\n        // borrow a reference to the nftTutorialCollection in storage\n        let collectionCapability = acct.link<&ExampleNFT.Collection>(/private/nftTutorialCollection, target: ExampleNFT.CollectionStoragePath)\n          ?? panic("Unable to create private link to NFT Collection")\n\n        // Create a new Sale object,\n        // initializing it with the reference to the owner\'s vault\n        let sale <- ExampleMarketplace.createSaleCollection(ownerCollection: collectionCapability, ownerVault: receiver)\n\n        // List the token for sale by moving it into the sale object\n        sale.listForSale(tokenID: 1, price: 10.0)\n\n        // Store the sale object in the account storage\n        acct.save(<-sale, to: /storage/NFTSale)\n\n        // Create a public capability to the sale so that others can call its methods\n        acct.link<&ExampleMarketplace.SaleCollection{ExampleMarketplace.SalePublic}>(/public/NFTSale, target: /storage/NFTSale)\n\n        log("Sale Created for account 1. Selling NFT 1 for 10 tokens")\n    }\n}\n')),(0,o.kt)("p",null,"This transaction:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Gets a capability for the owners ",(0,o.kt)("inlineCode",{parentName:"li"},"Vault")),(0,o.kt)("li",{parentName:"ol"},"Creates the ",(0,o.kt)("inlineCode",{parentName:"li"},"SaleCollection"),", which stores their ",(0,o.kt)("inlineCode",{parentName:"li"},"Vault")," capability."),(0,o.kt)("li",{parentName:"ol"},"Lists the token with ID=1 for sale and sets its price as 10.0."),(0,o.kt)("li",{parentName:"ol"},"Stores the sale in their account storage and publishes a capability that allows others to purchase any NFTs for sale.")),(0,o.kt)("p",null,"Let's run a script to ensure that the sale was created correctly."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open Script 2: ",(0,o.kt)("inlineCode",{parentName:"p"},"GetSaleIDs.cdc"),(0,o.kt)("br",null),"\nClick the ",(0,o.kt)("inlineCode",{parentName:"p"},"Execute")," button to print the ID and price of the NFT that account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x01")," has for sale.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=GetSaleIDs.cdc"},'// GetSaleIDs.cdc\n\nimport ExampleToken from 0x01\nimport ExampleNFT from 0x02\nimport ExampleMarketplace from 0x03\n\n// This script prints the NFTs that account 0x01 has for sale.\npub fun main() {\n    // Get the public account object for account 0x01\n    let account1 = getAccount(0x01)\n\n    // Find the public Sale reference to their Collection\n    let acct1saleRef = account1.getCapability(/public/NFTSale)\n                       .borrow<&AnyResource{ExampleMarketplace.SalePublic}>()\n                       ?? panic("Could not borrow acct2 nft sale reference")\n\n    // Los the NFTs that are for sale\n    log("Account 1 NFTs for sale")\n    log(acct1saleRef.getIDs())\n    log("Price")\n    log(acct1saleRef.idPrice(tokenID: 1))\n}\n')),(0,o.kt)("p",null,"This script should complete and print something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"Account 1 NFTs for sale"\n[1]\n"Price"\n10\n')),(0,o.kt)("h2",{id:"purchasing-an-nft"},"Purchasing an NFT"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The buyer can now purchase the seller's NFT by using the transaction in ",(0,o.kt)("inlineCode",{parentName:"p"},"Transaction2.cdc"),"."),(0,o.kt)(u,{type:"info",mdxType:"Callout"},(0,o.kt)("p",null,"Open Transaction 2: ",(0,o.kt)("inlineCode",{parentName:"p"},"PurchaseSale.cdc")," file",(0,o.kt)("br",null),"\nSelect account ",(0,o.kt)("inlineCode",{parentName:"p"},"0x02")," as the only signer and click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," button.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=PurchaseSale.cdc"},'// PurchaseSale.cdc\n\nimport ExampleToken from 0x01\nimport ExampleNFT from 0x02\nimport ExampleMarketplace from 0x03\n\n// This transaction uses the signers Vault tokens to purchase an NFT\n// from the Sale collection of account 0x01.\ntransaction {\n\n    // Capability to the buyer\'s NFT collection where they\n    // will store the bought NFT\n    let collectionCapability: Capability<&AnyResource{ExampleNFT.NFTReceiver}>\n\n    // Vault that will hold the tokens that will be used to\n    // but the NFT\n    let temporaryVault: @ExampleToken.Vault\n\n    prepare(acct: AuthAccount) {\n\n        // get the references to the buyer\'s fungible token Vault and NFT Collection Receiver\n        self.collectionCapability = acct.getCapability<&AnyResource{ExampleNFT.NFTReceiver}>(from: ExampleNFT.CollectionPublicPath)\n\n        let vaultRef = acct.borrow<&ExampleToken.Vault>(from: /storage/CadenceFungibleTokenTutorialVault)\n            ?? panic("Could not borrow owner\'s vault reference")\n\n        // withdraw tokens from the buyers Vault\n        self.temporaryVault <- vaultRef.withdraw(amount: 10.0)\n    }\n\n    execute {\n        // get the read-only account storage of the seller\n        let seller = getAccount(0x01)\n\n        // get the reference to the seller\'s sale\n        let saleRef = seller.getCapability(/public/NFTSale)!\n                            .borrow<&AnyResource{ExampleMarketplace.SalePublic}>()\n                            ?? panic("Could not borrow seller\'s sale reference")\n\n        // purchase the NFT the seller is selling, giving them the capability\n        // to your NFT collection and giving them the tokens to buy it\n        saleRef.purchase(tokenID: 1, recipient: self.collectionCapability, buyTokens: <-self.temporaryVault)\n\n        log("Token 1 has been bought by account 2!")\n    }\n}\n')),(0,o.kt)("p",null,"This transaction:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Gets the public account object for account ",(0,o.kt)("inlineCode",{parentName:"li"},"0x01")),(0,o.kt)("li",{parentName:"ol"},"Gets the capability to the buyer's NFT receiver"),(0,o.kt)("li",{parentName:"ol"},"Borrow's a reference to the buyer's stored ",(0,o.kt)("inlineCode",{parentName:"li"},"ExampleToken.Vault")),(0,o.kt)("li",{parentName:"ol"},"Withdraws the tokens that the buyer will use to purchase the NFT"),(0,o.kt)("li",{parentName:"ol"},"Gets the reference to the seller's public sale"),(0,o.kt)("li",{parentName:"ol"},"Calls the ",(0,o.kt)("inlineCode",{parentName:"li"},"purchase")," function, passing in the tokens and the ",(0,o.kt)("inlineCode",{parentName:"li"},"Collection")," reference.\nThen ",(0,o.kt)("inlineCode",{parentName:"li"},"purchase")," deposits the bought NFT directly into the buyer's collection.")),(0,o.kt)("h2",{id:"verifying-the-nft-was-purchased-correctly"},"Verifying the NFT Was Purchased Correctly"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"You can run now run a script to verify that the NFT was purchased correctly because:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"account ",(0,o.kt)("inlineCode",{parentName:"li"},"0x01")," has 50 tokens and does not have any NFTs for sale or in their collection and account"),(0,o.kt)("li",{parentName:"ul"},"account ",(0,o.kt)("inlineCode",{parentName:"li"},"0x02")," has 10 tokens and an NFT with id=1")),(0,o.kt)("p",null,"To run a script that verifies the NFT was purchased correctly, follow these steps:"),(0,o.kt)(u,{type:"info",mdxType:"Callout"},"Open Script 3: `VerifyAfterPurchase.cdc`.",(0,o.kt)("br",null),"Click `Execute` button `VerifyAfterPurchase.cdc` should contain the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=Script3.cdc"},'// VerifyAfterPurchase.cdc\n\nimport ExampleToken from 0x01\nimport ExampleNFT from 0x02\nimport ExampleMarketplace from 0x03\n\n// This script checks that the Vault balances and NFT collections are correct\n// for both accounts.\n//\n// Account 1: Vault balance = 50, No NFTs\n// Account 2: Vault balance = 10, NFT ID=1\npub fun main() {\n    // Get the accounts\' public account objects\n    let acct1 = getAccount(0x01)\n    let acct2 = getAccount(0x02)\n\n    // Get references to the account\'s receivers\n    // by getting their public capability\n    // and borrowing a reference from the capability\n    let acct1ReceiverRef = acct1.getCapability(/public/CadenceFungibleTokenTutorialReceiver)\n                           .borrow<&ExampleToken.Vault{ExampleToken.Balance}>()\n                           ?? panic("Could not borrow acct1 vault reference")\n\n    let acct2ReceiverRef = acct2.getCapability(/public/CadenceFungibleTokenTutorialReceiver)\n                            .borrow<&ExampleToken.Vault{ExampleToken.Balance}>()\n                            ?? panic("Could not borrow acct2 vault reference")\n\n    // Log the Vault balance of both accounts and ensure they are\n    // the correct numbers.\n    // Account 0x01 should have 50.\n    // Account 0x02 should have 10.\n    log("Account 1 Balance")\n    log(acct1ReceiverRef.balance)\n    log("Account 2 Balance")\n    log(acct2ReceiverRef.balance)\n\n    // verify that the balances are correct\n    if acct1ReceiverRef.balance != 50.0 || acct2ReceiverRef.balance != 10.0 {\n        panic("Wrong balances!")\n    }\n\n    // Find the public Receiver capability for their Collections\n    let acct1Capability = acct1.getCapability(ExampleNFT.CollectionPublicPath)\n    let acct2Capability = acct2.getCapability(ExampleNFT.CollectionPublicPath)\n\n    // borrow references from the capabilities\n    let nft1Ref = acct1Capability.borrow<&{ExampleNFT.NFTReceiver}>()\n        ?? panic("Could not borrow acct1 nft collection reference")\n\n    let nft2Ref = acct2Capability.borrow<&{ExampleNFT.NFTReceiver}>()\n        ?? panic("Could not borrow acct2 nft collection reference")\n\n    // Print both collections as arrays of IDs\n    log("Account 1 NFTs")\n    log(nft1Ref.getIDs())\n\n    log("Account 2 NFTs")\n    log(nft2Ref.getIDs())\n\n    // verify that the collections are correct\n    if nft2Ref.getIDs()[0] != 1 || nft1Ref.getIDs().length != 0 {\n        panic("Wrong Collections!")\n    }\n\n    // Get the public sale reference for Account 0x01\n    let acct1SaleRef = acct1.getCapability(/public/NFTSale)\n                       .borrow<&AnyResource{ExampleMarketplace.SalePublic}>()\n                       ?? panic("Could not borrow acct1 nft sale reference")\n\n    // Print the NFTs that account 0x01 has for sale\n    log("Account 1 NFTs for sale")\n    log(acct1SaleRef.getIDs())\n    if acct1SaleRef.getIDs().length != 0 { panic("Sale should be empty!") }\n}\n')),(0,o.kt)("p",null,"If you did everything correctly, the transaction should succeed and it should print something similar to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"Account 1 Vault Balance"\n50\n"Account 2 Vault Balance"\n10\n"Account 1 NFTs"\n[]\n"Account 2 NFTs"\n[1]\n"Account 1 NFTs for Sale"\n[]\n')),(0,o.kt)("p",null,"Congratulations, you have successfully implemented a simple marketplace in Cadence and used it to allow one account to buy an NFT from another!"),(0,o.kt)("h2",{id:"scaling-the-marketplace"},"Scaling the Marketplace"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"A user can hold a sale in their account with these resources and transactions.\nSupport for a central marketplace where users can discover sales is relatively easy to implement and can build on what we already have.\nIf we wanted to build a central marketplace on-chain, we could use a contract that looks something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cadence:title=CentralMarketplace.cdc"},'// Marketplace would be the central contract where people can post their sale\n// references so that anyone can access them\npub contract Marketplace {\n    // Data structure to store active sales\n    pub var tokensForSale: {Address: Capability<&SaleCollection>)}\n\n    // listSaleCollection lists a users sale reference in the array\n    // and returns the index of the sale so that users can know\n    // how to remove it from the marketplace\n    pub fun listSaleCollection(collection: Capability<&SaleCollection>) {\n        let saleRef = collection.borrow()\n            ?? panic("Invalid sale collection capability")\n\n        self.tokensForSale[saleRef.owner!.address] = collection\n    }\n\n    // removeSaleCollection removes a user\'s sale from the array\n    // of sale references\n    pub fun removeSaleCollection(owner: Address) {\n        self.tokensForSale[owner] = nil\n    }\n\n}\n')),(0,o.kt)("p",null,"This contract isn't meant to be a working or production-ready contract, but it could be extended to make a complete central marketplace by having:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Sellers list a capability to their ",(0,o.kt)("inlineCode",{parentName:"li"},"SaleCollection")," in this contract"),(0,o.kt)("li",{parentName:"ul"},"Other functions that buyers could call to get info about all the different sales and to make purchases.")),(0,o.kt)("p",null,"A central marketplace in an off-chain application is easier to implement because:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The app could host the marketplace and a user would simply log in to the app and give the app its account address."),(0,o.kt)("li",{parentName:"ul"},"The app could read the user's public storage and find their sale reference."),(0,o.kt)("li",{parentName:"ul"},"With the sale reference, the app could get all the information they need about how to display the sales on their website."),(0,o.kt)("li",{parentName:"ul"},"Any buyer could discover the sale in the app and login with their account, which gives the app access to their public references."),(0,o.kt)("li",{parentName:"ul"},"When the buyer wants to buy a specific NFT, the app would automatically generate the proper transaction to purchase the NFT from the seller.")),(0,o.kt)("h2",{id:"creating-a-marketplace-for-any-generic-nft"},"Creating a ",(0,o.kt)("strong",{parentName:"h2"},"Marketplace for Any Generic NFT")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The previous examples show how a simple marketplace could be created for a specific class of NFTs.\nHowever, users will want to have a marketplace where they can buy and sell any NFT they want, regardless of its type.\nThere are a few good examples of generic marketplaces on Flow right now."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The Flow team has created a completely decentralized example of a generic marketplace in the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/onflow/nft-storefront"},"NFT storefront repo."),"\nThis contract is already deployed to testnet and mainnet and can be used by anyone for any generic NFT sale!"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://viv3.com/"},"VIV3")," is a company that has a generic NFT marketplace.")),(0,o.kt)("h2",{id:"composable-resources-on-flow"},"Composable Resources on Flow"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Now that you have an understanding of how composable smart contracts and the marketplace work on Flow, you're ready to play with composable resources!\nCheck out the ",(0,o.kt)("a",{parentName:"p",href:"10-resources-compose"},"Kitty Hats tutorial!")))}m.isMDXComponent=!0}}]);