"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7451],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,m=d["".concat(i,".").concat(p)]||d[p]||h[p]||o;return t?r.createElement(m,s(s({ref:n},l),{},{components:t})):r.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=p;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[d]="string"==typeof e?e:a,s[1]=c;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},89957:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const o={title:"Resources",description:"Enables resource-oriented programming on Flow"},s=void 0,c={unversionedId:"cadence/language/resources",id:"cadence/language/resources",title:"Resources",description:"Enables resource-oriented programming on Flow",source:"@site/docs/cadence/language/resources.mdx",sourceDirName:"cadence/language",slug:"/cadence/language/resources",permalink:"/docs/cadence/language/resources",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alex",lastUpdatedAt:1683062072,formattedLastUpdatedAt:"May 2, 2023",frontMatter:{title:"Resources",description:"Enables resource-oriented programming on Flow"},sidebar:"tutorialSidebar",previous:{title:"References",permalink:"/docs/cadence/language/references"},next:{title:"Restricted Types",permalink:"/docs/cadence/language/restricted-types"}},i={},u=[{value:"The Move Operator (<code>&lt;-</code>)",id:"the-move-operator--",level:3},{value:"Resource Variables",id:"resource-variables",level:3},{value:"Resource Destructors",id:"resource-destructors",level:3},{value:"Nested Resources",id:"nested-resources",level:3},{value:"Resources in Closures",id:"resources-in-closures",level:3},{value:"Resources in Arrays and Dictionaries",id:"resources-in-arrays-and-dictionaries",level:3},{value:"Resource Identifier",id:"resource-identifier",level:3},{value:"Resource Owner",id:"resource-owner",level:2}],l=(d="Callout",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const h={toc:u},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Resources are types that can only exist in ",(0,a.kt)("strong",{parentName:"p"},"one")," location at a time\nand ",(0,a.kt)("strong",{parentName:"p"},"must")," be used ",(0,a.kt)("strong",{parentName:"p"},"exactly once"),"."),(0,a.kt)("p",null,"Resources ",(0,a.kt)("strong",{parentName:"p"},"must")," be created (instantiated) by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," keyword."),(0,a.kt)("p",null,"At the end of a function which has resources (variables, constants, parameters) in scope,\nthe resources ",(0,a.kt)("strong",{parentName:"p"},"must")," be either ",(0,a.kt)("strong",{parentName:"p"},"moved")," or ",(0,a.kt)("strong",{parentName:"p"},"destroyed"),"."),(0,a.kt)("p",null,"They are ",(0,a.kt)("strong",{parentName:"p"},"moved")," when used as an initial value for a constant or variable,\nwhen assigned to a different variable,\nwhen passed as an argument to a function,\nand when returned from a function."),(0,a.kt)("p",null,"Resources can be explicitly ",(0,a.kt)("strong",{parentName:"p"},"destroyed")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"destroy")," keyword."),(0,a.kt)("p",null,"Accessing a field or calling a function of a resource does not move or destroy it."),(0,a.kt)("p",null,"When the resource is moved, the constant or variable\nthat referred to the resource before the move becomes ",(0,a.kt)("strong",{parentName:"p"},"invalid"),".\nAn ",(0,a.kt)("strong",{parentName:"p"},"invalid")," resource cannot be used again."),(0,a.kt)("p",null,"To make the usage and behaviour of resource types explicit,\nthe prefix ",(0,a.kt)("inlineCode",{parentName:"p"},"@")," must be used in type annotations\nof variable or constant declarations, parameters, and return types."),(0,a.kt)("h3",{id:"the-move-operator--"},"The Move Operator (",(0,a.kt)("inlineCode",{parentName:"h3"},"<-"),")"),(0,a.kt)("p",null,"To make moves of resources explicit, the move operator ",(0,a.kt)("inlineCode",{parentName:"p"},"<-")," must be used\nwhen the resource is the initial value of a constant or variable,\nwhen it is moved to a different variable,\nwhen it is moved to a function as an argument,\nand when it is returned from a function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a resource named `SomeResource`, with a variable integer field.\n//\npub resource SomeResource {\n    pub var value: Int\n\n    init(value: Int) {\n        self.value = value\n    }\n}\n\n// Declare a constant with value of resource type `SomeResource`.\n//\nlet a: @SomeResource <- create SomeResource(value: 0)\n\n// *Move* the resource value to a new constant.\n//\nlet b <- a\n\n// Invalid: Cannot use constant `a` anymore as the resource that it referred to\n// was moved to constant `b`.\n//\na.value\n\n// Constant `b` owns the resource.\n//\nb.value // equals 0\n\n// Declare a function which accepts a resource.\n//\n// The parameter has a resource type, so the type annotation must be prefixed with `@`.\n//\npub fun use(resource: @SomeResource) {\n    // ...\n}\n\n// Call function `use` and move the resource into it.\n//\nuse(resource: <-b)\n\n// Invalid: Cannot use constant `b` anymore as the resource\n// it referred to was moved into function `use`.\n//\nb.value\n")),(0,a.kt)("p",null,"A resource object cannot go out of scope and be dynamically lost.\nThe program must either explicitly destroy it or move it to another context."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"{\n    // Declare another, unrelated value of resource type `SomeResource`.\n    //\n    let c <- create SomeResource(value: 10)\n\n    // Invalid: `c` is not used before the end of the scope, but must be.\n    // It cannot be lost.\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare another, unrelated value of resource type `SomeResource`.\n//\nlet d <- create SomeResource(value: 20)\n\n// Destroy the resource referred to by constant `d`.\n//\ndestroy d\n\n// Invalid: Cannot use constant `d` anymore as the resource\n// it referred to was destroyed.\n//\nd.value\n")),(0,a.kt)("p",null,"To make it explicit that the type is a resource type\nand must follow the rules associated with resources,\nit must be prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"@")," in all type annotations,\ne.g. for variable declarations, parameters, or return types."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant with an explicit type annotation.\n//\n// The constant has a resource type, so the type annotation must be prefixed with `@`.\n//\nlet someResource: @SomeResource <- create SomeResource(value: 5)\n\n// Declare a function which consumes a resource and destroys it.\n//\n// The parameter has a resource type, so the type annotation must be prefixed with `@`.\n//\npub fun use(resource: @SomeResource) {\n    destroy resource\n}\n\n// Declare a function which returns a resource.\n//\n// The return type is a resource type, so the type annotation must be prefixed with `@`.\n// The return statement must also use the `<-` operator to make it explicit the resource is moved.\n//\npub fun get(): @SomeResource {\n    let newResource <- create SomeResource()\n    return <-newResource\n}\n")),(0,a.kt)("p",null,"Resources ",(0,a.kt)("strong",{parentName:"p"},"must")," be used exactly once."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a function which consumes a resource but does not use it.\n// This function is invalid, because it would cause a loss of the resource.\n//\npub fun forgetToUse(resource: @SomeResource) {\n    // Invalid: The resource parameter `resource` is not used, but must be.\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a constant named `res` which has the resource type `SomeResource`.\nlet res <- create SomeResource()\n\n// Call the function `use` and move the resource `res` into it.\nuse(resource: <-res)\n\n// Invalid: The resource constant `res` cannot be used again,\n// as it was moved in the previous function call.\n//\nuse(resource: <-res)\n\n// Invalid: The resource constant `res` cannot be used again,\n// as it was moved in the previous function call.\n//\nres.value\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a function which has a resource parameter.\n// This function is invalid, because it does not always use the resource parameter,\n// which would cause a loss of the resource.\n//\npub fun sometimesDestroy(resource: @SomeResource, destroyResource: Bool) {\n    if destroyResource {\n        destroy resource\n    }\n    // Invalid: The resource parameter `resource` is not always used, but must be.\n    // The destroy statement is not always executed, so at the end of this function\n    // it might have been destroyed or not.\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a function which has a resource parameter.\n// This function is valid, as it always uses the resource parameter,\n// and does not cause a loss of the resource.\n//\npub fun alwaysUse(resource: @SomeResource, destroyResource: Bool) {\n    if destroyResource {\n        destroy resource\n    } else {\n        use(resource: <-resource)\n    }\n    // At the end of the function the resource parameter was definitely used:\n    // It was either destroyed or moved in the call of function `use`.\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a function which has a resource parameter.\n// This function is invalid, because it does not always use the resource parameter,\n// which would cause a loss of the resource.\n//\npub fun returnBeforeDestroy(move: Bool) {\n    let res <- create SomeResource(value: 1)\n    if move {\n        use(resource: <-res)\n        return\n    } else {\n        // Invalid: When this function returns here, the resource variable\n        // `res` was not used, but must be.\n        return\n    }\n    // Invalid: the resource variable `res` was potentially moved in the\n    // previous if-statement, and both branches definitely return,\n    // so this statement is unreachable.\n    destroy res\n}\n")),(0,a.kt)("h3",{id:"resource-variables"},"Resource Variables"),(0,a.kt)("p",null,"Resource variables cannot be assigned to,\nas that would lead to the loss of the variable's current resource value."),(0,a.kt)("p",null,"Instead, use a swap statement (",(0,a.kt)("inlineCode",{parentName:"p"},"<->"),") or shift statement (",(0,a.kt)("inlineCode",{parentName:"p"},"<- target <-"),")\nto replace the resource variable with another resource."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"pub resource R {}\n\nvar x <- create R()\nvar y <- create R()\n\n// Invalid: Cannot assign to resource variable `x`,\n// as its current resource would be lost\n//\nx <- y\n\n// Instead, use a swap statement.\n//\nvar replacement <- create R()\nx <-> replacement\n// `x` is the new resource.\n// `replacement` is the old resource.\n\n// Or use the shift statement (`<- target <-`)\n// This statement moves the resource out of `x` and into `oldX`,\n// and at the same time assigns `x` with the new value on the right-hand side.\nlet oldX <- x <- create R()\n// oldX still needs to be explicitly handled after this statement\ndestroy oldX\n")),(0,a.kt)("h3",{id:"resource-destructors"},"Resource Destructors"),(0,a.kt)("p",null,"Resource may have a destructor, which is executed when the resource is destroyed.\nDestructors have no parameters and no return value and are declared using the ",(0,a.kt)("inlineCode",{parentName:"p"},"destroy")," name.\nA resource may have only one destructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"var destructorCalled = false\n\npub resource Resource {\n\n    // Declare a destructor for the resource, which is executed\n    // when the resource is destroyed.\n    //\n    destroy() {\n        destructorCalled = true\n    }\n}\n\nlet res <- create Resource()\ndestroy res\n// `destructorCalled` is `true`\n")),(0,a.kt)("h3",{id:"nested-resources"},"Nested Resources"),(0,a.kt)("p",null,"Fields in composite types behave differently when they have a resource type."),(0,a.kt)("p",null,"If a resource type has fields that have a resource type,\nit ",(0,a.kt)("strong",{parentName:"p"},"must")," declare a destructor,\nwhich ",(0,a.kt)("strong",{parentName:"p"},"must")," invalidate all resource fields, i.e. move or destroy them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"pub resource Child {\n    let name: String\n\n    init(name: String)\n        self.name = name\n    }\n}\n\n// Declare a resource with a resource field named `child`.\n// The resource *must* declare a destructor\n// and the destructor *must* invalidate the resource field.\n//\npub resource Parent {\n    let name: String\n    var child: @Child\n\n    init(name: String, child: @Child) {\n        self.name = name\n        self.child <- child\n    }\n\n    // Declare a destructor which invalidates the resource field\n    // `child` by destroying it.\n    //\n    destroy() {\n        destroy self.child\n    }\n}\n")),(0,a.kt)("p",null,"Accessing a field or calling function on a resource field is valid,\nhowever moving a resource out of a variable resource field is ",(0,a.kt)("strong",{parentName:"p"},"not")," allowed.\nInstead, use a swap statement to replace the resource with another resource."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'let child <- create Child(name: "Child 1")\nlet parent <- create Parent(name: "Parent", child: <-child)\n\nchild.name  // is "Child 1"\nparent.child.name  // is "Child 1"\n\n// Invalid: Cannot move resource out of variable resource field.\nlet childAgain <- parent.child\n\n// Instead, use a swap statement.\n//\nvar otherChild <- create Child(name: "Child 2")\nparent.child <-> otherChild\n// `parent.child` is the second child, Child 2.\n// `otherChild` is the first child, Child 1.\n')),(0,a.kt)("h3",{id:"resources-in-closures"},"Resources in Closures"),(0,a.kt)("p",null,"Resources can not be captured in closures, as that could potentially result in duplications."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"resource R {}\n\n// Invalid: Declare a function which returns a closure which refers to\n// the resource parameter `resource`. Each call to the returned function\n// would return the resource, which should not be possible.\n//\nfun makeCloner(resource: @R): ((): @R) {\n    return fun (): @R {\n        return <-resource\n    }\n}\n\nlet test = makeCloner(resource: <-create R())\n")),(0,a.kt)("h3",{id:"resources-in-arrays-and-dictionaries"},"Resources in Arrays and Dictionaries"),(0,a.kt)("p",null,"Arrays and dictionaries behave differently when they contain resources:\nIt is ",(0,a.kt)("strong",{parentName:"p"},"not")," allowed to index into an array to read an element at a certain index or assign to it,\nor index into a dictionary to read a value for a certain key or set a value for the key."),(0,a.kt)("p",null,"Instead, use a swap statement (",(0,a.kt)("inlineCode",{parentName:"p"},"<->"),") or shift statement (",(0,a.kt)("inlineCode",{parentName:"p"},"<- target <-"),")\nto replace the accessed resource with another resource."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"resource R {}\n\n// Declare a constant for an array of resources.\n// Create two resources and move them into the array.\n// `resources` has type `@[R]`\n//\nlet resources <- [\n    <-create R(),\n    <-create R()\n]\n\n// Invalid: Reading an element from a resource array is not allowed.\n//\nlet firstResource <- resources[0]\n\n// Invalid: Setting an element in a resource array is not allowed,\n// as it would result in the loss of the current value.\n//\nresources[0] <- create R()\n\n// Instead, when attempting to either read an element or update an element\n// in a resource array, use a swap statement with a variable to replace\n// the accessed element.\n//\nvar res <- create R()\nresources[0] <-> res\n// `resources[0]` now contains the new resource.\n// `res` now contains the old resource.\n\n// Use the shift statement to move the new resource into\n// the array at the same time that the old resource is being moved out\nlet oldRes <- resources[0] <- create R()\n// The old object still needs to be handled\ndestroy oldRes\n")),(0,a.kt)("p",null,"The same applies to dictionaries."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'// Declare a constant for a dictionary of resources.\n// Create two resources and move them into the dictionary.\n// `resources` has type `@{String: R}`\n//\nlet resources <- {\n    "r1": <-create R(),\n    "r2": <-create R()\n}\n\n// Invalid: Reading an element from a resource dictionary is not allowed.\n// It\'s not obvious that an access like this would have to remove\n// the key from the dictionary.\n//\nlet firstResource <- resources["r1"]\n\n// Instead, make the removal explicit by using the `remove` function.\nlet firstResource <- resources.remove(key: "r1")\n\n// Invalid: Setting an element in a resource dictionary is not allowed,\n// as it would result in the loss of the current value.\n//\nresources["r1"] <- create R()\n\n// Instead, when attempting to either read an element or update an element\n// in a resource dictionary, use a swap statement with a variable to replace\n// the accessed element.\n//\n// The result of a dictionary read is optional, as the given key might not\n// exist in the dictionary.\n// The types on both sides of the swap operator must be the same,\n// so also declare the variable as an optional.\n//\nvar res: @R? <- create R()\nresources["r1"] <-> res\n// `resources["r1"]` now contains the new resource.\n// `res` now contains the old resource.\n\n// Use the shift statement to move the new resource into\n// the dictionary at the same time that the old resource is being moved out\nlet oldRes <- resources["r2"] <- create R()\n// The old object still needs to be handled\ndestroy oldRes\n')),(0,a.kt)("p",null,"Resources cannot be moved into arrays and dictionaries multiple times,\nas that would cause a duplication."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"let resource <- create R()\n\n// Invalid: The resource variable `resource` can only be moved into the array once.\n//\nlet resources <- [\n    <-resource,\n    <-resource\n]\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'let resource <- create R()\n\n// Invalid: The resource variable `resource` can only be moved into the dictionary once.\nlet resources <- {\n    "res1": <-resource,\n    "res2": <-resource\n}\n')),(0,a.kt)("p",null,"Resource arrays and dictionaries can be destroyed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"let resources <- [\n    <-create R(),\n    <-create R()\n]\ndestroy resources\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'let resources <- {\n    "r1": <-create R(),\n    "r2": <-create R()\n}\ndestroy resources\n')),(0,a.kt)("p",null,"The variable array functions like ",(0,a.kt)("inlineCode",{parentName:"p"},"append"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"insert"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"remove"),"\nbehave like for non-resource arrays.\nNote however, that the result of the ",(0,a.kt)("inlineCode",{parentName:"p"},"remove")," functions must be used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"let resources <- [<-create R()]\n// `resources.length` is `1`\n\nresources.append(<-create R())\n// `resources.length` is `2`\n\nlet first <- resource.remove(at: 0)\n// `resources.length` is `1`\ndestroy first\n\nresources.insert(at: 0, <-create R())\n// `resources.length` is `2`\n\n// Invalid: The statement ignores the result of the call to `remove`,\n// which would result in a loss.\nresource.remove(at: 0)\n\ndestroy resources\n")),(0,a.kt)("p",null,"The variable array function ",(0,a.kt)("inlineCode",{parentName:"p"},"contains")," is not available, as it is impossible:\nIf the resource can be passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"contains")," function,\nit is by definition not in the array."),(0,a.kt)("p",null,"The variable array function ",(0,a.kt)("inlineCode",{parentName:"p"},"concat")," is not available,\nas it would result in the duplication of resources."),(0,a.kt)("p",null,"The dictionary functions like ",(0,a.kt)("inlineCode",{parentName:"p"},"insert")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"remove"),"\nbehave like for non-resource dictionaries.\nNote however, that the result of these functions must be used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},'let resources <- {"r1": <-create R()}\n// `resources.length` is `1`\n\nlet first <- resource.remove(key: "r1")\n// `resources.length` is `0`\ndestroy first\n\nlet old <- resources.insert(key: "r1", <-create R())\n// `old` is nil, as there was no value for the key "r1"\n// `resources.length` is `1`\n\nlet old2 <- resources.insert(key: "r1", <-create R())\n// `old2` is the old value for the key "r1"\n// `resources.length` is `1`\n\ndestroy old\ndestroy old2\ndestroy resources\n')),(0,a.kt)("h3",{id:"resource-identifier"},"Resource Identifier"),(0,a.kt)("p",null,"Resources have an implicit unique identifier associated with them,\nimplemented by a predeclared public field ",(0,a.kt)("inlineCode",{parentName:"p"},"let uuid: UInt64")," on each resource."),(0,a.kt)("p",null,"This identifier will be automatically set when the resource is created, before the resource's initializer is called\n(i.e. the identifier can be used in the initializer),\nand will be unique even after the resource is destroyed,\ni.e. no two resources will ever have the same identifier."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cadence"},"// Declare a resource without any fields.\nresource R {}\n\n// Create two resources\nlet r1 <- create R()\nlet r2 <- create R()\n\n// Get each resource's unique identifier\nlet id1 = r1.uuid\nlet id2 = r2.uuid\n\n// Destroy the first resource\ndestroy r1\n\n// Create a third resource\nlet r3 <- create R()\n\nlet id3 = r3.uuid\n\nid1 != id2  // true\nid2 != id3  // true\nid3 != id1  // true\n")),(0,a.kt)(l,{type:"warning",mdxType:"Callout"},"The details of how the identifiers are generated is an implementation detail.",(0,a.kt)("p",null,"Do not rely on or assume any particular behaviour in Cadence programs.")),(0,a.kt)("h2",{id:"resource-owner"},"Resource Owner"),(0,a.kt)("p",null,"Resources have the implicit field ",(0,a.kt)("inlineCode",{parentName:"p"},"let owner: PublicAccount?"),".\nIf the resource is currently ",(0,a.kt)("a",{parentName:"p",href:"accounts#account-storage"},"stored in an account"),",\nthen the field contains the publicly accessible portion of the account.\nOtherwise the field is ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,a.kt)("p",null,"The field's value changes when the resource is moved from outside account storage\ninto account storage, when it is moved from the storage of one account\nto the storage of another account, and when it is moved out of account storage."))}m.isMDXComponent=!0}}]);